/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGRUBY
#define SWIGRUBY
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif
#ifndef RTYPEDDATA_P
# define RTYPEDDATA_P(x) (TYPE(x) != T_DATA)
#endif



/*
 * The following macros are used for providing the correct type of a
 * function pointer to the Ruby C API.
 * Starting with Ruby 2.7 (corresponding to RB_METHOD_DEFINITION_DECL being
 * defined) these macros act transparently due to Ruby's moving away from
 * ANYARGS and instead employing strict function signatures.
 *
 * Note: In case of C (not C++) the macros are transparent even before
 * Ruby 2.7 due to the fact that the Ruby C API used function declarators
 * with empty parentheses, which allows for an unspecified number of
 * arguments.
 *
 * PROTECTFUNC(f) is used for the function pointer argument of the Ruby
 * C API function rb_protect().
 *
 * VALUEFUNC(f) is used for the function pointer argument(s) of Ruby C API
 * functions like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is used to typecast a C function that implements either
 * the "mark" or "free" stuff for a Ruby Data object, so that it can be
 * passed as an argument to Ruby C API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 *
 * SWIG_RUBY_VOID_ANYARGS_FUNC(f) is used for the function pointer
 * argument(s) of Ruby C API functions like rb_define_virtual_variable().
 *
 * SWIG_RUBY_INT_ANYARGS_FUNC(f) is used for the function pointer
 * argument(s) of Ruby C API functions like st_foreach().
 */
#if defined(__cplusplus) && !defined(RB_METHOD_DEFINITION_DECL)
#  define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#  define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#  define VOIDFUNC(f) ((RUBY_DATA_FUNC) f)
#  define SWIG_RUBY_VOID_ANYARGS_FUNC(f) ((void (*)(ANYARGS))(f))
#  define SWIG_RUBY_INT_ANYARGS_FUNC(f) ((int (*)(ANYARGS))(f))
#else
#  define PROTECTFUNC(f) (f)
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#  define SWIG_RUBY_VOID_ANYARGS_FUNC(f) (f)
#  define SWIG_RUBY_INT_ANYARGS_FUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(ST_DATA_T_DEFINED)
/* Needs to be explicitly included for Ruby 1.8 and earlier */
#include <st.h>
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif

/* Global hash table to store Trackings from C/C++
   structs to Ruby Objects.
*/
static st_table* swig_ruby_trackings = NULL;

static VALUE swig_ruby_trackings_count(ID id, VALUE *var) {
  return SWIG2NUM(swig_ruby_trackings->num_entries);
}


/* Setup a hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a hash table to store Trackings from C++
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  VALUE trackings_value = Qnil;
  /* change the variable name so that we can mix modules
     compiled with older SWIG's - this used to be called "@__trackings__" */
  ID trackings_id = rb_intern( "@__safetrackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  trackings_value = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* The trick here is that we have to store the hash table
  pointer in a Ruby variable. We do not want Ruby's GC to
  treat this pointer as a Ruby object, so we convert it to
  a Ruby numeric value. */
  if (trackings_value == Qnil) {
    /* No, it hasn't.  Create one ourselves */
    swig_ruby_trackings = st_init_numtable();
    rb_ivar_set( _mSWIG, trackings_id, SWIG2NUM(swig_ruby_trackings) );
  } else {
    swig_ruby_trackings = (st_table*)NUM2SWIG(trackings_value);
  }

  rb_define_virtual_variable("SWIG_TRACKINGS_COUNT",
                             VALUEFUNC(swig_ruby_trackings_count),
                             SWIG_RUBY_VOID_ANYARGS_FUNC((rb_gvar_setter_t*)NULL));
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* Store the mapping to the global hash table. */
  st_insert(swig_ruby_trackings, (st_data_t)ptr, object);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Now lookup the value stored in the global hash table */
  VALUE value;

  if (st_lookup(swig_ruby_trackings, (st_data_t)ptr, &value)) {
    return value;
  } else {
    return Qnil;
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Delete the object from the hash table */
  st_delete(swig_ruby_trackings, (st_data_t *)&ptr, NULL);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object. */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    // object might have the T_ZOMBIE type, but that's just
    // because the GC has flagged it as such for a deferred
    // destruction. Until then, it's still a T_DATA object.
    DATA_PTR(object) = 0;
  }
}

/* This is a helper method that iterates over all the trackings
   passing the C++ object pointer and its related Ruby object
   to the passed callback function. */

/* Proxy method to abstract the internal trackings datatype */
static int swig_ruby_internal_iterate_callback(st_data_t ptr, st_data_t obj, st_data_t meth) {
  ((void (*) (void *, VALUE))meth)((void *)ptr, (VALUE)obj);
  return ST_CONTINUE;
}

SWIGRUNTIME void SWIG_RubyIterateTrackings( void(*meth)(void* ptr, VALUE obj) ) {
  st_foreach(swig_ruby_trackings,
             SWIG_RUBY_INT_ANYARGS_FUNC(swig_ruby_internal_iterate_callback),
             (st_data_t)meth);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    swig_ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;

  if (!ptr)
    return Qnil;

  assert(type);
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);

      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));

  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  if (NIL_P(stype))
    return NULL;
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef struct {
  void (*datafree)(void *);
  int own;
} swig_ruby_owntype;

SWIGRUNTIME swig_ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, swig_ruby_owntype own) {
  swig_ruby_owntype oldown = {0, 0};
  if (TYPE(obj) == T_DATA && !RTYPEDDATA_P(obj)) {
    oldown.datafree = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own.datafree;
  }
  return oldown;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, swig_ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA || (TYPE(obj) == T_DATA && RTYPEDDATA_P(obj))) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) {
    own->datafree = RDATA(obj)->dfree;
    own->own = 0;
  }
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      if (ptr) {
        if (tc->type == ty) {
          *ptr = vptr;
        } else {
          int newmemory = 0;
          *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
          if (newmemory == SWIG_CAST_NEW_MEMORY) {
            assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
            if (own)
              own->own = own->own | SWIG_CAST_NEW_MEMORY;
          }
        }
      }
    }
  } else {
    if (ptr)
      *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_System_LLHT_double_WGS84_t swig_types[0]
#define SWIGTYPE_System_XYZT_double_WGS84_t swig_types[1]
#define SWIGTYPE_p_ComplexT_double_t swig_types[2]
#define SWIGTYPE_p_GPS_EphemerisT_double_t swig_types[3]
#define SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t swig_types[4]
#define SWIGTYPE_p_GPS_MeasurementT_double_t swig_types[5]
#define SWIGTYPE_p_GPS_SolverOptionsT_double_t swig_types[6]
#define SWIGTYPE_p_GPS_SolverOptions_CommonT_double_t swig_types[7]
#define SWIGTYPE_p_GPS_SolverT_double_t swig_types[8]
#define SWIGTYPE_p_GPS_Solver_GeneralOptionsT_double_t swig_types[9]
#define SWIGTYPE_p_GPS_SpaceNodeT_double_t swig_types[10]
#define SWIGTYPE_p_GPS_SpaceNodeT_double_t__Ionospheric_UTC_Parameters swig_types[11]
#define SWIGTYPE_p_GPS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris swig_types[12]
#define SWIGTYPE_p_GPS_TimeT_double_t swig_types[13]
#define SWIGTYPE_p_GPS_TimeT_double_t__leap_second_event_t swig_types[14]
#define SWIGTYPE_p_GPS_TimeT_double_t__leap_year_prop_res_t swig_types[15]
#define SWIGTYPE_p_GPS_User_PVTT_double_t swig_types[16]
#define SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t swig_types[17]
#define SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t swig_types[18]
#define SWIGTYPE_p_MatrixViewBaseT_t swig_types[19]
#define SWIGTYPE_p_MatrixViewFilterT_MatrixViewBaseT_t_t swig_types[20]
#define SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t swig_types[21]
#define SWIGTYPE_p_RINEX_ObservationT_double_t swig_types[22]
#define SWIGTYPE_p_SBAS_EphemerisT_double_t swig_types[23]
#define SWIGTYPE_p_SBAS_SolverOptionsT_double_t swig_types[24]
#define SWIGTYPE_p_SBAS_SpaceNodeT_double_t swig_types[25]
#define SWIGTYPE_p_SBAS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris swig_types[26]
#define SWIGTYPE_p_System_ENUT_double_WGS84_t swig_types[27]
#define SWIGTYPE_p_System_LLHT_double_WGS84_t swig_types[28]
#define SWIGTYPE_p_System_XYZT_double_WGS84_t swig_types[29]
#define SWIGTYPE_p_available_satellites_t swig_types[30]
#define SWIGTYPE_p_char swig_types[31]
#define SWIGTYPE_p_double swig_types[32]
#define SWIGTYPE_p_enu_t swig_types[33]
#define SWIGTYPE_p_float_t swig_types[34]
#define SWIGTYPE_p_gps_space_node_t swig_types[35]
#define SWIGTYPE_p_gps_time_t swig_types[36]
#define SWIGTYPE_p_int swig_types[37]
#define SWIGTYPE_p_int_t swig_types[38]
#define SWIGTYPE_p_llh_t swig_types[39]
#define SWIGTYPE_p_p_GPS_Solver_RAIM_LSRT_double_GPS_Solver_Base_DebugT_double_GPS_Solver_BaseT_double_t_t_t__user_pvt_t__detection_t swig_types[40]
#define SWIGTYPE_p_p_GPS_Solver_RAIM_LSRT_double_GPS_Solver_Base_DebugT_double_GPS_Solver_BaseT_double_t_t_t__user_pvt_t__exclusion_t swig_types[41]
#define SWIGTYPE_p_range_correction_list_t swig_types[42]
#define SWIGTYPE_p_s16_t swig_types[43]
#define SWIGTYPE_p_s32_t swig_types[44]
#define SWIGTYPE_p_s8_t swig_types[45]
#define SWIGTYPE_p_satellites_t swig_types[46]
#define SWIGTYPE_p_self_t swig_types[47]
#define SWIGTYPE_p_std__vectorT_std__pairT_int_SBAS_SpaceNodeT_double_t__Satellite_const_p_t_t swig_types[48]
#define SWIGTYPE_p_swig__GC_VALUE swig_types[49]
#define SWIGTYPE_p_u16_t swig_types[50]
#define SWIGTYPE_p_u32_t swig_types[51]
#define SWIGTYPE_p_u8_t swig_types[52]
#define SWIGTYPE_p_uint_t swig_types[53]
#define SWIGTYPE_p_xyz_t swig_types[54]
static swig_type_info *swig_types[56];
static swig_module_info swig_module = {swig_types, 55, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_GPS
#define SWIG_name    "GPS_PVT::GPS"

static VALUE mGPS;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#if defined(SWIGRUBY)
#undef isfinite
#endif

#include <string>
#include <vector>
#include <iostream>
#include <fstream>
#include <exception>
#include <sstream>

#include "navigation/GPS.h"
#include "navigation/SBAS.h"
#include "navigation/QZSS.h"
#include "navigation/RINEX.h"

#include "navigation/GPS_Solver_Base.h"
#include "navigation/GPS_Solver.h"
#include "navigation/GPS_Solver_RAIM.h"
#include "navigation/SBAS_Solver.h"

#if defined(__cplusplus) && (__cplusplus < 201103L)
namespace std {
template <class T>
inline std::string to_string(const T &value){
  // @see https://stackoverflow.com/a/5590404/15992898
  return static_cast<std::ostringstream &>(std::ostringstream() << value).str();
}
}
#endif


#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.9 changed the file name of this header */
#ifdef HAVE_RUBY_IO_H
#include "ruby/io.h"
#else
#include "rubyio.h"
#endif

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
#ifdef HAVE_SYS_TIME_H
# include <sys/time.h>
struct timeval rb_time_timeval(VALUE);
#endif
#ifdef __cplusplus
}
#endif


#include <typeinfo>
#include <stdexcept>


namespace swig {
  class SwigGCReferences {
    VALUE _hash;

    SwigGCReferences() : _hash(Qnil) {
    }
    ~SwigGCReferences() {
      if (_hash != Qnil)
        rb_gc_unregister_address(&_hash);
    }
    static void EndProcHandler(VALUE) {
      // Ruby interpreter ending - _hash can no longer be accessed.
      SwigGCReferences &s_references = instance();
      s_references._hash = Qnil;
    }
  public:
    static SwigGCReferences& instance() {
      // Hash of all GC_VALUE's currently in use
      static SwigGCReferences s_references;

      return s_references;
    }
    static void initialize() {
      SwigGCReferences &s_references = instance();
      if (s_references._hash == Qnil) {
        rb_set_end_proc(&EndProcHandler, Qnil);
        s_references._hash = rb_hash_new();
        rb_gc_register_address(&s_references._hash);
      }
    }
    void GC_register(VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(_hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 0;
        ++n;
        rb_hash_aset(_hash, obj, INT2NUM(n));
      }
    }
    void GC_unregister(const VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      // this test should not be needed but I've noticed some very erratic
      // behavior of none being unregistered in some very rare situations.
      if (BUILTIN_TYPE(obj) == T_NONE)
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(_hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 1;
        --n;
        if (n)
          rb_hash_aset(_hash, obj, INT2NUM(n));
        else
          rb_hash_delete(_hash, obj);
      }
    }
  };

  class GC_VALUE {
  protected:
    VALUE  _obj;

    static ID hash_id;
    static ID   lt_id;
    static ID   gt_id;
    static ID   eq_id;
    static ID   le_id;
    static ID   ge_id;

    static ID  pos_id;
    static ID  neg_id;
    static ID  inv_id;

    static ID  add_id;
    static ID  sub_id;
    static ID  mul_id;
    static ID  div_id;
    static ID  mod_id;

    static ID  and_id;
    static ID   or_id;
    static ID  xor_id;

    static ID  lshift_id;
    static ID  rshift_id;

    struct OpArgs
    {
      VALUE src;
      ID    id;
      int   nargs;
      VALUE target;
    };


  public:
    GC_VALUE() : _obj(Qnil)
    {
    }

    GC_VALUE(const GC_VALUE& item) : _obj(item._obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    GC_VALUE(VALUE obj) :_obj(obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    ~GC_VALUE() 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
    }
    
    GC_VALUE & operator=(const GC_VALUE& item) 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
      _obj = item._obj;
      SwigGCReferences::instance().GC_register(_obj);
      return *this;
    }

    operator VALUE() const
    {
      return _obj;
    }

    VALUE inspect() const
    {
      return rb_inspect(_obj);
    }

    VALUE to_s() const
    {
      return rb_inspect(_obj);
    }

    static VALUE swig_rescue_swallow(VALUE, VALUE)
    {
      /*
      VALUE errstr = rb_obj_as_string(rb_errinfo());
      printf("Swallowing error: '%s'\n", RSTRING_PTR(StringValue(errstr)));
      */
      return Qnil; /* Swallow Ruby exception */
    }

    static VALUE swig_rescue_funcall(VALUE p)
    {
      OpArgs* args = (OpArgs*) p;
      return rb_funcall(args->src, args->id, args->nargs, args->target);
    }

    bool relational_equal_op(const GC_VALUE& other, const ID& op_id, bool (*op_func)(const VALUE& a, const VALUE& b)) const
    {
      if (FIXNUM_P(_obj) && FIXNUM_P(other._obj)) {
        return op_func(_obj, other._obj);
      }
      bool res = false;
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      if (rb_respond_to(_obj, op_id)) {
        OpArgs  args;
        args.src    = _obj;
        args.id     = op_id;
        args.nargs  = 1;
        args.target = VALUE(other);
        ret = rb_rescue(VALUEFUNC(swig_rescue_funcall), VALUE(&args),
                       (VALUEFUNC(swig_rescue_swallow)), Qnil);
      }
      if (ret == Qnil) {
        VALUE a = rb_funcall(         _obj, hash_id, 0 );
        VALUE b = rb_funcall( VALUE(other), hash_id, 0 );
        res = op_func(a, b);
      } else {
        res = RTEST(ret);
      }
      SWIG_RUBY_THREAD_END_BLOCK;
      return res;
    }

    static bool operator_eq(const VALUE& a, const VALUE& b) { return a == b; }
    static bool operator_lt(const VALUE& a, const VALUE& b) { return a < b; }
    static bool operator_le(const VALUE& a, const VALUE& b) { return a <= b; }
    static bool operator_gt(const VALUE& a, const VALUE& b) { return a > b; }
    static bool operator_ge(const VALUE& a, const VALUE& b) { return a >= b; }

    bool operator==(const GC_VALUE& other) const { return relational_equal_op(other, eq_id, operator_eq); }
    bool operator<(const GC_VALUE& other) const { return relational_equal_op(other, lt_id, operator_lt); }
    bool operator<=(const GC_VALUE& other) const { return relational_equal_op(other, le_id, operator_le); }
    bool operator>(const GC_VALUE& other) const { return relational_equal_op(other, gt_id, operator_gt); }
    bool operator>=(const GC_VALUE& other) const { return relational_equal_op(other, ge_id, operator_ge); }

    bool operator!=(const GC_VALUE& other) const
    {
      return !(this->operator==(other));
    }

    GC_VALUE unary_op(const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 0;
      args.target = Qnil;
      ret = rb_rescue(VALUEFUNC(swig_rescue_funcall), VALUE(&args),
                     (VALUEFUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return ret;
    }

    GC_VALUE operator+() const { return unary_op(pos_id); }
    GC_VALUE operator-() const { return unary_op(neg_id); }
    GC_VALUE operator~() const { return unary_op(inv_id); }

    GC_VALUE binary_op(const GC_VALUE& other, const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 1;
      args.target = VALUE(other);
      ret = rb_rescue(VALUEFUNC(swig_rescue_funcall), VALUE(&args),
                     (VALUEFUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return GC_VALUE(ret);
    }

    GC_VALUE operator+(const GC_VALUE& other) const { return binary_op(other, add_id); }
    GC_VALUE operator-(const GC_VALUE& other) const { return binary_op(other, sub_id); }
    GC_VALUE operator*(const GC_VALUE& other) const { return binary_op(other, mul_id); }
    GC_VALUE operator/(const GC_VALUE& other) const { return binary_op(other, div_id); }
    GC_VALUE operator%(const GC_VALUE& other) const { return binary_op(other, mod_id); }
    GC_VALUE operator&(const GC_VALUE& other) const { return binary_op(other, and_id); }
    GC_VALUE operator^(const GC_VALUE& other) const { return binary_op(other, xor_id); }
    GC_VALUE operator|(const GC_VALUE& other) const { return binary_op(other, or_id); }
    GC_VALUE operator<<(const GC_VALUE& other) const { return binary_op(other, lshift_id); }
    GC_VALUE operator>>(const GC_VALUE& other) const { return binary_op(other, rshift_id); }
  };

  ID  GC_VALUE::hash_id = rb_intern("hash");
  ID  GC_VALUE::lt_id = rb_intern("<");
  ID  GC_VALUE::gt_id = rb_intern(">");
  ID  GC_VALUE::eq_id = rb_intern("==");
  ID  GC_VALUE::le_id = rb_intern("<=");
  ID  GC_VALUE::ge_id = rb_intern(">=");

  ID  GC_VALUE::pos_id = rb_intern("+@");
  ID  GC_VALUE::neg_id = rb_intern("-@");
  ID  GC_VALUE::inv_id = rb_intern("~");

  ID  GC_VALUE::add_id = rb_intern("+");
  ID  GC_VALUE::sub_id = rb_intern("-");
  ID  GC_VALUE::mul_id = rb_intern("*");
  ID  GC_VALUE::div_id = rb_intern("/");
  ID  GC_VALUE::mod_id = rb_intern("%");

  ID  GC_VALUE::and_id = rb_intern("&");
  ID  GC_VALUE::or_id  = rb_intern("|");
  ID  GC_VALUE::xor_id = rb_intern("^");

  ID  GC_VALUE::lshift_id = rb_intern("<<");
  ID  GC_VALUE::rshift_id = rb_intern(">>");

  typedef GC_VALUE LANGUAGE_OBJ;

} // namespace swig



#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


struct native_exception : public std::exception {

  int state;
  native_exception(const int &state_) : std::exception(), state(state_) {}
  void regenerate() const {rb_jump_tag(state);}



};


static VALUE yield_throw_if_error(const int &argc, const VALUE *argv) {
  struct yield_t {
    const int &argc;
    const VALUE *argv;
    static VALUE run(VALUE v){
      yield_t *arg(reinterpret_cast<yield_t *>(v));
      return rb_yield_values2(arg->argc, arg->argv);
    }
  } arg = {argc, argv};
  int state;
  VALUE res(rb_protect(yield_t::run, reinterpret_cast<VALUE>(&arg), &state));
  if(state != 0){throw native_exception(state);}
  return res;
}
static VALUE proc_call_throw_if_error(
    const VALUE &arg0, const int &argc, const VALUE *argv) {
  struct proc_call_t {
    const VALUE &arg0;
    const int &argc;
    const VALUE *argv;
    static VALUE run(VALUE v){
      proc_call_t *arg(reinterpret_cast<proc_call_t *>(v));
      return rb_proc_call_with_block(arg->arg0, arg->argc, arg->argv, Qnil);
    }
  } arg = {arg0, argc, argv};
  int state;
  VALUE res(rb_protect(proc_call_t::run, reinterpret_cast<VALUE>(&arg), &state));
  if(state != 0){throw native_exception(state);}
  return res;
}
static std::string inspect_str(const VALUE &v){
  VALUE v_inspect(rb_inspect(v));
  return std::string(RSTRING_PTR(v_inspect), RSTRING_LEN(v_inspect));
}


template <class FloatT>
struct GPS_Ionospheric_UTC_Parameters : public GPS_SpaceNode<FloatT>::Ionospheric_UTC_Parameters {};


template <class FloatT>
struct GPS_Ephemeris : public GPS_SpaceNode<FloatT>::SatelliteProperties::Ephemeris {
  int iode_subframe3;
  void invalidate() {
    this->iodc = this->iode = iode_subframe3 = -1; 
  }
  bool is_consistent() const {
    return !((this->iodc < 0) 
        || (this->iode != this->iode_subframe3)
        || ((this->iodc & 0xFF) != this->iode));
  }
  GPS_Ephemeris() : GPS_SpaceNode<FloatT>::SatelliteProperties::Ephemeris() {
    invalidate();
  }
  GPS_Ephemeris(const typename GPS_SpaceNode<FloatT>::SatelliteProperties::Ephemeris &eph) 
      : GPS_SpaceNode<FloatT>::SatelliteProperties::Ephemeris(eph),
      iode_subframe3(eph.iode) {}
};


  #define SWIG_From_double   rb_float_new 


template <class FloatT>
struct SBAS_Ephemeris : public SBAS_SpaceNode<FloatT>::SatelliteProperties::Ephemeris {
  SBAS_Ephemeris() : SBAS_SpaceNode<FloatT>::SatelliteProperties::Ephemeris() {}
  SBAS_Ephemeris(const typename SBAS_SpaceNode<FloatT>::SatelliteProperties::Ephemeris &eph) 
      : SBAS_SpaceNode<FloatT>::SatelliteProperties::Ephemeris(eph) {}
};


template <class FloatT>
struct GPS_User_PVT 
    : protected GPS_Solver_RAIM_LSR<FloatT,
      GPS_Solver_Base_Debug<FloatT, GPS_Solver_Base<FloatT> > >::user_pvt_t {
  typedef GPS_Solver_RAIM_LSR<FloatT, 
      GPS_Solver_Base_Debug<FloatT, GPS_Solver_Base<FloatT> > > solver_t;
  typedef typename solver_t::user_pvt_t base_t;
  GPS_User_PVT() : base_t() {}
  GPS_User_PVT(const base_t &base) : base_t(base) {}
  enum {
    ERROR_NO = 0,
    ERROR_UNSOLVED,
    ERROR_INVALID_IONO_MODEL,
    ERROR_INSUFFICIENT_SATELLITES,
    ERROR_POSITION_LS,
    ERROR_POSITION_NOT_CONVERGED,
    ERROR_DOP,
    ERROR_VELOCITY_SKIPPED,
    ERROR_VELOCITY_INSUFFICIENT_SATELLITES,
    ERROR_VELOCITY_LS,
  };
  int error_code() const {return (int)(base_t::error_code);}
  const GPS_Time<FloatT> &receiver_time() const {return base_t::receiver_time;}
  const System_XYZ<FloatT, WGS84> &xyz() const {return base_t::user_position.xyz;}
  const System_LLH<FloatT, WGS84> &llh() const {return base_t::user_position.llh;}
  const FloatT &receiver_error() const {return base_t::receiver_error;}
  const System_ENU<FloatT, WGS84> &velocity() const {return base_t::user_velocity_enu;}
  const FloatT &receiver_error_rate() const {return base_t::receiver_error_rate;}
  const FloatT &gdop() const {return base_t::dop.g;}
  const FloatT &pdop() const {return base_t::dop.p;}
  const FloatT &hdop() const {return base_t::dop.h;}
  const FloatT &vdop() const {return base_t::dop.v;}
  const FloatT &tdop() const {return base_t::dop.t;}
  const unsigned int &used_satellites() const {return base_t::used_satellites;}
  std::vector<int> used_satellite_list() const {return base_t::used_satellite_mask.indices_one();}
  bool position_solved() const {return base_t::position_solved();}
  bool velocity_solved() const {return base_t::velocity_solved();}
  
  const Matrix_Frozen<FloatT, Array2D_Dense<FloatT> > &G() const {return base_t::G;}
  const Matrix_Frozen<FloatT, Array2D_Dense<FloatT> > &W() const {return base_t::W;}
  const Matrix_Frozen<FloatT, Array2D_Dense<FloatT> > &delta_r() const {return base_t::delta_r;}
  struct proxy_t : public solver_t {
    typedef typename solver_t
        ::template linear_solver_t<Matrix<FloatT, Array2D_Dense<FloatT> > >
        linear_solver_t;
  };
  Matrix<FloatT, Array2D_Dense<FloatT> > G_enu() const {
    return proxy_t::linear_solver_t::rotate_G(base_t::G, base_t::user_position.ecef2enu());
  }
  typename proxy_t::linear_solver_t linear_solver() const {
    return typename proxy_t::linear_solver_t(base_t::G, base_t::W, base_t::delta_r);
  }
  Matrix<FloatT, Array2D_Dense<FloatT> > C() const {
    return linear_solver().C();
  }
  Matrix<FloatT, Array2D_Dense<FloatT> > C_enu() const {
    return proxy_t::linear_solver_t::rotate_C(C(), base_t::user_position.ecef2enu());
  }
  Matrix<FloatT, Array2D_Dense<FloatT> > S() const {
    Matrix<FloatT, Array2D_Dense<FloatT> > res;
    linear_solver().least_square(res);
    return res;
  }
  Matrix<FloatT, Array2D_Dense<FloatT> > S_enu() const {
    return proxy_t::linear_solver_t::rotate_S(S(), base_t::user_position.ecef2enu());
  }
  Matrix<FloatT, Array2D_Dense<FloatT> > slope_HV() const {
    return linear_solver().slope_HV(S());
  }
  Matrix<FloatT, Array2D_Dense<FloatT> > slope_HV_enu() const {
    return linear_solver().slope_HV(S(), base_t::user_position.ecef2enu());
  }
  
  void fd(const typename base_t::detection_t **out) const {*out = &(base_t::FD);}
  void fde_min(
      const typename base_t::detection_t **out0, 
      const typename base_t::exclusion_t **out1) const {
    *out0 = *out1 = &(base_t::FDE_min);
  }
  void fde_2nd(
      const typename base_t::detection_t **out0, 
      const typename base_t::exclusion_t **out1) const {
    *out0 = *out1 = &(base_t::FDE_2nd);
  }
};


template <class FloatT>
struct GPS_Measurement {
  typedef std::map<int, std::map<int, FloatT> > items_t;
  items_t items;
  enum {
    L1_PSEUDORANGE,
    L1_DOPPLER,
    L1_CARRIER_PHASE,
    L1_RANGE_RATE,
    L1_PSEUDORANGE_SIGMA,
    L1_DOPPLER_SIGMA,
    L1_CARRIER_PHASE_SIGMA,
    L1_RANGE_RATE_SIGMA,
    L1_SIGNAL_STRENGTH_dBHz,
    L1_LOCK_SEC,
    L1_FREQUENCY,
    ITEMS_PREDEFINED,
  };
  void add(const int &prn, const int &key, const FloatT &value){
    items[prn][key] = value;
  }
};


template <class FloatT>
struct GPS_SolverOptions_Common {
  virtual GPS_Solver_GeneralOptions<FloatT> *cast_general() = 0;
  virtual const GPS_Solver_GeneralOptions<FloatT> *cast_general() const = 0;
};


template <class FloatT>
struct GPS_SolverOptions 
    : public GPS_SinglePositioning<FloatT>::options_t, 
    GPS_SolverOptions_Common<FloatT> {
  typedef typename GPS_SinglePositioning<FloatT>::options_t base_t;
  void exclude(const int &prn){base_t::exclude_prn.set(prn);}
  void include(const int &prn){base_t::exclude_prn.reset(prn);}
  std::vector<int> excluded() const {return base_t::exclude_prn.excluded();}
  GPS_Solver_GeneralOptions<FloatT> *cast_general(){return this;}
  const GPS_Solver_GeneralOptions<FloatT> *cast_general() const {return this;}
};


template <class FloatT>
struct SBAS_SolverOptions 
    : public SBAS_SinglePositioning<FloatT>::options_t,
    GPS_SolverOptions_Common<FloatT> {
  typedef typename SBAS_SinglePositioning<FloatT>::options_t base_t;
  void exclude(const int &prn){base_t::exclude_prn.set(prn);}
  void include(const int &prn){base_t::exclude_prn.reset(prn);}
  std::vector<int> excluded() const {return base_t::exclude_prn.excluded();}
  GPS_Solver_GeneralOptions<FloatT> *cast_general(){return this;}
  const GPS_Solver_GeneralOptions<FloatT> *cast_general() const {return this;}
};


template <class FloatT>
struct GPS_RangeCorrector
    : public GPS_Solver_Base<FloatT>::range_corrector_t {
  VALUE callback;
  GPS_RangeCorrector(const VALUE &callback_)
      : GPS_Solver_Base<FloatT>::range_corrector_t(),
      callback(callback_) {}
  bool is_available(const typename GPS_Solver_Base<FloatT>::gps_time_t &t) const {
    return false;
  }
  FloatT *calculate(
      const typename GPS_Solver_Base<FloatT>::gps_time_t &t, 
      const typename GPS_Solver_Base<FloatT>::pos_t &usr_pos, 
      const typename GPS_Solver_Base<FloatT>::enu_t &sat_rel_pos,
      FloatT &buf) const {
    return NULL;
  }
};


template <class FloatT>
struct GPS_Solver 
    : public GPS_Solver_RAIM_LSR<FloatT, 
        GPS_Solver_Base_Debug<FloatT, GPS_Solver_Base<FloatT> > > {
  typedef GPS_Solver_RAIM_LSR<FloatT, 
      GPS_Solver_Base_Debug<FloatT, GPS_Solver_Base<FloatT> > > super_t;
  typedef GPS_Solver_Base<FloatT> base_t;
  struct gps_t {
    GPS_SpaceNode<FloatT> space_node;
    GPS_SolverOptions<FloatT> options;
    GPS_SinglePositioning<FloatT> solver;
    gps_t() : space_node(), options(), solver(space_node) {}
  } gps;
  struct sbas_t {
    SBAS_SpaceNode<FloatT> space_node;
    SBAS_SolverOptions<FloatT> options;
    SBAS_SinglePositioning<FloatT> solver;
    sbas_t() : space_node(), options(), solver(space_node) {}
  } sbas;
  VALUE hooks;
  typedef std::vector<GPS_RangeCorrector<FloatT> > user_correctors_t;
  user_correctors_t user_correctors;

  static void mark(void *ptr){
    GPS_Solver<FloatT> *solver = (GPS_Solver<FloatT> *)ptr;
    rb_gc_mark(solver->hooks);
    for(typename user_correctors_t::const_iterator 
          it(solver->user_correctors.begin()), it_end(solver->user_correctors.end());
        it != it_end; ++it){
      rb_gc_mark(it->callback);
    }
  }

  GPS_Solver() : super_t(),
      gps(), sbas(),
      hooks(), user_correctors() {

    hooks = rb_hash_new();

    typename base_t::range_correction_t ionospheric, tropospheric;
    ionospheric.push_back(&sbas.solver.ionospheric_sbas);
    ionospheric.push_back(&gps.solver.ionospheric_klobuchar);
    tropospheric.push_back(&sbas.solver.tropospheric_sbas);
    tropospheric.push_back(&gps.solver.tropospheric_simplified);
    gps.solver.ionospheric_correction
        = sbas.solver.ionospheric_correction
        = ionospheric;
    gps.solver.tropospheric_correction
        = sbas.solver.tropospheric_correction
        = tropospheric;
  }
  GPS_SpaceNode<FloatT> &gps_space_node() {return gps.space_node;}
  GPS_SolverOptions<FloatT> &gps_options() {return gps.options;}
  SBAS_SpaceNode<FloatT> &sbas_space_node() {return sbas.space_node;}
  SBAS_SolverOptions<FloatT> &sbas_options() {return sbas.options;}
  const base_t &select_solver(
      const typename base_t::prn_t &prn) const {
    if(prn > 0 && prn <= 32){return gps.solver;}
    if(prn >= 120 && prn <= 158){return sbas.solver;}
    if(prn > 192 && prn <= 202){return gps.solver;}
    // call order: base_t::solve => this returned by select() 
    //     => relative_property() => select_solver()
    // For not supported satellite, call loop prevention is required.
    static const base_t dummy; 
    return dummy;
  }
  virtual typename base_t::relative_property_t relative_property(
      const typename base_t::prn_t &prn,
      const typename base_t::measurement_t::mapped_type &measurement,
      const typename base_t::float_t &receiver_error,
      const typename base_t::gps_time_t &time_arrival,
      const typename base_t::pos_t &usr_pos,
      const typename base_t::xyz_t &usr_vel) const;
  virtual typename base_t::xyz_t *satellite_position(
      const typename base_t::prn_t &prn,
      const typename base_t::gps_time_t &time,
      typename base_t::xyz_t &res) const;
  virtual bool update_position_solution(
      const typename base_t::geometric_matrices_t &geomat,
      typename base_t::user_pvt_t &res) const;
  GPS_User_PVT<FloatT> solve(
      const GPS_Measurement<FloatT> &measurement,
      const GPS_Time<FloatT> &receiver_time) const {
    const_cast<gps_t &>(gps).space_node.update_all_ephemeris(receiver_time);
    const_cast<gps_t &>(gps).solver.update_options(gps.options);
    const_cast<sbas_t &>(sbas).space_node.update_all_ephemeris(receiver_time);
    const_cast<sbas_t &>(sbas).solver.update_options(sbas.options);
    return super_t::solve().user_pvt(measurement.items, receiver_time);
  }
  typedef 
      std::map<int, std::vector<const typename base_t::range_corrector_t *> >
      range_correction_list_t;
  range_correction_list_t update_correction(
      const bool &update,
      const range_correction_list_t &list = range_correction_list_t()){
    range_correction_list_t res;
    typename base_t::range_correction_t *root[] = {
      &gps.solver.ionospheric_correction,
      &gps.solver.tropospheric_correction,
      &sbas.solver.ionospheric_correction,
      &sbas.solver.tropospheric_correction,
    };
    for(std::size_t i(0); i < sizeof(root) / sizeof(root[0]); ++i){
      do{
        if(!update){break;}
        typename range_correction_list_t::const_iterator it(list.find(i));
        if(it == list.end()){break;}

        // Remove user defined unused correctors
        for(typename base_t::range_correction_t::const_iterator
              it2(root[i]->begin()), it2_end(root[i]->end());
            it2 != it2_end; ++it2){
          for(typename user_correctors_t::const_iterator
                it3(user_correctors.begin()), it3_end(user_correctors.end());
              it3 != it3_end; ++it3){
            if(*it2 != &(*it3)){continue;}
            user_correctors.erase(it3);
          }
        }

        root[i]->clear();
        for(typename range_correction_list_t::mapped_type::const_iterator
              it2(it->second.begin()), it2_end(it->second.end());
            it2 != it2_end; ++it2){
          root[i]->push_back(*it2);
        }
      }while(false);
      for(typename base_t::range_correction_t::const_iterator
            it(root[i]->begin()), it_end(root[i]->end());
          it != it_end; ++it){
        res[i].push_back(*it);
      }
    }
    return res;
  }
  VALUE update_correction(const bool &update, const VALUE &hash);
};


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


template <class FloatT>
struct RINEX_Observation {};


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN VALUE
SWIG_ruby_failed(VALUE SWIGUNUSEDPARM(arg1), VALUE SWIGUNUSEDPARM(arg2))
{
  return Qnil;
} 


/*@SWIG:/usr/local/share/swig/4.0.2/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2LONG), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}


/*@SWIG:/usr/local/share/swig/4.0.2/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj); (void)type;
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2DBL), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


/*@SWIG:/usr/local/share/swig/4.0.2/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}

SWIGINTERN GPS_Time< double > *new_GPS_Time_Sl_double_Sg___SWIG_4(int const &week_,GPS_Time< double >::float_t const &seconds_,void *dummy){
    return &((new GPS_Time<double>(week_, seconds_))->canonicalize());
  }
SWIGINTERN void GPS_Time_Sl_double_Sg__to_a(GPS_Time< double > const *self,int *week,double *seconds){
    *week = self->week;
    *seconds = self->seconds;
  }
SWIGINTERN int GPS_Time_Sl_double_Sg____cmp__(GPS_Time< double > const *self,GPS_Time< double > const &t){
    return ((self->week < t.week) ? -1 
        : ((self->week > t.week) ? 1 
          : (self->seconds < t.seconds ? -1 
            : (self->seconds > t.seconds ? 1 : 0))));
  }

namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {
  template <class Type> struct traits_asptr;
  template <class Type> struct traits_asval;
  struct pointer_category;
  template <class Type, class Category> struct traits_as;
  template <class Type> struct traits_from;
  template <class Type> struct traits_from_ptr;
  template <class Type> struct noconst_traits;
  template <class Type> swig_type_info* type_info();
  template <class Type> const char* type_name();
  template <class Type> VALUE from(const Type& val);
}



namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static VALUE from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static VALUE from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static VALUE from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static VALUE from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline VALUE from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline VALUE from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(VALUE obj, Type **val) {
      Type *p = 0;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(VALUE obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(VALUE obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(VALUE obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(VALUE obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(VALUE obj) {
      Type v;
      int res = asval(obj, &v);
      if (!SWIG_IsOK(res)) {
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
        throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(VALUE obj) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(obj, &v);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
        throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(VALUE obj) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(obj, &v);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
        throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type>
  inline Type as(VALUE obj) {
    return traits_as< Type, typename traits< Type >::category >::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(VALUE obj) {
      int res = asval(obj, (Type *)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(VALUE obj) {
      int res = asptr(obj, (Type **)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(VALUE obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(VALUE obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static VALUE from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}

SWIGINTERN void GPS_SpaceNode_Sl_double_Sg__register_ephemeris__SWIG_0(GPS_SpaceNode< double > *self,int const &prn,GPS_Ephemeris< double > const &eph,int const &priority_delta=1){
    self->satellite(prn).register_ephemeris(eph, priority_delta);
  }
SWIGINTERN GPS_Ephemeris< double > GPS_SpaceNode_Sl_double_Sg__ephemeris(GPS_SpaceNode< double > const *self,int const &prn){
    return GPS_Ephemeris<double>(
        const_cast< GPS_SpaceNode<double> * >(self)->satellite(prn).ephemeris());
  }

SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    char *cstr = StringValuePtr(obj); 
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[size], cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}




SWIGINTERN int GPS_SpaceNode_Sl_double_Sg__read(GPS_SpaceNode< double > *self,char const *fname){
    std::fstream fin(fname, std::ios::in | std::ios::binary);
    typename RINEX_NAV_Reader<double>::space_node_list_t space_nodes = {self};
    space_nodes.qzss = self;
    return RINEX_NAV_Reader<double>::read_all(fin, space_nodes);
  }
SWIGINTERN void GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_alpha(GPS_Ionospheric_UTC_Parameters< double > *self,double const values[4]){
    for(int i(0); i < 4; ++i){
      self->alpha[i] = values[i];
    } 
  }
SWIGINTERN void GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_alpha(GPS_Ionospheric_UTC_Parameters< double > const *self,double values[4]){
    for(int i(0); i < 4; ++i){
      values[i] = self->alpha[i];
    }
  }
SWIGINTERN void GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_beta(GPS_Ionospheric_UTC_Parameters< double > *self,double const values[4]){
    for(int i(0); i < 4; ++i){
      self->beta[i] = values[i];
    }
  }
SWIGINTERN void GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_beta(GPS_Ionospheric_UTC_Parameters< double > const *self,double values[4]){
    for(int i(0); i < 4; ++i){
      values[i] = self->beta[i];
    }
  }
SWIGINTERN double GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_A1(GPS_Ionospheric_UTC_Parameters< double > *self,double const &v){
  return self->A1 = v;
}
SWIGINTERN double const &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_A1(GPS_Ionospheric_UTC_Parameters< double > const *self){
  return self->A1;
}
SWIGINTERN double GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_A0(GPS_Ionospheric_UTC_Parameters< double > *self,double const &v){
  return self->A0 = v;
}
SWIGINTERN double const &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_A0(GPS_Ionospheric_UTC_Parameters< double > const *self){
  return self->A0;
}
SWIGINTERN unsigned int GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_t_ot(GPS_Ionospheric_UTC_Parameters< double > *self,unsigned int const &v){
  return self->t_ot = v;
}
SWIGINTERN unsigned int const &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_t_ot(GPS_Ionospheric_UTC_Parameters< double > const *self){
  return self->t_ot;
}
SWIGINTERN unsigned int GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_WN_t(GPS_Ionospheric_UTC_Parameters< double > *self,unsigned int const &v){
  return self->WN_t = v;
}
SWIGINTERN unsigned int const &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_WN_t(GPS_Ionospheric_UTC_Parameters< double > const *self){
  return self->WN_t;
}
SWIGINTERN int GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_delta_t_LS(GPS_Ionospheric_UTC_Parameters< double > *self,int const &v){
  return self->delta_t_LS = v;
}
SWIGINTERN int const &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_delta_t_LS(GPS_Ionospheric_UTC_Parameters< double > const *self){
  return self->delta_t_LS;
}
SWIGINTERN unsigned int GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_WN_LSF(GPS_Ionospheric_UTC_Parameters< double > *self,unsigned int const &v){
  return self->WN_LSF = v;
}
SWIGINTERN unsigned int const &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_WN_LSF(GPS_Ionospheric_UTC_Parameters< double > const *self){
  return self->WN_LSF;
}
SWIGINTERN unsigned int GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_DN(GPS_Ionospheric_UTC_Parameters< double > *self,unsigned int const &v){
  return self->DN = v;
}
SWIGINTERN unsigned int const &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_DN(GPS_Ionospheric_UTC_Parameters< double > const *self){
  return self->DN;
}
SWIGINTERN int GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_delta_t_LSF(GPS_Ionospheric_UTC_Parameters< double > *self,int const &v){
  return self->delta_t_LSF = v;
}
SWIGINTERN int const &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_delta_t_LSF(GPS_Ionospheric_UTC_Parameters< double > const *self){
  return self->delta_t_LSF;
}
SWIGINTERN GPS_Ionospheric_UTC_Parameters< double > GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__parse(unsigned int const buf[10]){
    typedef typename GPS_SpaceNode<double>
        ::BroadcastedMessage<unsigned int, 30> parser_t;
    if((parser_t::subframe_id(buf) != 4) || (parser_t::sv_page_id(buf) != 56)){
      throw std::runtime_error("Not valid data");
    }
    typename GPS_SpaceNode<double>::Ionospheric_UTC_Parameters::raw_t raw;
    raw.update<2, 0>(buf);
    GPS_Ionospheric_UTC_Parameters<double> res;
    (typename GPS_SpaceNode<double>::Ionospheric_UTC_Parameters &)res = raw;
    return res;
  }
SWIGINTERN unsigned int GPS_Ephemeris_Sl_double_Sg__set_svid(GPS_Ephemeris< double > *self,unsigned int const &v){
  return self->svid = v;
}
SWIGINTERN unsigned int const &GPS_Ephemeris_Sl_double_Sg__get_svid(GPS_Ephemeris< double > const *self){
  return self->svid;
}
SWIGINTERN unsigned int GPS_Ephemeris_Sl_double_Sg__set_WN(GPS_Ephemeris< double > *self,unsigned int const &v){
  return self->WN = v;
}
SWIGINTERN unsigned int const &GPS_Ephemeris_Sl_double_Sg__get_WN(GPS_Ephemeris< double > const *self){
  return self->WN;
}
SWIGINTERN int GPS_Ephemeris_Sl_double_Sg__set_URA(GPS_Ephemeris< double > *self,int const &v){
  return self->URA = v;
}
SWIGINTERN int const &GPS_Ephemeris_Sl_double_Sg__get_URA(GPS_Ephemeris< double > const *self){
  return self->URA;
}
SWIGINTERN unsigned int GPS_Ephemeris_Sl_double_Sg__set_SV_health(GPS_Ephemeris< double > *self,unsigned int const &v){
  return self->SV_health = v;
}
SWIGINTERN unsigned int const &GPS_Ephemeris_Sl_double_Sg__get_SV_health(GPS_Ephemeris< double > const *self){
  return self->SV_health;
}
SWIGINTERN int GPS_Ephemeris_Sl_double_Sg__set_iodc(GPS_Ephemeris< double > *self,int const &v){
  return self->iodc = v;
}
SWIGINTERN int const &GPS_Ephemeris_Sl_double_Sg__get_iodc(GPS_Ephemeris< double > const *self){
  return self->iodc;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_t_GD(GPS_Ephemeris< double > *self,double const &v){
  return self->t_GD = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_t_GD(GPS_Ephemeris< double > const *self){
  return self->t_GD;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_t_oc(GPS_Ephemeris< double > *self,double const &v){
  return self->t_oc = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_t_oc(GPS_Ephemeris< double > const *self){
  return self->t_oc;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_a_f2(GPS_Ephemeris< double > *self,double const &v){
  return self->a_f2 = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_a_f2(GPS_Ephemeris< double > const *self){
  return self->a_f2;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_a_f1(GPS_Ephemeris< double > *self,double const &v){
  return self->a_f1 = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_a_f1(GPS_Ephemeris< double > const *self){
  return self->a_f1;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_a_f0(GPS_Ephemeris< double > *self,double const &v){
  return self->a_f0 = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_a_f0(GPS_Ephemeris< double > const *self){
  return self->a_f0;
}
SWIGINTERN int GPS_Ephemeris_Sl_double_Sg__set_iode(GPS_Ephemeris< double > *self,int const &v){
  return self->iode = v;
}
SWIGINTERN int const &GPS_Ephemeris_Sl_double_Sg__get_iode(GPS_Ephemeris< double > const *self){
  return self->iode;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_c_rs(GPS_Ephemeris< double > *self,double const &v){
  return self->c_rs = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_c_rs(GPS_Ephemeris< double > const *self){
  return self->c_rs;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_delta_n(GPS_Ephemeris< double > *self,double const &v){
  return self->delta_n = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_delta_n(GPS_Ephemeris< double > const *self){
  return self->delta_n;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_M0(GPS_Ephemeris< double > *self,double const &v){
  return self->M0 = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_M0(GPS_Ephemeris< double > const *self){
  return self->M0;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_c_uc(GPS_Ephemeris< double > *self,double const &v){
  return self->c_uc = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_c_uc(GPS_Ephemeris< double > const *self){
  return self->c_uc;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_e(GPS_Ephemeris< double > *self,double const &v){
  return self->e = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_e(GPS_Ephemeris< double > const *self){
  return self->e;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_c_us(GPS_Ephemeris< double > *self,double const &v){
  return self->c_us = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_c_us(GPS_Ephemeris< double > const *self){
  return self->c_us;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_sqrt_A(GPS_Ephemeris< double > *self,double const &v){
  return self->sqrt_A = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_sqrt_A(GPS_Ephemeris< double > const *self){
  return self->sqrt_A;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_t_oe(GPS_Ephemeris< double > *self,double const &v){
  return self->t_oe = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_t_oe(GPS_Ephemeris< double > const *self){
  return self->t_oe;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_fit_interval(GPS_Ephemeris< double > *self,double const &v){
  return self->fit_interval = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_fit_interval(GPS_Ephemeris< double > const *self){
  return self->fit_interval;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_c_ic(GPS_Ephemeris< double > *self,double const &v){
  return self->c_ic = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_c_ic(GPS_Ephemeris< double > const *self){
  return self->c_ic;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_Omega0(GPS_Ephemeris< double > *self,double const &v){
  return self->Omega0 = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_Omega0(GPS_Ephemeris< double > const *self){
  return self->Omega0;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_c_is(GPS_Ephemeris< double > *self,double const &v){
  return self->c_is = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_c_is(GPS_Ephemeris< double > const *self){
  return self->c_is;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_i0(GPS_Ephemeris< double > *self,double const &v){
  return self->i0 = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_i0(GPS_Ephemeris< double > const *self){
  return self->i0;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_c_rc(GPS_Ephemeris< double > *self,double const &v){
  return self->c_rc = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_c_rc(GPS_Ephemeris< double > const *self){
  return self->c_rc;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_omega(GPS_Ephemeris< double > *self,double const &v){
  return self->omega = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_omega(GPS_Ephemeris< double > const *self){
  return self->omega;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_dot_Omega0(GPS_Ephemeris< double > *self,double const &v){
  return self->dot_Omega0 = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_dot_Omega0(GPS_Ephemeris< double > const *self){
  return self->dot_Omega0;
}
SWIGINTERN double GPS_Ephemeris_Sl_double_Sg__set_dot_i0(GPS_Ephemeris< double > *self,double const &v){
  return self->dot_i0 = v;
}
SWIGINTERN double const &GPS_Ephemeris_Sl_double_Sg__get_dot_i0(GPS_Ephemeris< double > const *self){
  return self->dot_i0;
}
SWIGINTERN void GPS_Ephemeris_Sl_double_Sg__parse(GPS_Ephemeris< double > *self,unsigned int const buf[10],int *subframe_no,int *iodc_or_iode){
    typedef typename GPS_SpaceNode<double>::SatelliteProperties::Ephemeris eph_t;
    typename eph_t::raw_t raw;
    eph_t eph;
    *subframe_no = GPS_SpaceNode<double>
        ::BroadcastedMessage<unsigned int, 30>
        ::subframe_id(buf);
    *iodc_or_iode = -1; 
    switch(*subframe_no){
      case 1: 
        *iodc_or_iode = raw.update_subframe1<2, 0>(buf);
        eph = raw;
        self->WN = eph.WN;
        self->URA = eph.URA;
        self->SV_health = eph.SV_health;
        self->iodc = eph.iodc;
        self->t_GD = eph.t_GD;
        self->t_oc = eph.t_oc;
        self->a_f2 = eph.a_f2;
        self->a_f1 = eph.a_f1;
        self->a_f0 = eph.a_f0;
        break;
      case 2: 
        *iodc_or_iode = raw.update_subframe2<2, 0>(buf);
        eph = raw;
        self->iode = eph.iode;
        self->c_rs = eph.c_rs;
        self->delta_n = eph.delta_n;
        self->M0 = eph.M0;
        self->c_uc = eph.c_uc;
        self->e = eph.e;
        self->c_us = eph.c_us;
        self->sqrt_A = eph.sqrt_A;
        self->t_oe = eph.t_oe;
        self->fit_interval = eph_t::raw_t::fit_interval(raw.fit_interval_flag, self->iodc);
        break;
      case 3: 
        *iodc_or_iode = self->iode_subframe3 = raw.update_subframe3<2, 0>(buf);
        eph = raw;
        self->c_ic = eph.c_ic;
        self->Omega0 = eph.Omega0;
        self->c_is = eph.c_is;
        self->i0 = eph.i0;
        self->c_rc = eph.c_rc;
        self->omega = eph.omega;
        self->dot_Omega0 = eph.dot_Omega0;
        self->dot_i0 = eph.dot_i0;
        break;
    }
  }
SWIGINTERN void GPS_Ephemeris_Sl_double_Sg__constellation__SWIG_0(GPS_Ephemeris< double > const *self,System_XYZ< double,WGS84 > &position,System_XYZ< double,WGS84 > &velocity,GPS_Time< double > const &t,double const &pseudo_range=0,bool const &with_velocity=true){
    typename GPS_SpaceNode<double>::SatelliteProperties::constellation_t res(
        self->constellation(t, pseudo_range, with_velocity));
    position = res.position;
    velocity = res.velocity;
  }

    namespace swig {
      template <>
      bool check<GPS_Measurement<double> >(VALUE obj) {

        return RB_TYPE_P(obj, T_ARRAY) || RB_TYPE_P(obj, T_HASH);



      }
      template <>
      int asval(VALUE obj, GPS_Measurement<double> *val) {

        if(RB_TYPE_P(obj, T_ARRAY)){
          int i(0), i_end(RARRAY_LEN(obj));
          VALUE values;
          for(; i < i_end; ++i){
            values = RARRAY_AREF(obj, i);
            if((!RB_TYPE_P(values, T_ARRAY)) || (RARRAY_LEN(values) < 3)){
              break;
            }
            int prn, key;
            double v;
            if((!SWIG_IsOK(SWIG_AsVal_int (RARRAY_AREF(values, 0), &prn)))
                || (!SWIG_IsOK(SWIG_AsVal_int (RARRAY_AREF(values, 1), &key)))
                || (!SWIG_IsOK(swig::asval(RARRAY_AREF(values, 2), &v)))){
              break;
            }
            val->add(prn, key, v);
          }
          if(i < i_end){
            SWIG_exception(SWIG_TypeError, 
                std::string("Unexpected input [").append(std::to_string(i)).append("]: ")
                  .append(inspect_str(values)).c_str());
          }
          return SWIG_OK;
        }else if(RB_TYPE_P(obj, T_HASH)){
          struct arg_t {
            GPS_Measurement<double> *meas;
            int prn;
            static int iter2(VALUE v_k, VALUE v_v, VALUE v_arg){
              int k;
              double v;
              arg_t *arg(reinterpret_cast<arg_t *>(v_arg));
              if((!SWIG_IsOK(SWIG_AsVal_int (v_k, &k)))
                  || (!SWIG_IsOK(swig::asval(v_v, &v)))){
                SWIG_exception(SWIG_TypeError, 
                    std::string("Unexpected input @ PRN").append(std::to_string(arg->prn)).append(": [")
                      .append(inspect_str(v_k)).append(", ")
                      .append(inspect_str(v_v)).append("]").c_str());
              }
              arg->meas->add(arg->prn, k, v);
              return ST_CONTINUE;
            }
            static int iter1(VALUE v_prn, VALUE v_key_value, VALUE v_arg){
              arg_t *arg(reinterpret_cast<arg_t *>(v_arg));
              if((!RB_TYPE_P(v_key_value, T_HASH))
                  || (!SWIG_IsOK(SWIG_AsVal_int (v_prn, &(arg->prn))))){
                SWIG_exception(SWIG_TypeError, 
                    std::string("Unexpected input @ {")
                      .append(inspect_str(v_prn)).append(" => ")
                      .append(inspect_str(v_key_value)).append("}").c_str());
              }
              rb_hash_foreach(v_key_value,

                  // @see https://docs.ruby-lang.org/ja/latest/doc/news=2f2_7_0.html
                  (int (*)(ANYARGS))

                  arg_t::iter2, v_arg);
              return ST_CONTINUE;
            }
          } arg = {val};
          rb_hash_foreach(obj,

              (int (*)(ANYARGS))

              arg_t::iter1, reinterpret_cast<VALUE>(&arg));
          return SWIG_OK;
        }

        return SWIG_ERROR;
      }

      template <>
      VALUE from(const GPS_Measurement<double>::items_t::mapped_type &val) {
        VALUE per_sat(rb_hash_new());
        for(typename GPS_Measurement<double>::items_t::mapped_type::const_iterator 
              it(val.begin()), it_end(val.end());
            it != it_end; ++it){
          rb_hash_aset(per_sat, SWIG_From_int  (it->first), swig::from(it->second));
        }
        return per_sat;
      }

    }
  
SWIGINTERN void GPS_Measurement_Sl_double_Sg__each(GPS_Measurement< double > const *self){
    for(typename GPS_Measurement<double>::items_t::const_iterator
          it(self->items.begin()), it_end(self->items.end());
        it != it_end; ++it){
      for(typename GPS_Measurement<double>::items_t::mapped_type::const_iterator 
            it2(it->second.begin()), it2_end(it->second.end());
          it2 != it2_end; ++it2){

        VALUE values[] = {
          SWIG_From_int  (it->first), 
          SWIG_From_int  (it2->first),
          swig::from(it2->second)
        };
        yield_throw_if_error(3, values);

      }
    }
  }
SWIGINTERN VALUE GPS_Measurement_Sl_double_Sg__to_hash(GPS_Measurement< double > const *self){
    VALUE res(rb_hash_new());
    for(typename GPS_Measurement<double>::items_t::const_iterator
          it(self->items.begin()), it_end(self->items.end());
        it != it_end; ++it){
      rb_hash_aset(res, SWIG_From_int  (it->first), swig::from(it->second));
    }
    return res;
  }
SWIGINTERN double GPS_SolverOptions_Common_Sl_double_Sg__set_elevation_mask(GPS_SolverOptions_Common< double > *self,double const &v){
  return self->cast_general()->elevation_mask = v;
}
SWIGINTERN double const &GPS_SolverOptions_Common_Sl_double_Sg__get_elevation_mask(GPS_SolverOptions_Common< double > const *self){
  return self->cast_general()->elevation_mask;
}
SWIGINTERN double GPS_SolverOptions_Common_Sl_double_Sg__set_residual_mask(GPS_SolverOptions_Common< double > *self,double const &v){
  return self->cast_general()->residual_mask = v;
}
SWIGINTERN double const &GPS_SolverOptions_Common_Sl_double_Sg__get_residual_mask(GPS_SolverOptions_Common< double > const *self){
  return self->cast_general()->residual_mask;
}

    template <>
    GPS_Solver<double>::base_t::relative_property_t
        GPS_Solver<double>::relative_property(
          const GPS_Solver<double>::base_t::prn_t &prn,
          const GPS_Solver<double>::base_t::measurement_t::mapped_type &measurement,
          const GPS_Solver<double>::base_t::float_t &receiver_error,
          const GPS_Solver<double>::base_t::gps_time_t &time_arrival,
          const GPS_Solver<double>::base_t::pos_t &usr_pos,
          const GPS_Solver<double>::base_t::xyz_t &usr_vel) const {
      union {
        base_t::relative_property_t prop;
        double values[7];
      } res = {
          select_solver(prn).relative_property(
            prn, measurement, receiver_error, time_arrival,
            usr_pos, usr_vel)};

      do{
        static const VALUE key(ID2SYM(rb_intern("relative_property")));
        static const int prop_items(sizeof(res.values) / sizeof(res.values[0]));
        VALUE hook(rb_hash_lookup(hooks, key));
        if(NIL_P(hook)){break;}
        VALUE values[] = {
            SWIG_From_int  (prn), // prn
            rb_ary_new_from_args(prop_items, // relative_property
              swig::from(res.prop.weight),
              swig::from(res.prop.range_corrected),
              swig::from(res.prop.range_residual),
              swig::from(res.prop.rate_relative_neg),
              swig::from(res.prop.los_neg[0]),
              swig::from(res.prop.los_neg[1]),
              swig::from(res.prop.los_neg[2])),
            swig::from(measurement), // measurement => Hash
            swig::from(receiver_error), // receiver_error
            SWIG_NewPointerObj( // time_arrival
              new base_t::gps_time_t(time_arrival), SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_OWN),
            SWIG_NewPointerObj( // usr_pos.xyz
              new base_t::xyz_t(usr_pos.xyz), SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN),
            SWIG_NewPointerObj( // usr_vel
              new base_t::xyz_t(usr_vel), SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN)};
        VALUE res_hook(proc_call_throw_if_error(hook, sizeof(values) / sizeof(values[0]), values));
        if((!RB_TYPE_P(res_hook, T_ARRAY))
            || (RARRAY_LEN(res_hook) != prop_items)){
          throw std::runtime_error(
              std::string("[d * ").append(std::to_string(prop_items))
                .append("] is expected (d: " "double" "), however ")
                .append(inspect_str(res_hook)));
        }
        for(int i(0); i < prop_items; ++i){
          VALUE v(RARRAY_AREF(res_hook, i));
          if(!SWIG_IsOK(swig::asval(v, &res.values[i]))){
            throw std::runtime_error(
                std::string("double" " is exepcted, however ")
                  .append(inspect_str(v))
                  .append(" @ [").append(std::to_string(i)).append("]"));
          }
        }
      }while(false);

      return res.prop;
    }
    template <>
    bool GPS_Solver<double>::update_position_solution(
        const GPS_Solver<double>::base_t::geometric_matrices_t &geomat,
        GPS_Solver<double>::base_t::user_pvt_t &res) const {

      do{
        static const VALUE key(ID2SYM(rb_intern("update_position_solution")));
        VALUE hook(rb_hash_lookup(hooks, key));
        if(NIL_P(hook)){break;}
        base_t::geometric_matrices_t &geomat_(
            const_cast< base_t::geometric_matrices_t & >(geomat));
        VALUE values[] = {
            SWIG_NewPointerObj(&geomat_.G,
              SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0),
            SWIG_NewPointerObj(&geomat_.W,
              SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0),
            SWIG_NewPointerObj(&geomat_.delta_r,
              SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0),
            SWIG_NewPointerObj(&res,
              SWIGTYPE_p_GPS_User_PVTT_double_t, 0)};
        proc_call_throw_if_error(hook, sizeof(values) / sizeof(values[0]), values);
      }while(false);

      return super_t::update_position_solution(geomat, res);
    }
    template <>
    GPS_Solver<double>::base_t::xyz_t *GPS_Solver<double>::satellite_position(
        const GPS_Solver<double>::base_t::prn_t &prn,
        const GPS_Solver<double>::base_t::gps_time_t &time,
        GPS_Solver<double>::base_t::xyz_t &buf) const {
      GPS_Solver<double>::base_t::xyz_t *res(
          select_solver(prn).satellite_position(prn, time, buf));

      do{
        static const VALUE key(ID2SYM(rb_intern("satellite_position")));
        VALUE hook(rb_hash_lookup(hooks, key));
        if(NIL_P(hook)){break;}
        VALUE values[] = {
            SWIG_From_int  (prn), // prn
            SWIG_NewPointerObj( // time
              new base_t::gps_time_t(time), SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_OWN),
            (res // position (internally calculated)
              ? SWIG_NewPointerObj(res, SWIGTYPE_p_System_XYZT_double_WGS84_t, 0) 
              : Qnil)};
        VALUE res_hook(proc_call_throw_if_error(hook, sizeof(values) / sizeof(values[0]), values));
        if(NIL_P(res_hook)){ // unknown position
          res = NULL;
          break;
        }else if(RB_TYPE_P(res_hook, T_ARRAY) && (RARRAY_LEN(res_hook) == 3)){
          int i(0);
          for(; i < 3; ++i){
            VALUE v(RARRAY_AREF(res_hook, i));
            if(!SWIG_IsOK(swig::asval(v, &buf[i]))){break;}
          }
          if(i == 3){
            res = &buf;
            break;
          }
        }else if(SWIG_IsOK(SWIG_ConvertPtr(
            res_hook, (void **)&res, SWIGTYPE_p_System_XYZT_double_WGS84_t, 0))){
          res = &(buf = *res);
          break;
        }
        throw std::runtime_error(
            std::string("System_XYZ or [d * 3] is expected (d: " "double" "), however ")
              .append(inspect_str(res_hook)));
      }while(false);

      return res;
    }
  

    template <>
    bool GPS_RangeCorrector<double>::is_available(
        const typename GPS_Solver_Base<double>::gps_time_t &t) const {
      VALUE values[] = {
        SWIG_NewPointerObj(
            const_cast< GPS_Time<double> * >(&t), SWIGTYPE_p_GPS_TimeT_double_t, 0),
      };
      VALUE res(proc_call_throw_if_error(
          callback, sizeof(values) / sizeof(values[0]), values));
      return RTEST(res) ? true : false;
    }
    template <>
    double *GPS_RangeCorrector<double>::calculate(
        const typename GPS_Solver_Base<double>::gps_time_t &t,
        const typename GPS_Solver_Base<double>::pos_t &usr_pos, 
        const typename GPS_Solver_Base<double>::enu_t &sat_rel_pos,
        double &buf) const {
      VALUE values[] = {
        SWIG_NewPointerObj(
            const_cast< GPS_Time<double> * >(&t),
            SWIGTYPE_p_GPS_TimeT_double_t, 0),
        SWIG_NewPointerObj(
            (const_cast< System_XYZ<double,WGS84> * >(&usr_pos.xyz)),
            SWIGTYPE_p_System_XYZT_double_WGS84_t, 0),
        SWIG_NewPointerObj(
            (const_cast< System_ENU<double,WGS84> * >(&sat_rel_pos)),
            SWIGTYPE_p_System_ENUT_double_WGS84_t, 0),
      };
      VALUE res(proc_call_throw_if_error(
          callback, sizeof(values) / sizeof(values[0]), values));
      return SWIG_IsOK(swig::asval(res, &buf)) ? &buf : NULL;
    }
    template<>
    VALUE GPS_Solver<double>::update_correction(
        const bool &update, const VALUE &hash){
      typedef range_correction_list_t list_t;
      static const VALUE k_root[] = {
        ID2SYM(rb_intern("gps_ionospheric")),
        ID2SYM(rb_intern("gps_tropospheric")),
        ID2SYM(rb_intern("sbas_ionospheric")),
        ID2SYM(rb_intern("sbas_tropospheric")),
      };
      static const VALUE k_opt(ID2SYM(rb_intern("options")));
      static const VALUE k_f_10_7(ID2SYM(rb_intern("f_10_7")));
      static const VALUE k_known(ID2SYM(rb_intern("known")));
      struct {
        VALUE sym;
        list_t::mapped_type::value_type obj;
      } item[] = {
        {ID2SYM(rb_intern("no_correction")), &base_t::no_correction},
        {ID2SYM(rb_intern("klobuchar")), &this->gps.solver.ionospheric_klobuchar},
        {ID2SYM(rb_intern("ntcm_gl")), &this->gps.solver.ionospheric_ntcm_gl},
        {ID2SYM(rb_intern("hopfield")), &this->gps.solver.tropospheric_simplified},
        {ID2SYM(rb_intern("sbas_igp")), &this->sbas.solver.ionospheric_sbas},
        {ID2SYM(rb_intern("sbas_tropo")), &this->sbas.solver.tropospheric_sbas},
      };
      list_t input;
      if(update){
        if(!RB_TYPE_P(hash, T_HASH)){
          throw std::runtime_error(
              std::string("Hash is expected, however ").append(inspect_str(hash)));
        }
        for(std::size_t i(0); i < sizeof(k_root) / sizeof(k_root[0]); ++i){
          VALUE ary = rb_hash_lookup(hash, k_root[i]);
          if(NIL_P(ary)){continue;}
          if(!RB_TYPE_P(ary, T_ARRAY)){
            ary = rb_ary_new_from_values(1, &ary);
          }
          for(int j(0); j < RARRAY_LEN(ary); ++j){
            std::size_t k(0);
            VALUE v(rb_ary_entry(ary, j));
            for(; k < sizeof(item) / sizeof(item[0]); ++k){
              if(v == item[k].sym){break;}
            }
            if(k >= sizeof(item) / sizeof(item[0])){ // other than symbol
              user_correctors.push_back(GPS_RangeCorrector<double>(v));
              input[i].push_back(&user_correctors.back());
            }else{
              input[i].push_back(item[k].obj);
            }
          }
        }
        VALUE opt(rb_hash_lookup(hash, k_opt));
        if(RB_TYPE_P(opt, T_HASH)){
          swig::asval(rb_hash_lookup(opt, k_f_10_7), // ntcm_gl
              &this->gps.solver.ionospheric_ntcm_gl.f_10_7);
        }
      }
      list_t output(update_correction(update, input));
      VALUE res = rb_hash_new();
      for(list_t::const_iterator it(output.begin()), it_end(output.end());
          it != it_end; ++it){
        VALUE k;
        if((it->first < 0) || (it->first >= (int)(sizeof(k_root) / sizeof(k_root[0])))){
          k = SWIG_From_int  (it->first);
        }else{
          k = k_root[it->first];
        }
        VALUE v = rb_ary_new();
        for(list_t::mapped_type::const_iterator
              it2(it->second.begin()), it2_end(it->second.end());
            it2 != it2_end; ++it2){
          std::size_t i(0);
          for(; i < sizeof(item) / sizeof(item[0]); ++i){
            if(*it2 == item[i].obj){break;}
          }
          if(i >= sizeof(item) / sizeof(item[0])){ // other than built-in corrector
            rb_ary_push(v, 
                reinterpret_cast<const GPS_RangeCorrector<double> *>(*it2)->callback);
          }else{
            rb_ary_push(v, item[i].sym);
          }
        }
        rb_hash_aset(res, k, v);
      }
      { // common options
        VALUE opt = rb_hash_new();
        rb_hash_aset(res, k_opt, opt);
        rb_hash_aset(opt, k_f_10_7, // ntcm_gl 
            swig::from(this->gps.solver.ionospheric_ntcm_gl.f_10_7));
      }
      { // known models
        VALUE ary = rb_ary_new_capa((int)(sizeof(item) / sizeof(item[0])));
        for(std::size_t i(0); i < sizeof(item) / sizeof(item[0]); ++i){
          rb_ary_push(ary, item[i].sym);
        }
        rb_hash_aset(res, k_known, ary);
      }
      return res;
    }
  
SWIGINTERN VALUE GPS_Solver_Sl_double_Sg__get_correction(GPS_Solver< double > const *self){
    return const_cast<GPS_Solver<double> *>(self)->update_correction(false, Qnil);
  }
SWIGINTERN VALUE GPS_Solver_Sl_double_Sg__set_correction(GPS_Solver< double > *self,VALUE hash){
    return self->update_correction(true, hash);
  }
SWIGINTERN unsigned int SBAS_Ephemeris_Sl_double_Sg__set_svid(SBAS_Ephemeris< double > *self,unsigned int const &v){
  return self->svid = v;
}
SWIGINTERN unsigned int const &SBAS_Ephemeris_Sl_double_Sg__get_svid(SBAS_Ephemeris< double > const *self){
  return self->svid;
}
SWIGINTERN unsigned int SBAS_Ephemeris_Sl_double_Sg__set_WN(SBAS_Ephemeris< double > *self,unsigned int const &v){
  return self->WN = v;
}
SWIGINTERN unsigned int const &SBAS_Ephemeris_Sl_double_Sg__get_WN(SBAS_Ephemeris< double > const *self){
  return self->WN;
}
SWIGINTERN double SBAS_Ephemeris_Sl_double_Sg__set_t_0(SBAS_Ephemeris< double > *self,double const &v){
  return self->t_0 = v;
}
SWIGINTERN double const &SBAS_Ephemeris_Sl_double_Sg__get_t_0(SBAS_Ephemeris< double > const *self){
  return self->t_0;
}
SWIGINTERN int SBAS_Ephemeris_Sl_double_Sg__set_URA(SBAS_Ephemeris< double > *self,int const &v){
  return self->URA = v;
}
SWIGINTERN int const &SBAS_Ephemeris_Sl_double_Sg__get_URA(SBAS_Ephemeris< double > const *self){
  return self->URA;
}
SWIGINTERN double SBAS_Ephemeris_Sl_double_Sg__set_x(SBAS_Ephemeris< double > *self,double const &v){
  return self->x = v;
}
SWIGINTERN double const &SBAS_Ephemeris_Sl_double_Sg__get_x(SBAS_Ephemeris< double > const *self){
  return self->x;
}
SWIGINTERN double SBAS_Ephemeris_Sl_double_Sg__set_y(SBAS_Ephemeris< double > *self,double const &v){
  return self->y = v;
}
SWIGINTERN double const &SBAS_Ephemeris_Sl_double_Sg__get_y(SBAS_Ephemeris< double > const *self){
  return self->y;
}
SWIGINTERN double SBAS_Ephemeris_Sl_double_Sg__set_z(SBAS_Ephemeris< double > *self,double const &v){
  return self->z = v;
}
SWIGINTERN double const &SBAS_Ephemeris_Sl_double_Sg__get_z(SBAS_Ephemeris< double > const *self){
  return self->z;
}
SWIGINTERN double SBAS_Ephemeris_Sl_double_Sg__set_dx(SBAS_Ephemeris< double > *self,double const &v){
  return self->dx = v;
}
SWIGINTERN double const &SBAS_Ephemeris_Sl_double_Sg__get_dx(SBAS_Ephemeris< double > const *self){
  return self->dx;
}
SWIGINTERN double SBAS_Ephemeris_Sl_double_Sg__set_dy(SBAS_Ephemeris< double > *self,double const &v){
  return self->dy = v;
}
SWIGINTERN double const &SBAS_Ephemeris_Sl_double_Sg__get_dy(SBAS_Ephemeris< double > const *self){
  return self->dy;
}
SWIGINTERN double SBAS_Ephemeris_Sl_double_Sg__set_dz(SBAS_Ephemeris< double > *self,double const &v){
  return self->dz = v;
}
SWIGINTERN double const &SBAS_Ephemeris_Sl_double_Sg__get_dz(SBAS_Ephemeris< double > const *self){
  return self->dz;
}
SWIGINTERN double SBAS_Ephemeris_Sl_double_Sg__set_ddx(SBAS_Ephemeris< double > *self,double const &v){
  return self->ddx = v;
}
SWIGINTERN double const &SBAS_Ephemeris_Sl_double_Sg__get_ddx(SBAS_Ephemeris< double > const *self){
  return self->ddx;
}
SWIGINTERN double SBAS_Ephemeris_Sl_double_Sg__set_ddy(SBAS_Ephemeris< double > *self,double const &v){
  return self->ddy = v;
}
SWIGINTERN double const &SBAS_Ephemeris_Sl_double_Sg__get_ddy(SBAS_Ephemeris< double > const *self){
  return self->ddy;
}
SWIGINTERN double SBAS_Ephemeris_Sl_double_Sg__set_ddz(SBAS_Ephemeris< double > *self,double const &v){
  return self->ddz = v;
}
SWIGINTERN double const &SBAS_Ephemeris_Sl_double_Sg__get_ddz(SBAS_Ephemeris< double > const *self){
  return self->ddz;
}
SWIGINTERN double SBAS_Ephemeris_Sl_double_Sg__set_a_Gf0(SBAS_Ephemeris< double > *self,double const &v){
  return self->a_Gf0 = v;
}
SWIGINTERN double const &SBAS_Ephemeris_Sl_double_Sg__get_a_Gf0(SBAS_Ephemeris< double > const *self){
  return self->a_Gf0;
}
SWIGINTERN double SBAS_Ephemeris_Sl_double_Sg__set_a_Gf1(SBAS_Ephemeris< double > *self,double const &v){
  return self->a_Gf1 = v;
}
SWIGINTERN double const &SBAS_Ephemeris_Sl_double_Sg__get_a_Gf1(SBAS_Ephemeris< double > const *self){
  return self->a_Gf1;
}
SWIGINTERN void SBAS_Ephemeris_Sl_double_Sg__constellation__SWIG_0(SBAS_Ephemeris< double > const *self,System_XYZ< double,WGS84 > &position,System_XYZ< double,WGS84 > &velocity,GPS_Time< double > const &t,double const &pseudo_range=0,bool const &with_velocity=true){
    typename SBAS_SpaceNode<double>::SatelliteProperties::constellation_t res(
        self->constellation(t, pseudo_range, with_velocity));
    position = res.position;
    velocity = res.velocity;
  }
SWIGINTERN void SBAS_SpaceNode_Sl_double_Sg__register_ephemeris__SWIG_0(SBAS_SpaceNode< double > *self,int const &prn,SBAS_Ephemeris< double > const &eph,int const &priority_delta=1){
    self->satellite(prn).register_ephemeris(eph, priority_delta);
  }
SWIGINTERN SBAS_Ephemeris< double > SBAS_SpaceNode_Sl_double_Sg__ephemeris(SBAS_SpaceNode< double > const *self,int const &prn){
    return SBAS_Ephemeris<double>(
        const_cast< SBAS_SpaceNode<double> * >(self)->satellite(prn).ephemeris());
  }
SWIGINTERN int SBAS_SpaceNode_Sl_double_Sg__read(SBAS_SpaceNode< double > *self,char const *fname){
    std::fstream fin(fname, std::ios::in | std::ios::binary);
    RINEX_NAV_Reader<double>::space_node_list_t space_nodes = {NULL};
    space_nodes.sbas = self;
    return RINEX_NAV_Reader<double>::read_all(fin, space_nodes);
  }
SWIGINTERN int SBAS_SpaceNode_Sl_double_Sg__decode_message__SWIG_2(SBAS_SpaceNode< double > *self,unsigned int const buf[8],int const &prn,GPS_Time< double > const &t_reception,bool const &LNAV_VNAV_LP_LPV_approach=false){
    return static_cast<int>(
        self->decode_message(buf, prn, t_reception, LNAV_VNAV_LP_LPV_approach));
  }
SWIGINTERN std::string SBAS_SpaceNode_Sl_double_Sg__ionospheric_grid_points(SBAS_SpaceNode< double > const *self,int const &prn){
    std::ostringstream ss;
    ss << const_cast< SBAS_SpaceNode<double> * >(self)->satellite(prn)
      .ionospheric_grid_points();
    return ss.str();
  }

SWIGINTERNINLINE VALUE
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN void RINEX_Observation_Sl_double_Sg__read(char const *fname){
    std::fstream fin(fname, std::ios::in | std::ios::binary);
    struct reader_t : public RINEX_OBS_Reader<double> {
      typedef RINEX_OBS_Reader<double> super_t;
      VALUE header;
      VALUE obs_types;
      reader_t(std::istream &in) : RINEX_OBS_Reader<double>(in) {

        { // header
          header = rb_hash_new();
          typedef typename super_t::header_t header_t;
          for(typename header_t::const_iterator
              it(super_t::header().begin()), it_end(super_t::header().end());
              it != it_end; ++it){
            VALUE types_per_key(rb_ary_new_capa(it->second.size()));
            for(typename header_t::mapped_type::const_iterator
                it2(it->second.begin()), it2_end(it->second.end());
                it2 != it2_end; ++it2){
              rb_ary_push(types_per_key, rb_str_new_cstr(it2->c_str()));
            }
            rb_hash_aset(header, rb_str_new_cstr(it->first.c_str()), types_per_key);
          }
        }
        { // observation types
          obs_types = rb_hash_new();
          typedef typename super_t::obs_types_t types_t;
          for(typename types_t::const_iterator
              it(super_t::obs_types.begin()), it_end(super_t::obs_types.end());
              it != it_end; ++it){
            VALUE types_per_sys(rb_ary_new_capa(it->second.size()));
            for(typename types_t::mapped_type::const_iterator
                it2(it->second.begin()), it2_end(it->second.end());
                it2 != it2_end; ++it2){
              rb_ary_push(types_per_sys, rb_str_new_cstr(it2->c_str()));
            }
            rb_hash_aset(obs_types, SWIG_From_char  (it->first), types_per_sys);
          }
        }

      }
    } reader(fin);
    while(reader.has_next()){
      typedef typename reader_t::observation_t obs_t;
      obs_t obs(reader.next());

      VALUE res(rb_hash_new());
      static const VALUE
          sym_header(ID2SYM(rb_intern("header"))),
          sym_t(ID2SYM(rb_intern("time"))),
          sym_clke(ID2SYM(rb_intern("rcv_clock_error"))),
          sym_meas(ID2SYM(rb_intern("meas"))),
          sym_meas_types(ID2SYM(rb_intern("meas_types")));
      rb_hash_aset(res, sym_header, reader.header);
      rb_hash_aset(res, sym_t, 
          SWIG_NewPointerObj(
            new GPS_Time<double>(obs.t_epoch), 
            SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_OWN));
      rb_hash_aset(res, sym_clke, swig::from(obs.receiver_clock_error));
      VALUE meas(rb_hash_new());
      for(typename obs_t::per_satellite_t::const_iterator 
          it(obs.per_satellite.begin()), it_end(obs.per_satellite.end());
          it != it_end; ++it){
        VALUE meas_per_sat(rb_ary_new_capa(it->second.size()));
        int i(0);
        for(typename obs_t::per_satellite_t::mapped_type::const_iterator 
            it2(it->second.begin()), it2_end(it->second.end());
            it2 != it2_end; ++it2, ++i){
          if(!it2->valid){continue;}
          rb_ary_store(meas_per_sat, i,
              rb_ary_new_from_args(3,
                swig::from(it2->value),
                SWIG_From_int  (it2->lli),
                SWIG_From_int  (it2->ss)));
        }
        int offset;
        char sys_c(reader_t::serial2sys(it->first, offset));
        rb_hash_aset(meas, 
            rb_ary_new_from_args(2,
              SWIG_From_char  (sys_c),
              SWIG_From_int  (offset)),
            meas_per_sat);
      }
      rb_hash_aset(res, sym_meas, meas);
      rb_hash_aset(res, sym_meas_types, reader.obs_types);
      yield_throw_if_error(1, &res);

    }
  }
static swig_class SwigClassGC_VALUE;

/*
  Document-method: GPS_PVT::GPS::GC_VALUE.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_inspect(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::GC_VALUE.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_to_s(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-class: GPS_PVT::GPS::Time

  Proxy of C++ GPS_PVT::GPS::Time class


*/
static swig_class SwigClassTime;

/*
  Document-method: GPS_PVT::GPS::Time.seconds_day

  call-seq:
    seconds_day -> unsigned int const

Get value of attribute.

*/
/*
  Document-method: GPS_PVT::GPS::Time.seconds_day

  call-seq:
    seconds_day -> unsigned int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::Time.seconds_week

  call-seq:
    seconds_week -> unsigned int const

Get value of attribute.

*/
/*
  Document-method: GPS_PVT::GPS::Time.seconds_week

  call-seq:
    seconds_week -> unsigned int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::Time.days_of_month

  call-seq:
    days_of_month -> int const []

Get value of attribute.

*/
/*
  Document-method: GPS_PVT::GPS::Time.Time_days_of_month

  call-seq:
    Time_days_of_month -> int const []

Get value of attribute.

*/
SWIGINTERN VALUE
_wrap_Time_days_of_month_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(GPS_Time< double >::days_of_month), SWIGTYPE_p_int,  0 );
  return _val;
}


/*
  Document-method: GPS_PVT::GPS::Time.is_leap_year

  call-seq:
    is_leap_year(int const & year) -> bool

A class method.

*/
SWIGINTERN VALUE
_wrap_Time_is_leap_year(int argc, VALUE *argv, VALUE self) {
  int *arg1 = 0 ;
  int temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","GPS_Time<(double)>::is_leap_year", 1, argv[0] ));
  } 
  temp1 = static_cast< int >(val1);
  arg1 = &temp1;
  {
    try {
      result = (bool)GPS_Time< double >::SWIGTEMPLATEDISAMBIGUATOR is_leap_year((int const &)*arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.leap_year_prop

  call-seq:
    leap_year_prop(int const & this_year, bool const & skip_init_leap_year_check=False) -> GPS_Time< double >::leap_year_prop_res_t
    leap_year_prop(int const & this_year) -> GPS_Time< double >::leap_year_prop_res_t

A class method.

*/
SWIGINTERN VALUE
_wrap_Time_leap_year_prop__SWIG_0(int argc, VALUE *argv, VALUE self) {
  int *arg1 = 0 ;
  bool *arg2 = 0 ;
  int temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  GPS_Time< double >::leap_year_prop_res_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","GPS_Time<(double)>::leap_year_prop", 1, argv[0] ));
  } 
  temp1 = static_cast< int >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","GPS_Time<(double)>::leap_year_prop", 2, argv[1] ));
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      result = GPS_Time< double >::SWIGTEMPLATEDISAMBIGUATOR leap_year_prop((int const &)*arg1,(bool const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new GPS_Time< double >::leap_year_prop_res_t(static_cast< const GPS_Time< double >::leap_year_prop_res_t& >(result))), SWIGTYPE_p_GPS_TimeT_double_t__leap_year_prop_res_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Time_leap_year_prop__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int *arg1 = 0 ;
  int temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  GPS_Time< double >::leap_year_prop_res_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","GPS_Time<(double)>::leap_year_prop", 1, argv[0] ));
  } 
  temp1 = static_cast< int >(val1);
  arg1 = &temp1;
  {
    try {
      result = GPS_Time< double >::SWIGTEMPLATEDISAMBIGUATOR leap_year_prop((int const &)*arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new GPS_Time< double >::leap_year_prop_res_t(static_cast< const GPS_Time< double >::leap_year_prop_res_t& >(result))), SWIGTYPE_p_GPS_TimeT_double_t__leap_year_prop_res_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Time_leap_year_prop(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Time_leap_year_prop__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Time_leap_year_prop__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Time.leap_year_prop", 
    "    GPS_Time< double >::leap_year_prop_res_t Time.leap_year_prop(int const &this_year, bool const &skip_init_leap_year_check)\n"
    "    GPS_Time< double >::leap_year_prop_res_t Time.leap_year_prop(int const &this_year)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.week

  call-seq:
    week -> int

Get value of attribute.

*/
/*
  Document-method: GPS_PVT::GPS::Time.week=

  call-seq:
    week=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_Time_week_set(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > *","week", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","week", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->week = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Time_week_get(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > *","week", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  result = (int) ((arg1)->week);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.seconds

  call-seq:
    seconds -> GPS_Time< double >::float_t

Get value of attribute.

*/
/*
  Document-method: GPS_PVT::GPS::Time.seconds=

  call-seq:
    seconds=(x) -> GPS_Time< double >::float_t

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_Time_seconds_set(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  GPS_Time< double >::float_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > *","seconds", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "GPS_Time< double >::float_t","seconds", 2, argv[0] ));
  } 
  arg2 = static_cast< GPS_Time< double >::float_t >(val2);
  if (arg1) (arg1)->seconds = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Time_seconds_get(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_Time< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > *","seconds", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  result = (GPS_Time< double >::float_t) ((arg1)->seconds);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.new

  call-seq:
    Time.new
    Time.new(Time t)
    Time.new(std::tm const & t, GPS_Time< double >::float_t const & leap_seconds=0)
    Time.new(std::tm const & t)
    Time.new(int const & week_, GPS_Time< double >::float_t const & seconds_)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Time__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (GPS_Time< double > *)new GPS_Time< double >();
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Time__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  GPS_Time< double > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const &","GPS_Time<(double)>", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","GPS_Time<(double)>", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  {
    try {
      result = (GPS_Time< double > *)new GPS_Time< double >((GPS_Time< double > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Time__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::tm *arg1 = 0 ;
  GPS_Time< double >::float_t *arg2 = 0 ;
  std::tm temp1 = {
    0
  } ;
  GPS_Time< double >::float_t temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  GPS_Time< double > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    arg1 = &temp1;
    int *dst[] = {
      &(temp1.tm_year),
      &(temp1.tm_mon),
      &(temp1.tm_mday),
      &(temp1.tm_hour),
      &(temp1.tm_min),
      &(temp1.tm_sec),
    };
    int i_max(sizeof(dst) / sizeof(dst[0]));
    if(i_max > RARRAY_LEN(argv[0])){
      i_max = RARRAY_LEN(argv[0]);
    }
    for(int i(0); i < i_max; ++i){
      VALUE obj = rb_ary_entry(argv[0], i);
      int v;
      if(SWIG_IsOK(SWIG_AsVal_int (obj, &v))){
        if(dst[i] == &(temp1.tm_year)){
          *dst[i] = v - 1900;
        }else if(dst[i] == &(temp1.tm_mon)){
          *dst[i] = v - 1;
        }else{
          *dst[i] = v;
        }
      }else{
        SWIG_exception(SWIG_TypeError, "int is expected");
      }
    }
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "GPS_Time< double >::float_t","GPS_Time<(double)>", 2, argv[1] ));
  } 
  temp2 = static_cast< GPS_Time< double >::float_t >(val2);
  arg2 = &temp2;
  {
    try {
      result = (GPS_Time< double > *)new GPS_Time< double >((std::tm const &)*arg1,(GPS_Time< double >::float_t const &)*arg2);
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Time__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::tm *arg1 = 0 ;
  std::tm temp1 = {
    0
  } ;
  GPS_Time< double > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    arg1 = &temp1;
    int *dst[] = {
      &(temp1.tm_year),
      &(temp1.tm_mon),
      &(temp1.tm_mday),
      &(temp1.tm_hour),
      &(temp1.tm_min),
      &(temp1.tm_sec),
    };
    int i_max(sizeof(dst) / sizeof(dst[0]));
    if(i_max > RARRAY_LEN(argv[0])){
      i_max = RARRAY_LEN(argv[0]);
    }
    for(int i(0); i < i_max; ++i){
      VALUE obj = rb_ary_entry(argv[0], i);
      int v;
      if(SWIG_IsOK(SWIG_AsVal_int (obj, &v))){
        if(dst[i] == &(temp1.tm_year)){
          *dst[i] = v - 1900;
        }else if(dst[i] == &(temp1.tm_mon)){
          *dst[i] = v - 1;
        }else{
          *dst[i] = v;
        }
      }else{
        SWIG_exception(SWIG_TypeError, "int is expected");
      }
    }
  }
  {
    try {
      result = (GPS_Time< double > *)new GPS_Time< double >((std::tm const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.now

  call-seq:
    now(GPS_Time< double >::float_t const & leap_seconds=0) -> Time
    now -> Time

A class method.

*/
SWIGINTERN VALUE
_wrap_Time_now__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double >::float_t *arg1 = 0 ;
  GPS_Time< double >::float_t temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  GPS_Time< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "GPS_Time< double >::float_t","GPS_Time<(double)>::now", 1, argv[0] ));
  } 
  temp1 = static_cast< GPS_Time< double >::float_t >(val1);
  arg1 = &temp1;
  {
    try {
      result = GPS_Time< double >::SWIGTEMPLATEDISAMBIGUATOR now((double const &)*arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new GPS_Time< double >(static_cast< const GPS_Time< double >& >(result))), SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Time_now__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = GPS_Time< double >::SWIGTEMPLATEDISAMBIGUATOR now();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new GPS_Time< double >(static_cast< const GPS_Time< double >& >(result))), SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Time_now(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_Time_now__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Time_now__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Time.now", 
    "    GPS_Time< double > Time.now(GPS_Time< double >::float_t const &leap_seconds)\n"
    "    GPS_Time< double > Time.now()\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.serialize

  call-seq:
    serialize -> GPS_Time< double >::float_t

An instance method.

*/
SWIGINTERN VALUE
_wrap_Time_serialize(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_Time< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","serialize", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  {
    try {
      result = (GPS_Time< double >::float_t)((GPS_Time< double > const *)arg1)->serialize();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.+

  call-seq:
    +(sec) -> Time

Add operator.
*/
SWIGINTERN VALUE
_wrap_Time___add__(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  GPS_Time< double >::float_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_Time< double >::float_t temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  GPS_Time< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "GPS_Time< double >::float_t","operator +", 2, argv[0] ));
  } 
  temp2 = static_cast< GPS_Time< double >::float_t >(val2);
  arg2 = &temp2;
  {
    try {
      result = ((GPS_Time< double > const *)arg1)->operator +((GPS_Time< double >::float_t const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new GPS_Time< double >(static_cast< const GPS_Time< double >& >(result))), SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.-

  call-seq:
    -(sec) -> Time
    -(t) -> GPS_Time< double >::float_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Time___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  GPS_Time< double >::float_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_Time< double >::float_t temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  GPS_Time< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "GPS_Time< double >::float_t","operator -", 2, argv[0] ));
  } 
  temp2 = static_cast< GPS_Time< double >::float_t >(val2);
  arg2 = &temp2;
  {
    try {
      result = ((GPS_Time< double > const *)arg1)->operator -((GPS_Time< double >::float_t const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new GPS_Time< double >(static_cast< const GPS_Time< double >& >(result))), SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Time___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  GPS_Time< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  GPS_Time< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_Time< double > const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_Time< double > * >(argp2);
  {
    try {
      result = (GPS_Time< double >::float_t)((GPS_Time< double > const *)arg1)->operator -((GPS_Time< double > const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Time___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Time___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Time___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Time.__sub__", 
    "    GPS_Time< double > Time.__sub__(GPS_Time< double >::float_t const &sec)\n"
    "    GPS_Time< double >::float_t Time.__sub__(GPS_Time< double > const &t)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.<

  call-seq:
    <(t) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_Time___lt__(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  GPS_Time< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_Time< double > const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_Time< double > * >(argp2);
  {
    try {
      result = (bool)((GPS_Time< double > const *)arg1)->operator <((GPS_Time< double > const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.>

  call-seq:
    >(t) -> bool

Higher than comparison operator.
*/
SWIGINTERN VALUE
_wrap_Time___gt__(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  GPS_Time< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","operator >", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_Time< double > const &","operator >", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","operator >", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_Time< double > * >(argp2);
  {
    try {
      result = (bool)((GPS_Time< double > const *)arg1)->operator >((GPS_Time< double > const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.==

  call-seq:
    ==(t) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Time___eq__(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  GPS_Time< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_Time< double > const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_Time< double > * >(argp2);
  {
    try {
      result = (bool)((GPS_Time< double > const *)arg1)->operator ==((GPS_Time< double > const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.<=

  call-seq:
    <=(t) -> bool

Lower or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_Time___le__(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  GPS_Time< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","operator <=", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_Time< double > const &","operator <=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","operator <=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_Time< double > * >(argp2);
  {
    try {
      result = (bool)((GPS_Time< double > const *)arg1)->operator <=((GPS_Time< double > const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.>=

  call-seq:
    >=(t) -> bool

Higher or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_Time___ge__(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  GPS_Time< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","operator >=", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_Time< double > const &","operator >=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","operator >=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_Time< double > * >(argp2);
  {
    try {
      result = (bool)((GPS_Time< double > const *)arg1)->operator >=((GPS_Time< double > const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.c_tm

  call-seq:
    c_tm(GPS_Time< double >::float_t const & leap_seconds=0) -> std::tm
    c_tm -> std::tm

An instance method.

*/
SWIGINTERN VALUE
_wrap_Time_c_tm__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  GPS_Time< double >::float_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_Time< double >::float_t temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  std::tm result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","c_tm", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "GPS_Time< double >::float_t","c_tm", 2, argv[0] ));
  } 
  temp2 = static_cast< GPS_Time< double >::float_t >(val2);
  arg2 = &temp2;
  {
    try {
      result = ((GPS_Time< double > const *)arg1)->c_tm((GPS_Time< double >::float_t const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  ((&result)->tm_year + 1900));
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  ((&result)->tm_mon + 1));
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  ((&result)->tm_mday));
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  ((&result)->tm_hour));
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  ((&result)->tm_min));
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  ((&result)->tm_sec));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Time_c_tm__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::tm result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","c_tm", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  {
    try {
      result = ((GPS_Time< double > const *)arg1)->c_tm();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  ((&result)->tm_year + 1900));
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  ((&result)->tm_mon + 1));
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  ((&result)->tm_mday));
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  ((&result)->tm_hour));
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  ((&result)->tm_min));
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  ((&result)->tm_sec));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Time_c_tm(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Time_c_tm__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Time_c_tm__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Time.c_tm", 
    "    std::tm Time.c_tm(GPS_Time< double >::float_t const &leap_seconds)\n"
    "    std::tm Time.c_tm()\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.year

  call-seq:
    year(GPS_Time< double >::float_t const & leap_seconds=0) -> GPS_Time< double >::float_t
    year -> GPS_Time< double >::float_t

An instance method.

*/
SWIGINTERN VALUE
_wrap_Time_year__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  GPS_Time< double >::float_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_Time< double >::float_t temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  GPS_Time< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","year", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "GPS_Time< double >::float_t","year", 2, argv[0] ));
  } 
  temp2 = static_cast< GPS_Time< double >::float_t >(val2);
  arg2 = &temp2;
  {
    try {
      result = (GPS_Time< double >::float_t)((GPS_Time< double > const *)arg1)->year((GPS_Time< double >::float_t const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Time_year__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_Time< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","year", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  {
    try {
      result = (GPS_Time< double >::float_t)((GPS_Time< double > const *)arg1)->year();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Time_year(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Time_year__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Time_year__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Time.year", 
    "    GPS_Time< double >::float_t Time.year(GPS_Time< double >::float_t const &leap_seconds)\n"
    "    GPS_Time< double >::float_t Time.year()\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.interval

  call-seq:
    interval(unsigned int const & t_week, GPS_Time< double >::float_t const & t_seconds) -> GPS_Time< double >::float_t
    interval(Time t) -> GPS_Time< double >::float_t

An instance method.

*/
SWIGINTERN VALUE
_wrap_Time_interval__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  unsigned int *arg2 = 0 ;
  GPS_Time< double >::float_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  GPS_Time< double >::float_t temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  GPS_Time< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","interval", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","interval", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "GPS_Time< double >::float_t","interval", 3, argv[1] ));
  } 
  temp3 = static_cast< GPS_Time< double >::float_t >(val3);
  arg3 = &temp3;
  {
    try {
      result = (GPS_Time< double >::float_t)((GPS_Time< double > const *)arg1)->interval((unsigned int const &)*arg2,(GPS_Time< double >::float_t const &)*arg3);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Time_interval__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  GPS_Time< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  GPS_Time< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","interval", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_Time< double > const &","interval", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","interval", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_Time< double > * >(argp2);
  {
    try {
      result = (GPS_Time< double >::float_t)((GPS_Time< double > const *)arg1)->interval((GPS_Time< double > const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Time_interval(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Time_interval__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Time_interval__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Time.interval", 
    "    GPS_Time< double >::float_t Time.interval(unsigned int const &t_week, GPS_Time< double >::float_t const &t_seconds)\n"
    "    GPS_Time< double >::float_t Time.interval(GPS_Time< double > const &t)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.leap_second_events

  call-seq:
    leap_second_events -> GPS_Time< double >::leap_second_event_t const []

Get value of attribute.

*/
/*
  Document-method: GPS_PVT::GPS::Time.Time_leap_second_events

  call-seq:
    Time_leap_second_events -> GPS_Time< double >::leap_second_event_t const []

Get value of attribute.

*/
SWIGINTERN VALUE
_wrap_Time_leap_second_events_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(GPS_Time< double >::leap_second_events), SWIGTYPE_p_GPS_TimeT_double_t__leap_second_event_t,  0 );
  return _val;
}


/*
  Document-method: GPS_PVT::GPS::Time.guess_leap_seconds

  call-seq:
    guess_leap_seconds(std::tm const & t) -> int
    guess_leap_seconds(Time uncorrected) -> int

A class method.

*/
SWIGINTERN VALUE
_wrap_Time_guess_leap_seconds__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::tm *arg1 = 0 ;
  std::tm temp1 = {
    0
  } ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    arg1 = &temp1;
    int *dst[] = {
      &(temp1.tm_year),
      &(temp1.tm_mon),
      &(temp1.tm_mday),
      &(temp1.tm_hour),
      &(temp1.tm_min),
      &(temp1.tm_sec),
    };
    int i_max(sizeof(dst) / sizeof(dst[0]));
    if(i_max > RARRAY_LEN(argv[0])){
      i_max = RARRAY_LEN(argv[0]);
    }
    for(int i(0); i < i_max; ++i){
      VALUE obj = rb_ary_entry(argv[0], i);
      int v;
      if(SWIG_IsOK(SWIG_AsVal_int (obj, &v))){
        if(dst[i] == &(temp1.tm_year)){
          *dst[i] = v - 1900;
        }else if(dst[i] == &(temp1.tm_mon)){
          *dst[i] = v - 1;
        }else{
          *dst[i] = v;
        }
      }else{
        SWIG_exception(SWIG_TypeError, "int is expected");
      }
    }
  }
  {
    try {
      result = (int)GPS_Time< double >::SWIGTEMPLATEDISAMBIGUATOR guess_leap_seconds((std::tm const &)*arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Time_guess_leap_seconds__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_Time< GPS_Time< double >::float_t > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< GPS_Time< double >::float_t > const &","GPS_Time<(double)>::guess_leap_seconds", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< GPS_Time< double >::float_t > const &","GPS_Time<(double)>::guess_leap_seconds", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< GPS_Time< GPS_Time< double >::float_t > * >(argp1);
  {
    try {
      result = (int)GPS_Time< double >::SWIGTEMPLATEDISAMBIGUATOR guess_leap_seconds((GPS_Time< double > const &)*arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Time_guess_leap_seconds(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    {
      _v = (TYPE(argv[0]) == T_ARRAY) ? 1 : 0;
    }
    if (_v) {
      return _wrap_Time_guess_leap_seconds__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Time_guess_leap_seconds__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Time.guess_leap_seconds", 
    "    int Time.guess_leap_seconds(std::tm const &t)\n"
    "    int Time.guess_leap_seconds(GPS_Time< GPS_Time< double >::float_t > const &uncorrected)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Time_allocate(VALUE self)
#else
_wrap_Time_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_GPS_TimeT_double_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: GPS_PVT::GPS::Time.new

  call-seq:
    Time.new
    Time.new(Time t)
    Time.new(std::tm const & t, GPS_Time< double >::float_t const & leap_seconds=0)
    Time.new(std::tm const & t)
    Time.new(int const & week_, GPS_Time< double >::float_t const & seconds_)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Time__SWIG_4(int argc, VALUE *argv, VALUE self) {
  int *arg1 = 0 ;
  GPS_Time< double >::float_t *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  int temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  GPS_Time< double >::float_t temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  GPS_Time< double > *result = 0 ;
  
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","GPS_Time<(double)>", 1, argv[0] ));
  } 
  temp1 = static_cast< int >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "GPS_Time< double >::float_t","GPS_Time<(double)>", 2, argv[1] ));
  } 
  temp2 = static_cast< GPS_Time< double >::float_t >(val2);
  arg2 = &temp2;
  {
    try {
      result = (GPS_Time< double > *)new_GPS_Time_Sl_double_Sg___SWIG_4((int const &)*arg1,(double const &)*arg2,arg3);
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Time(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Time__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Time__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = (TYPE(argv[0]) == T_ARRAY) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_Time__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = (TYPE(argv[0]) == T_ARRAY) ? 1 : 0;
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Time__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Time__SWIG_4(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Time.new", 
    "    Time.new()\n"
    "    Time.new(GPS_Time< double > const &t)\n"
    "    Time.new(std::tm const &t, GPS_Time< double >::float_t const &leap_seconds)\n"
    "    Time.new(std::tm const &t)\n"
    "    Time.new(int const &week_, GPS_Time< double >::float_t const &seconds_, void *dummy)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.to_a

  call-seq:
    to_a

Convert Time to an Array.
*/
SWIGINTERN VALUE
_wrap_Time_to_a(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  int *arg2 = (int *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  VALUE vresult = Qnil;
  
  arg2 = &temp2;
  arg3 = &temp3;
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  {
    try {
      GPS_Time_Sl_double_Sg__to_a((GPS_Time< double > const *)arg1,arg2,arg3);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = rb_ary_new();
  if (SWIG_IsTmpObj(res2)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Time.<=>

  call-seq:
    <=>(t) -> int

Comparison operator.  Returns < 0 for less than, 0 for equal or > 1 for higher than..
*/
SWIGINTERN VALUE
_wrap_Time___cmp__(int argc, VALUE *argv, VALUE self) {
  GPS_Time< double > *arg1 = (GPS_Time< double > *) 0 ;
  GPS_Time< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Time< double > const *","__cmp__", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Time< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_Time< double > const &","__cmp__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","__cmp__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_Time< double > * >(argp2);
  {
    try {
      result = (int)GPS_Time_Sl_double_Sg____cmp__((GPS_Time< double > const *)arg1,(GPS_Time< double > const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_GPS_Time_Sl_double_Sg_(void *self) {
    GPS_Time< double > *arg1 = (GPS_Time< double > *)self;
    delete arg1;
}

/*
  Document-class: GPS_PVT::GPS::SpaceNode

  Proxy of C++ GPS_PVT::GPS::SpaceNode class


*/
static swig_class SwigClassSpaceNode;

/*
  Document-method: GPS_PVT::GPS::SpaceNode.light_speed

  call-seq:
    light_speed -> GPS_SpaceNode< double >::float_t const

Get value of attribute.

*/
/*
  Document-method: GPS_PVT::GPS::SpaceNode.SpaceNode_light_speed

  call-seq:
    SpaceNode_light_speed -> GPS_SpaceNode< double >::float_t const

Get value of attribute.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_light_speed_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_double(static_cast< double >(GPS_SpaceNode< double >::light_speed));
  return _val;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.L1_Frequency

  call-seq:
    L1_Frequency -> GPS_SpaceNode< double >::float_t const

Get value of attribute.

*/
/*
  Document-method: GPS_PVT::GPS::SpaceNode.SpaceNode_L1_Frequency

  call-seq:
    SpaceNode_L1_Frequency -> GPS_SpaceNode< double >::float_t const

Get value of attribute.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_L1_Frequency_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_double(static_cast< double >(GPS_SpaceNode< double >::L1_Frequency));
  return _val;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.L1_WaveLength

  call-seq:
    L1_WaveLength -> GPS_SpaceNode< double >::float_t const &

A class method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_L1_WaveLength(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double >::float_t *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (GPS_SpaceNode< double >::float_t *) &GPS_SpaceNode< double >::SWIGTEMPLATEDISAMBIGUATOR L1_WaveLength();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.SC2RAD

  call-seq:
    SC2RAD -> GPS_SpaceNode< double >::float_t const

Get value of attribute.

*/
/*
  Document-method: GPS_PVT::GPS::SpaceNode.SpaceNode_SC2RAD

  call-seq:
    SpaceNode_SC2RAD -> GPS_SpaceNode< double >::float_t const

Get value of attribute.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_SC2RAD_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_double(static_cast< double >(GPS_SpaceNode< double >::SC2RAD));
  return _val;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.L2_Frequency

  call-seq:
    L2_Frequency -> GPS_SpaceNode< double >::float_t const

Get value of attribute.

*/
/*
  Document-method: GPS_PVT::GPS::SpaceNode.SpaceNode_L2_Frequency

  call-seq:
    SpaceNode_L2_Frequency -> GPS_SpaceNode< double >::float_t const

Get value of attribute.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_L2_Frequency_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_double(static_cast< double >(GPS_SpaceNode< double >::L2_Frequency));
  return _val;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.L2_WaveLength

  call-seq:
    L2_WaveLength -> GPS_SpaceNode< double >::float_t const &

A class method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_L2_WaveLength(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double >::float_t *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (GPS_SpaceNode< double >::float_t *) &GPS_SpaceNode< double >::SWIGTEMPLATEDISAMBIGUATOR L2_WaveLength();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.gamma_L1_L2

  call-seq:
    gamma_L1_L2 -> GPS_SpaceNode< double >::float_t const

Get value of attribute.

*/
/*
  Document-method: GPS_PVT::GPS::SpaceNode.SpaceNode_gamma_L1_L2

  call-seq:
    SpaceNode_gamma_L1_L2 -> GPS_SpaceNode< double >::float_t const

Get value of attribute.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_gamma_L1_L2_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_double(static_cast< double >(GPS_SpaceNode< double >::gamma_L1_L2));
  return _val;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.gamma_per_L1

  call-seq:
    gamma_per_L1(GPS_SpaceNode< double >::float_t const & freq) -> GPS_SpaceNode< double >::float_t const

A class method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_gamma_per_L1(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double >::float_t *arg1 = 0 ;
  GPS_SpaceNode< double >::float_t temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  GPS_SpaceNode< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::float_t","GPS_SpaceNode<(double)>::gamma_per_L1", 1, argv[0] ));
  } 
  temp1 = static_cast< GPS_SpaceNode< double >::float_t >(val1);
  arg1 = &temp1;
  {
    try {
      result = (GPS_SpaceNode< double >::float_t)GPS_SpaceNode< double >::SWIGTEMPLATEDISAMBIGUATOR gamma_per_L1((double const &)*arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SpaceNode_allocate(VALUE self)
#else
_wrap_SpaceNode_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_GPS_SpaceNodeT_double_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.new

  call-seq:
    SpaceNode.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_SpaceNode(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (GPS_SpaceNode< double > *)new GPS_SpaceNode< double >();
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_GPS_SpaceNode_Sl_double_Sg_(void *self) {
    GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *)self;
    delete arg1;
}

/*
  Document-method: GPS_PVT::GPS::SpaceNode.iono_utc

  call-seq:
    iono_utc -> GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_iono_utc(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_SpaceNode< double >::Ionospheric_UTC_Parameters *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > const *","iono_utc", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  {
    try {
      result = (GPS_SpaceNode< double >::Ionospheric_UTC_Parameters *) &((GPS_SpaceNode< double > const *)arg1)->iono_utc();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    vresult = SWIG_NewPointerObj(
      reinterpret_cast< GPS_Ionospheric_UTC_Parameters<double> * >(result),
      SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0)
    
    ;
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.is_valid_iono

  call-seq:
    is_valid_iono -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_is_valid_iono(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > const *","is_valid_iono", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  {
    try {
      result = (bool)((GPS_SpaceNode< double > const *)arg1)->is_valid_iono();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.is_valid_utc

  call-seq:
    is_valid_utc -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_is_valid_utc(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > const *","is_valid_utc", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  {
    try {
      result = (bool)((GPS_SpaceNode< double > const *)arg1)->is_valid_utc();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.is_valid_iono_utc

  call-seq:
    is_valid_iono_utc -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_is_valid_iono_utc(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > const *","is_valid_iono_utc", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  {
    try {
      result = (bool)((GPS_SpaceNode< double > const *)arg1)->is_valid_iono_utc();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.update_iono_utc

  call-seq:
    update_iono_utc(GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const & params, bool const & iono_valid=True, 
    bool const & utc_valid=True) -> GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const &
    update_iono_utc(GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const & params, bool const & iono_valid=True) -> GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const
    update_iono_utc(GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const & params) -> GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_update_iono_utc__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  GPS_SpaceNode< double >::Ionospheric_UTC_Parameters *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool temp4 ;
  bool val4 ;
  int ecode4 = 0 ;
  GPS_SpaceNode< double >::Ionospheric_UTC_Parameters *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > *","update_iono_utc", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_GPS_SpaceNodeT_double_t__Ionospheric_UTC_Parameters,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const &","update_iono_utc", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const &","update_iono_utc", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_SpaceNode< double >::Ionospheric_UTC_Parameters * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","update_iono_utc", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","update_iono_utc", 4, argv[2] ));
  } 
  temp4 = static_cast< bool >(val4);
  arg4 = &temp4;
  {
    try {
      result = (GPS_SpaceNode< double >::Ionospheric_UTC_Parameters *) &(arg1)->update_iono_utc((GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const &)*arg2,(bool const &)*arg3,(bool const &)*arg4);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    vresult = SWIG_NewPointerObj(
      reinterpret_cast< GPS_Ionospheric_UTC_Parameters<double> * >(result),
      SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0)
    
    ;
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SpaceNode_update_iono_utc__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  GPS_SpaceNode< double >::Ionospheric_UTC_Parameters *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  GPS_SpaceNode< double >::Ionospheric_UTC_Parameters *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > *","update_iono_utc", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_GPS_SpaceNodeT_double_t__Ionospheric_UTC_Parameters,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const &","update_iono_utc", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const &","update_iono_utc", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_SpaceNode< double >::Ionospheric_UTC_Parameters * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","update_iono_utc", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  {
    try {
      result = (GPS_SpaceNode< double >::Ionospheric_UTC_Parameters *) &(arg1)->update_iono_utc((GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const &)*arg2,(bool const &)*arg3);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    vresult = SWIG_NewPointerObj(
      reinterpret_cast< GPS_Ionospheric_UTC_Parameters<double> * >(result),
      SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0)
    
    ;
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SpaceNode_update_iono_utc__SWIG_2(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  GPS_SpaceNode< double >::Ionospheric_UTC_Parameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  GPS_SpaceNode< double >::Ionospheric_UTC_Parameters *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > *","update_iono_utc", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_GPS_SpaceNodeT_double_t__Ionospheric_UTC_Parameters,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const &","update_iono_utc", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const &","update_iono_utc", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_SpaceNode< double >::Ionospheric_UTC_Parameters * >(argp2);
  {
    try {
      result = (GPS_SpaceNode< double >::Ionospheric_UTC_Parameters *) &(arg1)->update_iono_utc((GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    vresult = SWIG_NewPointerObj(
      reinterpret_cast< GPS_Ionospheric_UTC_Parameters<double> * >(result),
      SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0)
    
    ;
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SpaceNode_update_iono_utc(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GPS_SpaceNodeT_double_t__Ionospheric_UTC_Parameters, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SpaceNode_update_iono_utc__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GPS_SpaceNodeT_double_t__Ionospheric_UTC_Parameters, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SpaceNode_update_iono_utc__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GPS_SpaceNodeT_double_t__Ionospheric_UTC_Parameters, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SpaceNode_update_iono_utc__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "SpaceNode.update_iono_utc", 
    "    GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const SpaceNode.update_iono_utc(GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const &params, bool const &iono_valid, bool const &utc_valid)\n"
    "    GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const SpaceNode.update_iono_utc(GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const &params, bool const &iono_valid)\n"
    "    GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const & SpaceNode.update_iono_utc(GPS_SpaceNode< double >::Ionospheric_UTC_Parameters const &params)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.has_satellite

  call-seq:
    has_satellite(int const & prn) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_has_satellite(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > const *","has_satellite", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","has_satellite", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (bool)((GPS_SpaceNode< double > const *)arg1)->has_satellite((int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.update_all_ephemeris

  call-seq:
    update_all_ephemeris(Time target_time)

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_update_all_ephemeris(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  GPS_SpaceNode< double >::gps_time_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > *","update_all_ephemeris", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::gps_time_t const &","update_all_ephemeris", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::gps_time_t const &","update_all_ephemeris", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_SpaceNode< double >::gps_time_t * >(argp2);
  {
    try {
      (arg1)->update_all_ephemeris((GPS_SpaceNode< double >::gps_time_t const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.merge

  call-seq:
    merge(SpaceNode another, bool const & keep_original=True)
    merge(SpaceNode another)

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_merge__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  GPS_SpaceNode< double >::self_t *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > *","merge", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_GPS_SpaceNodeT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::self_t const &","merge", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::self_t const &","merge", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_SpaceNode< double >::self_t * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","merge", 3, argv[1] ));
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->merge((GPS_SpaceNode< double >::self_t const &)*arg2,(bool const &)*arg3);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SpaceNode_merge__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  GPS_SpaceNode< double >::self_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > *","merge", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_GPS_SpaceNodeT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::self_t const &","merge", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::self_t const &","merge", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_SpaceNode< double >::self_t * >(argp2);
  {
    try {
      (arg1)->merge((GPS_SpaceNode< double >::self_t const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SpaceNode_merge(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GPS_SpaceNodeT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SpaceNode_merge__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GPS_SpaceNodeT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SpaceNode_merge__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "SpaceNode.merge", 
    "    void SpaceNode.merge(GPS_SpaceNode< double >::self_t const &another, bool const &keep_original)\n"
    "    void SpaceNode.merge(GPS_SpaceNode< double >::self_t const &another)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.pierce_point

  call-seq:
    pierce_point(ENU relative_pos, LLH usrllh, GPS_SpaceNode< double >::float_t const & height_over_ellipsoid=350E3) -> GPS_SpaceNode< double >::pierce_point_res_t
    pierce_point(ENU relative_pos, LLH usrllh) -> GPS_SpaceNode< double >::pierce_point_res_t

A class method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_pierce_point__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double >::enu_t *arg1 = 0 ;
  GPS_SpaceNode< double >::llh_t *arg2 = 0 ;
  GPS_SpaceNode< double >::float_t *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  GPS_SpaceNode< double >::float_t temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  GPS_SpaceNode< double >::pierce_point_res_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_System_ENUT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::enu_t const &","GPS_SpaceNode<(double)>::pierce_point", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::enu_t const &","GPS_SpaceNode<(double)>::pierce_point", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double >::enu_t * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_System_LLHT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::llh_t const &","GPS_SpaceNode<(double)>::pierce_point", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::llh_t const &","GPS_SpaceNode<(double)>::pierce_point", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< GPS_SpaceNode< double >::llh_t * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::float_t","GPS_SpaceNode<(double)>::pierce_point", 3, argv[2] ));
  } 
  temp3 = static_cast< GPS_SpaceNode< double >::float_t >(val3);
  arg3 = &temp3;
  {
    try {
      result = GPS_SpaceNode< double >::SWIGTEMPLATEDISAMBIGUATOR pierce_point((System_ENU< double,WGS84 > const &)*arg1,(System_LLH< double,WGS84 > const &)*arg2,(double const &)*arg3);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->latitude));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->longitude));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SpaceNode_pierce_point__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double >::enu_t *arg1 = 0 ;
  GPS_SpaceNode< double >::llh_t *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  GPS_SpaceNode< double >::pierce_point_res_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_System_ENUT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::enu_t const &","GPS_SpaceNode<(double)>::pierce_point", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::enu_t const &","GPS_SpaceNode<(double)>::pierce_point", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double >::enu_t * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_System_LLHT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::llh_t const &","GPS_SpaceNode<(double)>::pierce_point", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::llh_t const &","GPS_SpaceNode<(double)>::pierce_point", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< GPS_SpaceNode< double >::llh_t * >(argp2);
  {
    try {
      result = GPS_SpaceNode< double >::SWIGTEMPLATEDISAMBIGUATOR pierce_point((System_ENU< double,WGS84 > const &)*arg1,(System_LLH< double,WGS84 > const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->latitude));
    vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((&result)->longitude));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SpaceNode_pierce_point(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_System_ENUT_double_WGS84_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_System_LLHT_double_WGS84_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SpaceNode_pierce_point__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_System_ENUT_double_WGS84_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_System_LLHT_double_WGS84_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SpaceNode_pierce_point__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "SpaceNode.pierce_point", 
    "    GPS_SpaceNode< double >::pierce_point_res_t SpaceNode.pierce_point(GPS_SpaceNode< double >::enu_t const &relative_pos, GPS_SpaceNode< double >::llh_t const &usrllh, GPS_SpaceNode< double >::float_t const &height_over_ellipsoid)\n"
    "    GPS_SpaceNode< double >::pierce_point_res_t SpaceNode.pierce_point(GPS_SpaceNode< double >::enu_t const &relative_pos, GPS_SpaceNode< double >::llh_t const &usrllh)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.slant_factor

  call-seq:
    slant_factor(ENU relative_pos, GPS_SpaceNode< double >::float_t const & height_over_ellipsoid=350E3) -> GPS_SpaceNode< double >::float_t
    slant_factor(ENU relative_pos) -> GPS_SpaceNode< double >::float_t

A class method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_slant_factor__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double >::enu_t *arg1 = 0 ;
  GPS_SpaceNode< double >::float_t *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  GPS_SpaceNode< double >::float_t temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  GPS_SpaceNode< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_System_ENUT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::enu_t const &","GPS_SpaceNode<(double)>::slant_factor", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::enu_t const &","GPS_SpaceNode<(double)>::slant_factor", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double >::enu_t * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::float_t","GPS_SpaceNode<(double)>::slant_factor", 2, argv[1] ));
  } 
  temp2 = static_cast< GPS_SpaceNode< double >::float_t >(val2);
  arg2 = &temp2;
  {
    try {
      result = (GPS_SpaceNode< double >::float_t)GPS_SpaceNode< double >::SWIGTEMPLATEDISAMBIGUATOR slant_factor((System_ENU< double,WGS84 > const &)*arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SpaceNode_slant_factor__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double >::enu_t *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  GPS_SpaceNode< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_System_ENUT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::enu_t const &","GPS_SpaceNode<(double)>::slant_factor", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::enu_t const &","GPS_SpaceNode<(double)>::slant_factor", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double >::enu_t * >(argp1);
  {
    try {
      result = (GPS_SpaceNode< double >::float_t)GPS_SpaceNode< double >::SWIGTEMPLATEDISAMBIGUATOR slant_factor((System_ENU< double,WGS84 > const &)*arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SpaceNode_slant_factor(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_System_ENUT_double_WGS84_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SpaceNode_slant_factor__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_System_ENUT_double_WGS84_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SpaceNode_slant_factor__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "SpaceNode.slant_factor", 
    "    GPS_SpaceNode< double >::float_t SpaceNode.slant_factor(GPS_SpaceNode< double >::enu_t const &relative_pos, GPS_SpaceNode< double >::float_t const &height_over_ellipsoid)\n"
    "    GPS_SpaceNode< double >::float_t SpaceNode.slant_factor(GPS_SpaceNode< double >::enu_t const &relative_pos)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.tec2delay

  call-seq:
    tec2delay(GPS_SpaceNode< double >::float_t const & tec, GPS_SpaceNode< double >::float_t const & freq=GPS_SpaceNode< double >::L1_Frequency) -> GPS_SpaceNode< double >::float_t
    tec2delay(GPS_SpaceNode< double >::float_t const & tec) -> GPS_SpaceNode< double >::float_t

A class method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_tec2delay__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double >::float_t *arg1 = 0 ;
  GPS_SpaceNode< double >::float_t *arg2 = 0 ;
  GPS_SpaceNode< double >::float_t temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  GPS_SpaceNode< double >::float_t temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  GPS_SpaceNode< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::float_t","GPS_SpaceNode<(double)>::tec2delay", 1, argv[0] ));
  } 
  temp1 = static_cast< GPS_SpaceNode< double >::float_t >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::float_t","GPS_SpaceNode<(double)>::tec2delay", 2, argv[1] ));
  } 
  temp2 = static_cast< GPS_SpaceNode< double >::float_t >(val2);
  arg2 = &temp2;
  {
    try {
      result = (GPS_SpaceNode< double >::float_t)GPS_SpaceNode< double >::SWIGTEMPLATEDISAMBIGUATOR tec2delay((double const &)*arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SpaceNode_tec2delay__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double >::float_t *arg1 = 0 ;
  GPS_SpaceNode< double >::float_t temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  GPS_SpaceNode< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::float_t","GPS_SpaceNode<(double)>::tec2delay", 1, argv[0] ));
  } 
  temp1 = static_cast< GPS_SpaceNode< double >::float_t >(val1);
  arg1 = &temp1;
  {
    try {
      result = (GPS_SpaceNode< double >::float_t)GPS_SpaceNode< double >::SWIGTEMPLATEDISAMBIGUATOR tec2delay((double const &)*arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SpaceNode_tec2delay(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SpaceNode_tec2delay__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SpaceNode_tec2delay__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "SpaceNode.tec2delay", 
    "    GPS_SpaceNode< double >::float_t SpaceNode.tec2delay(GPS_SpaceNode< double >::float_t const &tec, GPS_SpaceNode< double >::float_t const &freq)\n"
    "    GPS_SpaceNode< double >::float_t SpaceNode.tec2delay(GPS_SpaceNode< double >::float_t const &tec)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.iono_correction

  call-seq:
    iono_correction(ENU relative_pos, LLH usrllh, Time t) -> GPS_SpaceNode< double >::float_t
    iono_correction(XYZ sat, XYZ usr, Time t) -> GPS_SpaceNode< double >::float_t

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_iono_correction__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  GPS_SpaceNode< double >::enu_t *arg2 = 0 ;
  GPS_SpaceNode< double >::llh_t *arg3 = 0 ;
  GPS_SpaceNode< double >::gps_time_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  GPS_SpaceNode< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > const *","iono_correction", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_System_ENUT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::enu_t const &","iono_correction", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::enu_t const &","iono_correction", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_SpaceNode< double >::enu_t * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_System_LLHT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::llh_t const &","iono_correction", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::llh_t const &","iono_correction", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< GPS_SpaceNode< double >::llh_t * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::gps_time_t const &","iono_correction", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::gps_time_t const &","iono_correction", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< GPS_SpaceNode< double >::gps_time_t * >(argp4);
  {
    try {
      result = (GPS_SpaceNode< double >::float_t)((GPS_SpaceNode< double > const *)arg1)->iono_correction((GPS_SpaceNode< double >::enu_t const &)*arg2,(GPS_SpaceNode< double >::llh_t const &)*arg3,(GPS_SpaceNode< double >::gps_time_t const &)*arg4);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SpaceNode_iono_correction__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  GPS_SpaceNode< double >::xyz_t *arg2 = 0 ;
  GPS_SpaceNode< double >::xyz_t *arg3 = 0 ;
  GPS_SpaceNode< double >::gps_time_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  GPS_SpaceNode< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > const *","iono_correction", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_System_XYZT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::xyz_t const &","iono_correction", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::xyz_t const &","iono_correction", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< GPS_SpaceNode< double >::xyz_t * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_System_XYZT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::xyz_t const &","iono_correction", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::xyz_t const &","iono_correction", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< GPS_SpaceNode< double >::xyz_t * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::gps_time_t const &","iono_correction", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::gps_time_t const &","iono_correction", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< GPS_SpaceNode< double >::gps_time_t * >(argp4);
  {
    try {
      result = (GPS_SpaceNode< double >::float_t)((GPS_SpaceNode< double > const *)arg1)->iono_correction((GPS_SpaceNode< double >::xyz_t const &)*arg2,(GPS_SpaceNode< double >::xyz_t const &)*arg3,(GPS_SpaceNode< double >::gps_time_t const &)*arg4);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SpaceNode_iono_correction(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_System_ENUT_double_WGS84_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_System_LLHT_double_WGS84_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SpaceNode_iono_correction__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SpaceNode_iono_correction__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "SpaceNode.iono_correction", 
    "    GPS_SpaceNode< double >::float_t SpaceNode.iono_correction(GPS_SpaceNode< double >::enu_t const &relative_pos, GPS_SpaceNode< double >::llh_t const &usrllh, GPS_SpaceNode< double >::gps_time_t const &t)\n"
    "    GPS_SpaceNode< double >::float_t SpaceNode.iono_correction(GPS_SpaceNode< double >::xyz_t const &sat, GPS_SpaceNode< double >::xyz_t const &usr, GPS_SpaceNode< double >::gps_time_t const &t)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.tropo_correction

  call-seq:
    tropo_correction(ENU relative_pos, LLH usrllh) -> GPS_SpaceNode< double >::float_t
    tropo_correction(XYZ sat, XYZ usr) -> GPS_SpaceNode< double >::float_t

A class method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_tropo_correction__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double >::enu_t *arg1 = 0 ;
  GPS_SpaceNode< double >::llh_t *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  GPS_SpaceNode< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_System_ENUT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::enu_t const &","GPS_SpaceNode<(double)>::tropo_correction", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::enu_t const &","GPS_SpaceNode<(double)>::tropo_correction", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double >::enu_t * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_System_LLHT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::llh_t const &","GPS_SpaceNode<(double)>::tropo_correction", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::llh_t const &","GPS_SpaceNode<(double)>::tropo_correction", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< GPS_SpaceNode< double >::llh_t * >(argp2);
  {
    try {
      result = (GPS_SpaceNode< double >::float_t)GPS_SpaceNode< double >::SWIGTEMPLATEDISAMBIGUATOR tropo_correction((System_ENU< double,WGS84 > const &)*arg1,(System_LLH< double,WGS84 > const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.tropo_correction_zenith_hydrostatic_Saastamoinen

  call-seq:
    tropo_correction_zenith_hydrostatic_Saastamoinen(GPS_SpaceNode< double >::float_t const & latitude, GPS_SpaceNode< double >::float_t const & p_hpa, 
    GPS_SpaceNode< double >::float_t const & height_km) -> GPS_SpaceNode< double >::float_t

A class method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_tropo_correction_zenith_hydrostatic_Saastamoinen(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double >::float_t *arg1 = 0 ;
  GPS_SpaceNode< double >::float_t *arg2 = 0 ;
  GPS_SpaceNode< double >::float_t *arg3 = 0 ;
  GPS_SpaceNode< double >::float_t temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  GPS_SpaceNode< double >::float_t temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  GPS_SpaceNode< double >::float_t temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  GPS_SpaceNode< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::float_t","GPS_SpaceNode<(double)>::tropo_correction_zenith_hydrostatic_Saastamoinen", 1, argv[0] ));
  } 
  temp1 = static_cast< GPS_SpaceNode< double >::float_t >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::float_t","GPS_SpaceNode<(double)>::tropo_correction_zenith_hydrostatic_Saastamoinen", 2, argv[1] ));
  } 
  temp2 = static_cast< GPS_SpaceNode< double >::float_t >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::float_t","GPS_SpaceNode<(double)>::tropo_correction_zenith_hydrostatic_Saastamoinen", 3, argv[2] ));
  } 
  temp3 = static_cast< GPS_SpaceNode< double >::float_t >(val3);
  arg3 = &temp3;
  {
    try {
      result = (GPS_SpaceNode< double >::float_t)GPS_SpaceNode< double >::SWIGTEMPLATEDISAMBIGUATOR tropo_correction_zenith_hydrostatic_Saastamoinen((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.tropo_correction

  call-seq:
    tropo_correction(ENU relative_pos, LLH usrllh) -> GPS_SpaceNode< double >::float_t
    tropo_correction(XYZ sat, XYZ usr) -> GPS_SpaceNode< double >::float_t

A class method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_tropo_correction__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double >::xyz_t *arg1 = 0 ;
  GPS_SpaceNode< double >::xyz_t *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  GPS_SpaceNode< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_System_XYZT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::xyz_t const &","GPS_SpaceNode<(double)>::tropo_correction", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::xyz_t const &","GPS_SpaceNode<(double)>::tropo_correction", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double >::xyz_t * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_System_XYZT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::xyz_t const &","GPS_SpaceNode<(double)>::tropo_correction", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::xyz_t const &","GPS_SpaceNode<(double)>::tropo_correction", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< GPS_SpaceNode< double >::xyz_t * >(argp2);
  {
    try {
      result = (GPS_SpaceNode< double >::float_t)GPS_SpaceNode< double >::SWIGTEMPLATEDISAMBIGUATOR tropo_correction((System_XYZ< double,WGS84 > const &)*arg1,(System_XYZ< double,WGS84 > const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SpaceNode_tropo_correction(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_System_ENUT_double_WGS84_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_System_LLHT_double_WGS84_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SpaceNode_tropo_correction__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SpaceNode_tropo_correction__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "SpaceNode.tropo_correction", 
    "    GPS_SpaceNode< double >::float_t SpaceNode.tropo_correction(GPS_SpaceNode< double >::enu_t const &relative_pos, GPS_SpaceNode< double >::llh_t const &usrllh)\n"
    "    GPS_SpaceNode< double >::float_t SpaceNode.tropo_correction(GPS_SpaceNode< double >::xyz_t const &sat, GPS_SpaceNode< double >::xyz_t const &usr)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.register_ephemeris

  call-seq:
    register_ephemeris(int const & prn, Ephemeris eph, int const & priority_delta=1)
    register_ephemeris(int const & prn, Ephemeris eph)

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_register_ephemeris__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  int *arg2 = 0 ;
  GPS_Ephemeris< double > *arg3 = 0 ;
  int *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > *","register_ephemeris", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","register_ephemeris", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_GPS_EphemerisT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const &","register_ephemeris", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Ephemeris< double > const &","register_ephemeris", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< GPS_Ephemeris< double > * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","register_ephemeris", 4, argv[2] ));
  } 
  temp4 = static_cast< int >(val4);
  arg4 = &temp4;
  {
    try {
      GPS_SpaceNode_Sl_double_Sg__register_ephemeris__SWIG_0(arg1,(int const &)*arg2,(GPS_Ephemeris< double > const &)*arg3,(int const &)*arg4);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SpaceNode_register_ephemeris__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  int *arg2 = 0 ;
  GPS_Ephemeris< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > *","register_ephemeris", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","register_ephemeris", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_GPS_EphemerisT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const &","register_ephemeris", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Ephemeris< double > const &","register_ephemeris", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< GPS_Ephemeris< double > * >(argp3);
  {
    try {
      GPS_SpaceNode_Sl_double_Sg__register_ephemeris__SWIG_0(arg1,(int const &)*arg2,(GPS_Ephemeris< double > const &)*arg3);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SpaceNode_register_ephemeris(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GPS_EphemerisT_double_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SpaceNode_register_ephemeris__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GPS_EphemerisT_double_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SpaceNode_register_ephemeris__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "register_ephemeris", 
    "    void register_ephemeris(int const &prn, GPS_Ephemeris< double > const &eph, int const &priority_delta)\n"
    "    void register_ephemeris(int const &prn, GPS_Ephemeris< double > const &eph)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.ephemeris

  call-seq:
    ephemeris(int const & prn) -> Ephemeris

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_ephemeris(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  GPS_Ephemeris< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > const *","ephemeris", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ephemeris", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = GPS_SpaceNode_Sl_double_Sg__ephemeris((GPS_SpaceNode< double > const *)arg1,(int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new GPS_Ephemeris< double >(static_cast< const GPS_Ephemeris< double >& >(result))), SWIGTYPE_p_GPS_EphemerisT_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode.read

  call-seq:
    read(char const * fname) -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_read(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double > *arg1 = (GPS_SpaceNode< double > *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double > *","read", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","read", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (int)GPS_SpaceNode_Sl_double_Sg__read(arg1,(char const *)arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


/*
  Document-class: GPS_PVT::GPS::Ionospheric_UTC_Parameters

  Proxy of C++ GPS_PVT::GPS::Ionospheric_UTC_Parameters class


*/
static swig_class SwigClassIonospheric_UTC_Parameters;

/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.alpha=

  call-seq:
    alpha=(double const [4] values)

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_alphae___(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[4] ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > *","set_alpha", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  {
    if(!(RB_TYPE_P(argv[0], T_ARRAY) && (RARRAY_LEN(argv[0]) == 4))){
      SWIG_exception(SWIG_TypeError, "array[4] is expected");
    }
    for(int i(0); i < 4; ++i){
      if(!SWIG_IsOK(swig::asval(RARRAY_AREF(argv[0], i), &temp2[i]))){
        SWIG_exception(SWIG_TypeError, "double is expected");
      }
    }
    arg2 = temp2;
  }
  {
    try {
      GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_alpha(arg1,(double const (*))arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    for(int i(0); i < 4; ++i){
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from(arg2[i]));
    }
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.alpha

  call-seq:
    alpha

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_alpha(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[4] ;
  VALUE vresult = Qnil;
  
  
  arg2 = temp2;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > const *","get_alpha", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  {
    try {
      GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_alpha((GPS_Ionospheric_UTC_Parameters< double > const *)arg1,arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    for(int i(0); i < 4; ++i){
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from(arg2[i]));
    }
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.beta=

  call-seq:
    beta=(double const [4] values)

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_betae___(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[4] ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > *","set_beta", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  {
    if(!(RB_TYPE_P(argv[0], T_ARRAY) && (RARRAY_LEN(argv[0]) == 4))){
      SWIG_exception(SWIG_TypeError, "array[4] is expected");
    }
    for(int i(0); i < 4; ++i){
      if(!SWIG_IsOK(swig::asval(RARRAY_AREF(argv[0], i), &temp2[i]))){
        SWIG_exception(SWIG_TypeError, "double is expected");
      }
    }
    arg2 = temp2;
  }
  {
    try {
      GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_beta(arg1,(double const (*))arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    for(int i(0); i < 4; ++i){
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from(arg2[i]));
    }
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.beta

  call-seq:
    beta

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_beta(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[4] ;
  VALUE vresult = Qnil;
  
  
  arg2 = temp2;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > const *","get_beta", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  {
    try {
      GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_beta((GPS_Ionospheric_UTC_Parameters< double > const *)arg1,arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    for(int i(0); i < 4; ++i){
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from(arg2[i]));
    }
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.A1=

  call-seq:
    A1=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_A1e___(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > *","set_A1", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_A1", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_A1(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.A1

  call-seq:
    A1 -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_A1(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > const *","get_A1", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_A1((GPS_Ionospheric_UTC_Parameters< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.A0=

  call-seq:
    A0=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_A0e___(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > *","set_A0", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_A0", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_A0(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.A0

  call-seq:
    A0 -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_A0(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > const *","get_A0", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_A0((GPS_Ionospheric_UTC_Parameters< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.t_ot=

  call-seq:
    t_ot=(unsigned int const & v) -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_t_ote___(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > *","set_t_ot", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","set_t_ot", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (unsigned int)GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_t_ot(arg1,(unsigned int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.t_ot

  call-seq:
    t_ot -> unsigned int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_t_ot(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > const *","get_t_ot", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  {
    try {
      result = (unsigned int *) &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_t_ot((GPS_Ionospheric_UTC_Parameters< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.WN_t=

  call-seq:
    WN_t=(unsigned int const & v) -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_WN_te___(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > *","set_WN_t", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","set_WN_t", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (unsigned int)GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_WN_t(arg1,(unsigned int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.WN_t

  call-seq:
    WN_t -> unsigned int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_WN_t(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > const *","get_WN_t", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  {
    try {
      result = (unsigned int *) &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_WN_t((GPS_Ionospheric_UTC_Parameters< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.delta_t_LS=

  call-seq:
    delta_t_LS=(int const & v) -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_delta_t_LSe___(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > *","set_delta_t_LS", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","set_delta_t_LS", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (int)GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_delta_t_LS(arg1,(int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.delta_t_LS

  call-seq:
    delta_t_LS -> int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_delta_t_LS(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > const *","get_delta_t_LS", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  {
    try {
      result = (int *) &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_delta_t_LS((GPS_Ionospheric_UTC_Parameters< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.WN_LSF=

  call-seq:
    WN_LSF=(unsigned int const & v) -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_WN_LSFe___(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > *","set_WN_LSF", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","set_WN_LSF", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (unsigned int)GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_WN_LSF(arg1,(unsigned int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.WN_LSF

  call-seq:
    WN_LSF -> unsigned int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_WN_LSF(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > const *","get_WN_LSF", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  {
    try {
      result = (unsigned int *) &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_WN_LSF((GPS_Ionospheric_UTC_Parameters< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.DN=

  call-seq:
    DN=(unsigned int const & v) -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_DNe___(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > *","set_DN", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","set_DN", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (unsigned int)GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_DN(arg1,(unsigned int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.DN

  call-seq:
    DN -> unsigned int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_DN(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > const *","get_DN", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  {
    try {
      result = (unsigned int *) &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_DN((GPS_Ionospheric_UTC_Parameters< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.delta_t_LSF=

  call-seq:
    delta_t_LSF=(int const & v) -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_delta_t_LSFe___(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > *","set_delta_t_LSF", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","set_delta_t_LSF", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (int)GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__set_delta_t_LSF(arg1,(int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.delta_t_LSF

  call-seq:
    delta_t_LSF -> int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_delta_t_LSF(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ionospheric_UTC_Parameters< double > const *","get_delta_t_LSF", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ionospheric_UTC_Parameters< double > * >(argp1);
  {
    try {
      result = (int *) &GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__get_delta_t_LSF((GPS_Ionospheric_UTC_Parameters< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.parse

  call-seq:
    parse(unsigned int const [10] buf) -> Ionospheric_UTC_Parameters

A class method.

*/
SWIGINTERN VALUE
_wrap_Ionospheric_UTC_Parameters_parse(int argc, VALUE *argv, VALUE self) {
  unsigned int *arg1 ;
  unsigned int temp1[10] ;
  GPS_Ionospheric_UTC_Parameters< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    if(!(RB_TYPE_P(argv[0], T_ARRAY) && (RARRAY_LEN(argv[0]) == 10))){
      SWIG_exception(SWIG_TypeError, "array[10] is expected");
    }
    for(int i(0); i < 10; ++i){
      if(!SWIG_IsOK(SWIG_AsVal_unsigned_SS_int (RARRAY_AREF(argv[0], i), &temp1[i]))){
        SWIG_exception(SWIG_TypeError, "unsigned int is expected");
      }
    }
    arg1 = temp1;
  }
  {
    try {
      result = GPS_Ionospheric_UTC_Parameters_Sl_double_Sg__parse((unsigned int const (*))arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new GPS_Ionospheric_UTC_Parameters< double >(static_cast< const GPS_Ionospheric_UTC_Parameters< double >& >(result))), SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Ionospheric_UTC_Parameters_allocate(VALUE self)
#else
_wrap_Ionospheric_UTC_Parameters_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: GPS_PVT::GPS::Ionospheric_UTC_Parameters.new

  call-seq:
    Ionospheric_UTC_Parameters.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Ionospheric_UTC_Parameters(int argc, VALUE *argv, VALUE self) {
  GPS_Ionospheric_UTC_Parameters< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (GPS_Ionospheric_UTC_Parameters< double > *)new GPS_Ionospheric_UTC_Parameters< double >();
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_GPS_Ionospheric_UTC_Parameters_Sl_double_Sg_(void *self) {
    GPS_Ionospheric_UTC_Parameters< double > *arg1 = (GPS_Ionospheric_UTC_Parameters< double > *)self;
    delete arg1;
}

/*
  Document-class: GPS_PVT::GPS::Ephemeris

  Proxy of C++ GPS_PVT::GPS::Ephemeris class


*/
static swig_class SwigClassEphemeris;

/*
  Document-method: GPS_PVT::GPS::Ephemeris.iode_subframe3

  call-seq:
    iode_subframe3 -> int

Get value of attribute.

*/
/*
  Document-method: GPS_PVT::GPS::Ephemeris.iode_subframe3=

  call-seq:
    iode_subframe3=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_iode_subframe3_set(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","iode_subframe3", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","iode_subframe3", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iode_subframe3 = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ephemeris_iode_subframe3_get(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","iode_subframe3", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  result = (int) ((arg1)->iode_subframe3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.invalidate

  call-seq:
    invalidate

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_invalidate(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","invalidate", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      (arg1)->invalidate();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.consistent?

  call-seq:
    consistent? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_consistentq___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","is_consistent", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (bool)((GPS_Ephemeris< double > const *)arg1)->is_consistent();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.new

  call-seq:
    Ephemeris.new
    Ephemeris.new(GPS_SpaceNode< double >::SatelliteProperties::Ephemeris const & eph)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Ephemeris__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (GPS_Ephemeris< double > *)new GPS_Ephemeris< double >();
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Ephemeris_allocate(VALUE self)
#else
_wrap_Ephemeris_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_GPS_EphemerisT_double_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Ephemeris__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_SpaceNode< double >::SatelliteProperties::Ephemeris *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  GPS_Ephemeris< double > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_GPS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SpaceNode< double >::SatelliteProperties::Ephemeris const &","GPS_Ephemeris<(double)>", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_SpaceNode< double >::SatelliteProperties::Ephemeris const &","GPS_Ephemeris<(double)>", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< GPS_SpaceNode< double >::SatelliteProperties::Ephemeris * >(argp1);
  {
    try {
      result = (GPS_Ephemeris< double > *)new GPS_Ephemeris< double >((GPS_SpaceNode< double >::SatelliteProperties::Ephemeris const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Ephemeris(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Ephemeris__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ephemeris__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Ephemeris.new", 
    "    Ephemeris.new()\n"
    "    Ephemeris.new(GPS_SpaceNode< double >::SatelliteProperties::Ephemeris const &eph)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.svid=

  call-seq:
    svid=(unsigned int const & v) -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_svide___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_svid", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","set_svid", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (unsigned int)GPS_Ephemeris_Sl_double_Sg__set_svid(arg1,(unsigned int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.svid

  call-seq:
    svid -> unsigned int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_svid(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_svid", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (unsigned int *) &GPS_Ephemeris_Sl_double_Sg__get_svid((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.WN=

  call-seq:
    WN=(unsigned int const & v) -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_WNe___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_WN", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","set_WN", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (unsigned int)GPS_Ephemeris_Sl_double_Sg__set_WN(arg1,(unsigned int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.WN

  call-seq:
    WN -> unsigned int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_WN(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_WN", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (unsigned int *) &GPS_Ephemeris_Sl_double_Sg__get_WN((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.URA=

  call-seq:
    URA=(int const & v) -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_URAe___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_URA", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","set_URA", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (int)GPS_Ephemeris_Sl_double_Sg__set_URA(arg1,(int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.URA

  call-seq:
    URA -> int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_URA(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_URA", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (int *) &GPS_Ephemeris_Sl_double_Sg__get_URA((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.SV_health=

  call-seq:
    SV_health=(unsigned int const & v) -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SV_healthe___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_SV_health", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","set_SV_health", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (unsigned int)GPS_Ephemeris_Sl_double_Sg__set_SV_health(arg1,(unsigned int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.SV_health

  call-seq:
    SV_health -> unsigned int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SV_health(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_SV_health", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (unsigned int *) &GPS_Ephemeris_Sl_double_Sg__get_SV_health((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.iodc=

  call-seq:
    iodc=(int const & v) -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_iodce___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_iodc", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","set_iodc", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (int)GPS_Ephemeris_Sl_double_Sg__set_iodc(arg1,(int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.iodc

  call-seq:
    iodc -> int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_iodc(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_iodc", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (int *) &GPS_Ephemeris_Sl_double_Sg__get_iodc((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.t_GD=

  call-seq:
    t_GD=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_t_GDe___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_t_GD", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_t_GD", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_t_GD(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.t_GD

  call-seq:
    t_GD -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_t_GD(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_t_GD", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_t_GD((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.t_oc=

  call-seq:
    t_oc=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_t_oce___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_t_oc", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_t_oc", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_t_oc(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.t_oc

  call-seq:
    t_oc -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_t_oc(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_t_oc", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_t_oc((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.a_f2=

  call-seq:
    a_f2=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_a_f2e___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_a_f2", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_a_f2", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_a_f2(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.a_f2

  call-seq:
    a_f2 -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_a_f2(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_a_f2", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_a_f2((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.a_f1=

  call-seq:
    a_f1=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_a_f1e___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_a_f1", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_a_f1", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_a_f1(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.a_f1

  call-seq:
    a_f1 -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_a_f1(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_a_f1", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_a_f1((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.a_f0=

  call-seq:
    a_f0=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_a_f0e___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_a_f0", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_a_f0", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_a_f0(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.a_f0

  call-seq:
    a_f0 -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_a_f0(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_a_f0", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_a_f0((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.iode=

  call-seq:
    iode=(int const & v) -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_iodee___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_iode", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","set_iode", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (int)GPS_Ephemeris_Sl_double_Sg__set_iode(arg1,(int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.iode

  call-seq:
    iode -> int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_iode(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_iode", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (int *) &GPS_Ephemeris_Sl_double_Sg__get_iode((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.c_rs=

  call-seq:
    c_rs=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_c_rse___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_c_rs", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_c_rs", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_c_rs(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.c_rs

  call-seq:
    c_rs -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_c_rs(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_c_rs", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_c_rs((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.delta_n=

  call-seq:
    delta_n=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_delta_ne___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_delta_n", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_delta_n", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_delta_n(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.delta_n

  call-seq:
    delta_n -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_delta_n(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_delta_n", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_delta_n((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.M0=

  call-seq:
    M0=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_M0e___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_M0", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_M0", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_M0(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.M0

  call-seq:
    M0 -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_M0(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_M0", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_M0((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.c_uc=

  call-seq:
    c_uc=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_c_uce___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_c_uc", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_c_uc", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_c_uc(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.c_uc

  call-seq:
    c_uc -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_c_uc(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_c_uc", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_c_uc((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.e=

  call-seq:
    e=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_ee___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_e", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_e", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_e(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.e

  call-seq:
    e -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_e(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_e", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_e((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.c_us=

  call-seq:
    c_us=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_c_use___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_c_us", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_c_us", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_c_us(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.c_us

  call-seq:
    c_us -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_c_us(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_c_us", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_c_us((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.sqrt_A=

  call-seq:
    sqrt_A=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_sqrt_Ae___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_sqrt_A", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_sqrt_A", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_sqrt_A(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.sqrt_A

  call-seq:
    sqrt_A -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_sqrt_A(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_sqrt_A", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_sqrt_A((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.t_oe=

  call-seq:
    t_oe=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_t_oee___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_t_oe", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_t_oe", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_t_oe(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.t_oe

  call-seq:
    t_oe -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_t_oe(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_t_oe", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_t_oe((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.fit_interval=

  call-seq:
    fit_interval=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_fit_intervale___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_fit_interval", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_fit_interval", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_fit_interval(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.fit_interval

  call-seq:
    fit_interval -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_fit_interval(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_fit_interval", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_fit_interval((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.c_ic=

  call-seq:
    c_ic=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_c_ice___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_c_ic", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_c_ic", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_c_ic(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.c_ic

  call-seq:
    c_ic -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_c_ic(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_c_ic", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_c_ic((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.Omega0=

  call-seq:
    Omega0=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_Omega0e___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_Omega0", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_Omega0", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_Omega0(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.Omega0

  call-seq:
    Omega0 -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_Omega0(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_Omega0", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_Omega0((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.c_is=

  call-seq:
    c_is=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_c_ise___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_c_is", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_c_is", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_c_is(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.c_is

  call-seq:
    c_is -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_c_is(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_c_is", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_c_is((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.i0=

  call-seq:
    i0=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_i0e___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_i0", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_i0", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_i0(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.i0

  call-seq:
    i0 -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_i0(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_i0", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_i0((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.c_rc=

  call-seq:
    c_rc=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_c_rce___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_c_rc", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_c_rc", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_c_rc(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.c_rc

  call-seq:
    c_rc -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_c_rc(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_c_rc", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_c_rc((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.omega=

  call-seq:
    omega=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_omegae___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_omega", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_omega", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_omega(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.omega

  call-seq:
    omega -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_omega(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_omega", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_omega((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.dot_Omega0=

  call-seq:
    dot_Omega0=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_dot_Omega0e___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_dot_Omega0", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_dot_Omega0", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_dot_Omega0(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.dot_Omega0

  call-seq:
    dot_Omega0 -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_dot_Omega0(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_dot_Omega0", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_dot_Omega0((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.dot_i0=

  call-seq:
    dot_i0=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_dot_i0e___(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","set_dot_i0", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_dot_i0", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_Ephemeris_Sl_double_Sg__set_dot_i0(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.dot_i0

  call-seq:
    dot_i0 -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_dot_i0(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","get_dot_i0", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_Ephemeris_Sl_double_Sg__get_dot_i0((GPS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.parse

  call-seq:
    parse(unsigned int const [10] buf)

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_parse(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  unsigned int *arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2[10] ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  VALUE vresult = Qnil;
  
  arg3 = &temp3;
  arg4 = &temp4;
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > *","parse", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  {
    if(!(RB_TYPE_P(argv[0], T_ARRAY) && (RARRAY_LEN(argv[0]) == 10))){
      SWIG_exception(SWIG_TypeError, "array[10] is expected");
    }
    for(int i(0); i < 10; ++i){
      if(!SWIG_IsOK(SWIG_AsVal_unsigned_SS_int (RARRAY_AREF(argv[0], i), &temp2[i]))){
        SWIG_exception(SWIG_TypeError, "unsigned int is expected");
      }
    }
    arg2 = temp2;
  }
  {
    try {
      GPS_Ephemeris_Sl_double_Sg__parse(arg1,(unsigned int const (*))arg2,arg3,arg4);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = rb_ary_new();
  if (SWIG_IsTmpObj(res3)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris.constellation

  call-seq:
    constellation(Time t, double const & pseudo_range=0, bool const & with_velocity=True)
    constellation(Time t, double const & pseudo_range=0)
    constellation(Time t)

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_constellation__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  System_XYZ< double,WGS84 > *arg2 = 0 ;
  System_XYZ< double,WGS84 > *arg3 = 0 ;
  GPS_Time< double > *arg4 = 0 ;
  double *arg5 = 0 ;
  bool *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  System_XYZ< double,WGS84 > temp2 ;
  System_XYZ< double,WGS84 > temp3 ;
  void *argp4 ;
  int res4 = 0 ;
  double temp5 ;
  double val5 ;
  int ecode5 = 0 ;
  bool temp6 ;
  bool val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","constellation", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  res4 = SWIG_ConvertPtr(argv[0], &argp4, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "GPS_Time< double > const &","constellation", 4, argv[0] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","constellation", 4, argv[0])); 
  }
  arg4 = reinterpret_cast< GPS_Time< double > * >(argp4);
  ecode5 = SWIG_AsVal_double(argv[1], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","constellation", 5, argv[1] ));
  } 
  temp5 = static_cast< double >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_bool(argv[2], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "bool","constellation", 6, argv[2] ));
  } 
  temp6 = static_cast< bool >(val6);
  arg6 = &temp6;
  {
    try {
      GPS_Ephemeris_Sl_double_Sg__constellation__SWIG_0((GPS_Ephemeris< double > const *)arg1,*arg2,*arg3,(GPS_Time< double > const &)*arg4,(double const &)*arg5,(bool const &)*arg6);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new System_XYZ< double,WGS84 >(*arg2)), SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new System_XYZ< double,WGS84 >(*arg3)), SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ephemeris_constellation__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  System_XYZ< double,WGS84 > *arg2 = 0 ;
  System_XYZ< double,WGS84 > *arg3 = 0 ;
  GPS_Time< double > *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  System_XYZ< double,WGS84 > temp2 ;
  System_XYZ< double,WGS84 > temp3 ;
  void *argp4 ;
  int res4 = 0 ;
  double temp5 ;
  double val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","constellation", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  res4 = SWIG_ConvertPtr(argv[0], &argp4, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "GPS_Time< double > const &","constellation", 4, argv[0] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","constellation", 4, argv[0])); 
  }
  arg4 = reinterpret_cast< GPS_Time< double > * >(argp4);
  ecode5 = SWIG_AsVal_double(argv[1], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","constellation", 5, argv[1] ));
  } 
  temp5 = static_cast< double >(val5);
  arg5 = &temp5;
  {
    try {
      GPS_Ephemeris_Sl_double_Sg__constellation__SWIG_0((GPS_Ephemeris< double > const *)arg1,*arg2,*arg3,(GPS_Time< double > const &)*arg4,(double const &)*arg5);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new System_XYZ< double,WGS84 >(*arg2)), SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new System_XYZ< double,WGS84 >(*arg3)), SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ephemeris_constellation__SWIG_2(int argc, VALUE *argv, VALUE self) {
  GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *) 0 ;
  System_XYZ< double,WGS84 > *arg2 = 0 ;
  System_XYZ< double,WGS84 > *arg3 = 0 ;
  GPS_Time< double > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  System_XYZ< double,WGS84 > temp2 ;
  System_XYZ< double,WGS84 > temp3 ;
  void *argp4 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Ephemeris< double > const *","constellation", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Ephemeris< double > * >(argp1);
  res4 = SWIG_ConvertPtr(argv[0], &argp4, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "GPS_Time< double > const &","constellation", 4, argv[0] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","constellation", 4, argv[0])); 
  }
  arg4 = reinterpret_cast< GPS_Time< double > * >(argp4);
  {
    try {
      GPS_Ephemeris_Sl_double_Sg__constellation__SWIG_0((GPS_Ephemeris< double > const *)arg1,*arg2,*arg3,(GPS_Time< double > const &)*arg4);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new System_XYZ< double,WGS84 >(*arg2)), SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new System_XYZ< double,WGS84 >(*arg3)), SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Ephemeris_constellation(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_EphemerisT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ephemeris_constellation__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_EphemerisT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Ephemeris_constellation__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_EphemerisT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Ephemeris_constellation__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "constellation", 
    "    void constellation(System_XYZ< double,WGS84 > &position, System_XYZ< double,WGS84 > &velocity, GPS_Time< double > const &t, double const &pseudo_range, bool const &with_velocity)\n"
    "    void constellation(System_XYZ< double,WGS84 > &position, System_XYZ< double,WGS84 > &velocity, GPS_Time< double > const &t, double const &pseudo_range)\n"
    "    void constellation(System_XYZ< double,WGS84 > &position, System_XYZ< double,WGS84 > &velocity, GPS_Time< double > const &t)\n");
  
  return Qnil;
}


SWIGINTERN void
free_GPS_Ephemeris_Sl_double_Sg_(void *self) {
    GPS_Ephemeris< double > *arg1 = (GPS_Ephemeris< double > *)self;
    delete arg1;
}

/*
  Document-class: GPS_PVT::GPS::PVT

  Proxy of C++ GPS_PVT::GPS::PVT class


*/
static swig_class SwigClassPVT;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_PVT_allocate(VALUE self)
#else
_wrap_PVT_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_GPS_User_PVTT_double_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: GPS_PVT::GPS::PVT.new

  call-seq:
    PVT.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_PVT(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (GPS_User_PVT< double > *)new GPS_User_PVT< double >();
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS.ERROR_NO

  call-seq:
    ERROR_NO -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.ERROR_UNSOLVED

  call-seq:
    ERROR_UNSOLVED -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.ERROR_INVALID_IONO_MODEL

  call-seq:
    ERROR_INVALID_IONO_MODEL -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.ERROR_INSUFFICIENT_SATELLITES

  call-seq:
    ERROR_INSUFFICIENT_SATELLITES -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.ERROR_POSITION_LS

  call-seq:
    ERROR_POSITION_LS -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.ERROR_POSITION_NOT_CONVERGED

  call-seq:
    ERROR_POSITION_NOT_CONVERGED -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.ERROR_DOP

  call-seq:
    ERROR_DOP -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.ERROR_VELOCITY_SKIPPED

  call-seq:
    ERROR_VELOCITY_SKIPPED -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.ERROR_VELOCITY_INSUFFICIENT_SATELLITES

  call-seq:
    ERROR_VELOCITY_INSUFFICIENT_SATELLITES -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.ERROR_VELOCITY_LS

  call-seq:
    ERROR_VELOCITY_LS -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::PVT.error_code

  call-seq:
    error_code -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_error_code(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","error_code", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (int)((GPS_User_PVT< double > const *)arg1)->error_code();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.receiver_time

  call-seq:
    receiver_time -> Time

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_receiver_time(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_Time< double > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","receiver_time", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (GPS_Time< double > *) &((GPS_User_PVT< double > const *)arg1)->receiver_time();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GPS_TimeT_double_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.xyz

  call-seq:
    xyz -> XYZ

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_xyz(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  System_XYZ< double,WGS84 > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","xyz", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (System_XYZ< double,WGS84 > *) &((GPS_User_PVT< double > const *)arg1)->xyz();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_System_XYZT_double_WGS84_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.llh

  call-seq:
    llh -> LLH

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_llh(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  System_LLH< double,WGS84 > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","llh", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (System_LLH< double,WGS84 > *) &((GPS_User_PVT< double > const *)arg1)->llh();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_System_LLHT_double_WGS84_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.receiver_error

  call-seq:
    receiver_error -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_receiver_error(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","receiver_error", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (double *) &((GPS_User_PVT< double > const *)arg1)->receiver_error();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.velocity

  call-seq:
    velocity -> ENU

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_velocity(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  System_ENU< double,WGS84 > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","velocity", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (System_ENU< double,WGS84 > *) &((GPS_User_PVT< double > const *)arg1)->velocity();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_System_ENUT_double_WGS84_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.receiver_error_rate

  call-seq:
    receiver_error_rate -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_receiver_error_rate(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","receiver_error_rate", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (double *) &((GPS_User_PVT< double > const *)arg1)->receiver_error_rate();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.gdop

  call-seq:
    gdop -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_gdop(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","gdop", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (double *) &((GPS_User_PVT< double > const *)arg1)->gdop();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.pdop

  call-seq:
    pdop -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_pdop(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","pdop", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (double *) &((GPS_User_PVT< double > const *)arg1)->pdop();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.hdop

  call-seq:
    hdop -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_hdop(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","hdop", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (double *) &((GPS_User_PVT< double > const *)arg1)->hdop();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.vdop

  call-seq:
    vdop -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_vdop(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","vdop", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (double *) &((GPS_User_PVT< double > const *)arg1)->vdop();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.tdop

  call-seq:
    tdop -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_tdop(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","tdop", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (double *) &((GPS_User_PVT< double > const *)arg1)->tdop();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.used_satellites

  call-seq:
    used_satellites -> unsigned int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_used_satellites(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","used_satellites", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (unsigned int *) &((GPS_User_PVT< double > const *)arg1)->used_satellites();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.used_satellite_list

  call-seq:
    used_satellite_list -> std::vector< int >

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_used_satellite_list(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","used_satellite_list", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = ((GPS_User_PVT< double > const *)arg1)->used_satellite_list();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    vresult = rb_ary_new();
    
    for(std::vector< int >::const_iterator it((&result)->begin()), it_end((&result)->end());
      it != it_end; ++it){
      vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  (*it));
    }
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.position_solved?

  call-seq:
    position_solved? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_position_solvedq___(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","position_solved", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (bool)((GPS_User_PVT< double > const *)arg1)->position_solved();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.velocity_solved?

  call-seq:
    velocity_solved? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_velocity_solvedq___(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","velocity_solved", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (bool)((GPS_User_PVT< double > const *)arg1)->velocity_solved();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.G

  call-seq:
    G -> Matrix_FrozenD

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_G(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix_Frozen< double,Array2D_Dense< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","G", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (Matrix_Frozen< double,Array2D_Dense< double > > *) &((GPS_User_PVT< double > const *)arg1)->G();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.W

  call-seq:
    W -> Matrix_FrozenD

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_W(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix_Frozen< double,Array2D_Dense< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","W", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (Matrix_Frozen< double,Array2D_Dense< double > > *) &((GPS_User_PVT< double > const *)arg1)->W();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.delta_r

  call-seq:
    delta_r -> Matrix_FrozenD

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_delta_r(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix_Frozen< double,Array2D_Dense< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","delta_r", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = (Matrix_Frozen< double,Array2D_Dense< double > > *) &((GPS_User_PVT< double > const *)arg1)->delta_r();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.G_enu

  call-seq:
    G_enu -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_G_enu(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","G_enu", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = ((GPS_User_PVT< double > const *)arg1)->G_enu();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.C

  call-seq:
    C -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_C(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","C", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = ((GPS_User_PVT< double > const *)arg1)->C();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.C_enu

  call-seq:
    C_enu -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_C_enu(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","C_enu", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = ((GPS_User_PVT< double > const *)arg1)->C_enu();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.S

  call-seq:
    S -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_S(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","S", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = ((GPS_User_PVT< double > const *)arg1)->S();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.S_enu

  call-seq:
    S_enu -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_S_enu(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","S_enu", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = ((GPS_User_PVT< double > const *)arg1)->S_enu();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.slope_HV

  call-seq:
    slope_HV -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_slope_HV(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","slope_HV", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = ((GPS_User_PVT< double > const *)arg1)->slope_HV();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.slope_HV_enu

  call-seq:
    slope_HV_enu -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_slope_HV_enu(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","slope_HV_enu", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      result = ((GPS_User_PVT< double > const *)arg1)->slope_HV_enu();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.fd

  call-seq:
    fd

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_fd(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  GPS_User_PVT< double >::base_t::detection_t **arg2 = (GPS_User_PVT< double >::base_t::detection_t **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_User_PVT< double >::base_t::detection_t *temp2 ;
  VALUE vresult = Qnil;
  
  {
    arg2 = &temp2;
  }
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","fd", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      ((GPS_User_PVT< double > const *)arg1)->fd((GPS_User_PVT< double >::base_t::detection_t const **)arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    if((*arg2)->valid){
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((*arg2)->wssr));
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((*arg2)->wssr_sf));
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((*arg2)->weight_max));
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((*arg2)->slope_HV[0].max));
      vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  (((*arg2)->slope_HV[0].prn)));
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((*arg2)->slope_HV[1].max));
      vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  (((*arg2)->slope_HV[1].prn)));
    }
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.fde_min

  call-seq:
    fde_min

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_fde_min(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  GPS_User_PVT< double >::base_t::detection_t **arg2 = (GPS_User_PVT< double >::base_t::detection_t **) 0 ;
  GPS_User_PVT< double >::base_t::exclusion_t **arg3 = (GPS_User_PVT< double >::base_t::exclusion_t **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_User_PVT< double >::base_t::detection_t *temp2 ;
  GPS_User_PVT< double >::base_t::exclusion_t *temp3 ;
  VALUE vresult = Qnil;
  
  {
    arg2 = &temp2;
  }
  {
    arg3 = &temp3;
  }
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","fde_min", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      ((GPS_User_PVT< double > const *)arg1)->fde_min((GPS_User_PVT< double >::base_t::detection_t const **)arg2,(GPS_User_PVT< double >::base_t::exclusion_t const **)arg3);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = rb_ary_new();
  {
    if((*arg2)->valid){
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((*arg2)->wssr));
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((*arg2)->wssr_sf));
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((*arg2)->weight_max));
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((*arg2)->slope_HV[0].max));
      vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  (((*arg2)->slope_HV[0].prn)));
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((*arg2)->slope_HV[1].max));
      vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  (((*arg2)->slope_HV[1].prn)));
    }
  }
  {
    if((*arg3)->valid){
      vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  (((*arg3)->excluded)));
      vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj(
          (new System_XYZ<double, WGS84>((*arg3)->user_position.xyz)),
          SWIGTYPE_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN))
      
      
      
      ;
      vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj(
          (new System_LLH<double, WGS84>((*arg3)->user_position.llh)),
          SWIGTYPE_System_LLHT_double_WGS84_t, SWIG_POINTER_OWN))
      
      
      
      ;
    }
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::PVT.fde_2nd

  call-seq:
    fde_2nd

An instance method.

*/
SWIGINTERN VALUE
_wrap_PVT_fde_2nd(int argc, VALUE *argv, VALUE self) {
  GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *) 0 ;
  GPS_User_PVT< double >::base_t::detection_t **arg2 = (GPS_User_PVT< double >::base_t::detection_t **) 0 ;
  GPS_User_PVT< double >::base_t::exclusion_t **arg3 = (GPS_User_PVT< double >::base_t::exclusion_t **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_User_PVT< double >::base_t::detection_t *temp2 ;
  GPS_User_PVT< double >::base_t::exclusion_t *temp3 ;
  VALUE vresult = Qnil;
  
  {
    arg2 = &temp2;
  }
  {
    arg3 = &temp3;
  }
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_User_PVTT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_User_PVT< double > const *","fde_2nd", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_User_PVT< double > * >(argp1);
  {
    try {
      ((GPS_User_PVT< double > const *)arg1)->fde_2nd((GPS_User_PVT< double >::base_t::detection_t const **)arg2,(GPS_User_PVT< double >::base_t::exclusion_t const **)arg3);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = rb_ary_new();
  {
    if((*arg2)->valid){
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((*arg2)->wssr));
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((*arg2)->wssr_sf));
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((*arg2)->weight_max));
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((*arg2)->slope_HV[0].max));
      vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  (((*arg2)->slope_HV[0].prn)));
      vresult = SWIG_Ruby_AppendOutput(vresult, swig::from((*arg2)->slope_HV[1].max));
      vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  (((*arg2)->slope_HV[1].prn)));
    }
  }
  {
    if((*arg3)->valid){
      vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  (((*arg3)->excluded)));
      vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj(
          (new System_XYZ<double, WGS84>((*arg3)->user_position.xyz)),
          SWIGTYPE_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN))
      
      
      
      ;
      vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj(
          (new System_LLH<double, WGS84>((*arg3)->user_position.llh)),
          SWIGTYPE_System_LLHT_double_WGS84_t, SWIG_POINTER_OWN))
      
      
      
      ;
    }
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_GPS_User_PVT_Sl_double_Sg_(void *self) {
    GPS_User_PVT< double > *arg1 = (GPS_User_PVT< double > *)self;
    delete arg1;
}

/*
  Document-class: GPS_PVT::GPS::Measurement

  Proxy of C++ GPS_PVT::GPS::Measurement class


*/
static swig_class SwigClassMeasurement;

/*
  Document-method: GPS_PVT::GPS.L1_PSEUDORANGE

  call-seq:
    L1_PSEUDORANGE -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.L1_DOPPLER

  call-seq:
    L1_DOPPLER -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.L1_CARRIER_PHASE

  call-seq:
    L1_CARRIER_PHASE -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.L1_RANGE_RATE

  call-seq:
    L1_RANGE_RATE -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.L1_PSEUDORANGE_SIGMA

  call-seq:
    L1_PSEUDORANGE_SIGMA -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.L1_DOPPLER_SIGMA

  call-seq:
    L1_DOPPLER_SIGMA -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.L1_CARRIER_PHASE_SIGMA

  call-seq:
    L1_CARRIER_PHASE_SIGMA -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.L1_RANGE_RATE_SIGMA

  call-seq:
    L1_RANGE_RATE_SIGMA -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.L1_SIGNAL_STRENGTH_dBHz

  call-seq:
    L1_SIGNAL_STRENGTH_dBHz -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.L1_LOCK_SEC

  call-seq:
    L1_LOCK_SEC -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.L1_FREQUENCY

  call-seq:
    L1_FREQUENCY -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS.ITEMS_PREDEFINED

  call-seq:
    ITEMS_PREDEFINED -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::Measurement.add

  call-seq:
    add(int const & prn, int const & key, double const & value)

An instance method.

*/
SWIGINTERN VALUE
_wrap_Measurement_add(int argc, VALUE *argv, VALUE self) {
  GPS_Measurement< double > *arg1 = (GPS_Measurement< double > *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_MeasurementT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Measurement< double > *","add", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Measurement< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","add", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","add", 3, argv[1] ));
  } 
  temp3 = static_cast< int >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","add", 4, argv[2] ));
  } 
  temp4 = static_cast< double >(val4);
  arg4 = &temp4;
  {
    try {
      (arg1)->add((int const &)*arg2,(int const &)*arg3,(double const &)*arg4);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Measurement.each

  call-seq:
    each

Iterate thru each element in the Measurement.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_Measurement_each(int argc, VALUE *argv, VALUE self) {
  GPS_Measurement< double > *arg1 = (GPS_Measurement< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_MeasurementT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Measurement< double > const *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Measurement< double > * >(argp1);
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_intern("each")), argc, argv);
    }
    
    try {
      GPS_Measurement_Sl_double_Sg__each((GPS_Measurement< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Measurement.to_hash

  call-seq:
    to_hash -> VALUE

An instance method.

*/
SWIGINTERN VALUE
_wrap_Measurement_to_hash(int argc, VALUE *argv, VALUE self) {
  GPS_Measurement< double > *arg1 = (GPS_Measurement< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_MeasurementT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Measurement< double > const *","to_hash", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Measurement< double > * >(argp1);
  {
    try {
      result = (VALUE)GPS_Measurement_Sl_double_Sg__to_hash((GPS_Measurement< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Measurement.new

  call-seq:
    Measurement.new
    Measurement.new(Measurement other)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Measurement__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_Measurement< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (GPS_Measurement< double > *)new GPS_Measurement< double >();
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Measurement_allocate(VALUE self)
#else
_wrap_Measurement_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_GPS_MeasurementT_double_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Measurement__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_Measurement< double > *arg1 = 0 ;
  GPS_Measurement< double > temp1 ;
  GPS_Measurement< double > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    if((!SWIG_IsOK(SWIG_ConvertPtr(argv[0], (void **)&arg1, SWIGTYPE_p_GPS_MeasurementT_double_t, 0)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg1 = &temp1))))){
      SWIG_exception(SWIG_TypeError, "in method 'GPS_Measurement<(double)>', expecting type GPS_Measurement< double >");
    }
  }
  {
    try {
      result = (GPS_Measurement< double > *)new GPS_Measurement< double >((GPS_Measurement< double > const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Measurement(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Measurement__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_CheckState(SWIG_ConvertPtr(argv[0], (void **)0, SWIGTYPE_p_GPS_MeasurementT_double_t, 0))
      || swig::check<GPS_Measurement<double> >(argv[0]);
    }
    if (_v) {
      return _wrap_new_Measurement__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Measurement.new", 
    "    Measurement.new()\n"
    "    Measurement.new(GPS_Measurement< double > const &other)\n");
  
  return Qnil;
}


SWIGINTERN void
free_GPS_Measurement_Sl_double_Sg_(void *self) {
    GPS_Measurement< double > *arg1 = (GPS_Measurement< double > *)self;
    delete arg1;
}

/*
  Document-class: GPS_PVT::GPS::SolverOptionsCommon

  Proxy of C++ GPS_PVT::GPS::SolverOptionsCommon class


*/
static swig_class SwigClassSolverOptionsCommon;

/*
  Document-method: GPS_PVT::GPS::SolverOptionsCommon.cast_general

  call-seq:
    cast_general -> GPS_Solver_GeneralOptions< double > *
    cast_general -> GPS_Solver_GeneralOptions< double > const

An instance method.

*/
SWIGINTERN VALUE
_wrap_SolverOptionsCommon_cast_general__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GPS_SolverOptions_Common< double > *arg1 = (GPS_SolverOptions_Common< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_Solver_GeneralOptions< double > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverOptions_CommonT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SolverOptions_Common< double > *","cast_general", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SolverOptions_Common< double > * >(argp1);
  {
    try {
      result = (GPS_Solver_GeneralOptions< double > *)(arg1)->cast_general();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GPS_Solver_GeneralOptionsT_double_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SolverOptionsCommon_cast_general__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GPS_SolverOptions_Common< double > *arg1 = (GPS_SolverOptions_Common< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_Solver_GeneralOptions< double > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverOptions_CommonT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SolverOptions_Common< double > const *","cast_general", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SolverOptions_Common< double > * >(argp1);
  {
    try {
      result = (GPS_Solver_GeneralOptions< double > *)((GPS_SolverOptions_Common< double > const *)arg1)->cast_general();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GPS_Solver_GeneralOptionsT_double_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SolverOptionsCommon_cast_general(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 2) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_SolverOptions_CommonT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SolverOptionsCommon_cast_general__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GPS_SolverOptions_CommonT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SolverOptionsCommon_cast_general__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "SolverOptionsCommon.cast_general", 
    "    GPS_Solver_GeneralOptions< double > SolverOptionsCommon.cast_general()\n"
    "    GPS_Solver_GeneralOptions< double > const * SolverOptionsCommon.cast_general()\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SolverOptionsCommon.elevation_mask=

  call-seq:
    elevation_mask=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_SolverOptionsCommon_elevation_maske___(int argc, VALUE *argv, VALUE self) {
  GPS_SolverOptions_Common< double > *arg1 = (GPS_SolverOptions_Common< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverOptions_CommonT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SolverOptions_Common< double > *","set_elevation_mask", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SolverOptions_Common< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_elevation_mask", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_SolverOptions_Common_Sl_double_Sg__set_elevation_mask(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SolverOptionsCommon.elevation_mask

  call-seq:
    elevation_mask -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_SolverOptionsCommon_elevation_mask(int argc, VALUE *argv, VALUE self) {
  GPS_SolverOptions_Common< double > *arg1 = (GPS_SolverOptions_Common< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverOptions_CommonT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SolverOptions_Common< double > const *","get_elevation_mask", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SolverOptions_Common< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_SolverOptions_Common_Sl_double_Sg__get_elevation_mask((GPS_SolverOptions_Common< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SolverOptionsCommon.residual_mask=

  call-seq:
    residual_mask=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_SolverOptionsCommon_residual_maske___(int argc, VALUE *argv, VALUE self) {
  GPS_SolverOptions_Common< double > *arg1 = (GPS_SolverOptions_Common< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverOptions_CommonT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SolverOptions_Common< double > *","set_residual_mask", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SolverOptions_Common< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_residual_mask", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)GPS_SolverOptions_Common_Sl_double_Sg__set_residual_mask(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SolverOptionsCommon.residual_mask

  call-seq:
    residual_mask -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_SolverOptionsCommon_residual_mask(int argc, VALUE *argv, VALUE self) {
  GPS_SolverOptions_Common< double > *arg1 = (GPS_SolverOptions_Common< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverOptions_CommonT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SolverOptions_Common< double > const *","get_residual_mask", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SolverOptions_Common< double > * >(argp1);
  {
    try {
      result = (double *) &GPS_SolverOptions_Common_Sl_double_Sg__get_residual_mask((GPS_SolverOptions_Common< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_GPS_SolverOptions_Common_Sl_double_Sg_(void *self) {
    GPS_SolverOptions_Common< double > *arg1 = (GPS_SolverOptions_Common< double > *)self;
    delete arg1;
}

/*
  Document-class: GPS_PVT::GPS::SolverOptions < GPS::SolverOptionsCommon

  Proxy of C++ GPS_PVT::GPS::SolverOptions class


*/
static swig_class SwigClassSolverOptions;

/*
  Document-method: GPS_PVT::GPS::SolverOptions.exclude

  call-seq:
    exclude(int const & prn)

An instance method.

*/
SWIGINTERN VALUE
_wrap_SolverOptions_exclude(int argc, VALUE *argv, VALUE self) {
  GPS_SolverOptions< double > *arg1 = (GPS_SolverOptions< double > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverOptionsT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SolverOptions< double > *","exclude", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SolverOptions< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","exclude", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->exclude((int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SolverOptions.include

  call-seq:
    include(int const & prn)

An instance method.

*/
SWIGINTERN VALUE
_wrap_SolverOptions_include(int argc, VALUE *argv, VALUE self) {
  GPS_SolverOptions< double > *arg1 = (GPS_SolverOptions< double > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverOptionsT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SolverOptions< double > *","include", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SolverOptions< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","include", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->include((int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SolverOptions.excluded

  call-seq:
    excluded -> std::vector< int >

An instance method.

*/
SWIGINTERN VALUE
_wrap_SolverOptions_excluded(int argc, VALUE *argv, VALUE self) {
  GPS_SolverOptions< double > *arg1 = (GPS_SolverOptions< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverOptionsT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_SolverOptions< double > const *","excluded", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_SolverOptions< double > * >(argp1);
  {
    try {
      result = ((GPS_SolverOptions< double > const *)arg1)->excluded();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    vresult = rb_ary_new();
    
    for(std::vector< int >::const_iterator it((&result)->begin()), it_end((&result)->end());
      it != it_end; ++it){
      vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  (*it));
    }
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SolverOptions_allocate(VALUE self)
#else
_wrap_SolverOptions_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_GPS_SolverOptionsT_double_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: GPS_PVT::GPS::SolverOptions.new

  call-seq:
    SolverOptions.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_SolverOptions(int argc, VALUE *argv, VALUE self) {
  GPS_SolverOptions< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (GPS_SolverOptions< double > *)new GPS_SolverOptions< double >();
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_GPS_SolverOptions_Sl_double_Sg_(void *self) {
    GPS_SolverOptions< double > *arg1 = (GPS_SolverOptions< double > *)self;
    delete arg1;
}

/*
  Document-class: GPS_PVT::GPS::Solver

  Proxy of C++ GPS_PVT::GPS::Solver class


*/
static swig_class SwigClassSolver;

/*
  Document-method: GPS_PVT::GPS::Solver.hooks

  call-seq:
    hooks -> VALUE

Get value of attribute.

*/
SWIGINTERN VALUE
_wrap_Solver_hooks_get(int argc, VALUE *argv, VALUE self) {
  GPS_Solver< double > *arg1 = (GPS_Solver< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Solver< double > *","hooks", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Solver< double > * >(argp1);
  result = (VALUE) ((arg1)->hooks);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Solver_allocate(VALUE self)
#else
_wrap_Solver_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_GPS_SolverT_double_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: GPS_PVT::GPS::Solver.new

  call-seq:
    Solver.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Solver(int argc, VALUE *argv, VALUE self) {
  GPS_Solver< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (GPS_Solver< double > *)new GPS_Solver< double >();
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Solver.gps_space_node

  call-seq:
    gps_space_node -> SpaceNode

An instance method.

*/
SWIGINTERN VALUE
_wrap_Solver_gps_space_node(int argc, VALUE *argv, VALUE self) {
  GPS_Solver< double > *arg1 = (GPS_Solver< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_SpaceNode< double > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Solver< double > *","gps_space_node", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Solver< double > * >(argp1);
  {
    try {
      result = (GPS_SpaceNode< double > *) &(arg1)->gps_space_node();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GPS_SpaceNodeT_double_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Solver.gps_options

  call-seq:
    gps_options -> SolverOptions

An instance method.

*/
SWIGINTERN VALUE
_wrap_Solver_gps_options(int argc, VALUE *argv, VALUE self) {
  GPS_Solver< double > *arg1 = (GPS_Solver< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_SolverOptions< double > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Solver< double > *","gps_options", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Solver< double > * >(argp1);
  {
    try {
      result = (GPS_SolverOptions< double > *) &(arg1)->gps_options();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GPS_SolverOptionsT_double_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Solver.sbas_space_node

  call-seq:
    sbas_space_node -> SpaceNode_SBAS

An instance method.

*/
SWIGINTERN VALUE
_wrap_Solver_sbas_space_node(int argc, VALUE *argv, VALUE self) {
  GPS_Solver< double > *arg1 = (GPS_Solver< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SBAS_SpaceNode< double > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Solver< double > *","sbas_space_node", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Solver< double > * >(argp1);
  {
    try {
      result = (SBAS_SpaceNode< double > *) &(arg1)->sbas_space_node();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SBAS_SpaceNodeT_double_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Solver.sbas_options

  call-seq:
    sbas_options -> SolverOptions_SBAS

An instance method.

*/
SWIGINTERN VALUE
_wrap_Solver_sbas_options(int argc, VALUE *argv, VALUE self) {
  GPS_Solver< double > *arg1 = (GPS_Solver< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SBAS_SolverOptions< double > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Solver< double > *","sbas_options", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Solver< double > * >(argp1);
  {
    try {
      result = (SBAS_SolverOptions< double > *) &(arg1)->sbas_options();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SBAS_SolverOptionsT_double_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Solver.solve

  call-seq:
    solve(Measurement measurement, Time receiver_time) -> PVT

An instance method.

*/
SWIGINTERN VALUE
_wrap_Solver_solve(int argc, VALUE *argv, VALUE self) {
  GPS_Solver< double > *arg1 = (GPS_Solver< double > *) 0 ;
  GPS_Measurement< double > *arg2 = 0 ;
  GPS_Time< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPS_Measurement< double > temp2 ;
  void *argp3 ;
  int res3 = 0 ;
  GPS_User_PVT< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Solver< double > const *","solve", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Solver< double > * >(argp1);
  {
    if((!SWIG_IsOK(SWIG_ConvertPtr(argv[0], (void **)&arg2, SWIGTYPE_p_GPS_MeasurementT_double_t, 0)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg2 = &temp2))))){
      SWIG_exception(SWIG_TypeError, "in method 'solve', expecting type GPS_Measurement< double >");
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "GPS_Time< double > const &","solve", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","solve", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< GPS_Time< double > * >(argp3);
  {
    try {
      result = ((GPS_Solver< double > const *)arg1)->solve((GPS_Measurement< double > const &)*arg2,(GPS_Time< double > const &)*arg3);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new GPS_User_PVT< double >(static_cast< const GPS_User_PVT< double >& >(result))), SWIGTYPE_p_GPS_User_PVTT_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Solver.correction

  call-seq:
    correction -> VALUE

An instance method.

*/
SWIGINTERN VALUE
_wrap_Solver_correction(int argc, VALUE *argv, VALUE self) {
  GPS_Solver< double > *arg1 = (GPS_Solver< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Solver< double > const *","get_correction", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Solver< double > * >(argp1);
  {
    try {
      result = (VALUE)GPS_Solver_Sl_double_Sg__get_correction((GPS_Solver< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Solver.correction=

  call-seq:
    correction=(VALUE hash) -> VALUE

An instance method.

*/
SWIGINTERN VALUE
_wrap_Solver_correctione___(int argc, VALUE *argv, VALUE self) {
  GPS_Solver< double > *arg1 = (GPS_Solver< double > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GPS_SolverT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GPS_Solver< double > *","set_correction", 1, self )); 
  }
  arg1 = reinterpret_cast< GPS_Solver< double > * >(argp1);
  arg2 = argv[0];
  {
    try {
      result = (VALUE)GPS_Solver_Sl_double_Sg__set_correction(arg1,arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_GPS_Solver_Sl_double_Sg_(void *self) {
    GPS_Solver< double > *arg1 = (GPS_Solver< double > *)self;
    delete arg1;
}

/*
  Document-class: GPS_PVT::GPS::Ephemeris_SBAS

  Proxy of C++ GPS_PVT::GPS::Ephemeris_SBAS class


*/
static swig_class SwigClassEphemeris_SBAS;

/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.new

  call-seq:
    Ephemeris_SBAS.new
    Ephemeris_SBAS.new(SBAS_SpaceNode< double >::SatelliteProperties::Ephemeris const & eph)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_Ephemeris_SBAS__SWIG_0(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (SBAS_Ephemeris< double > *)new SBAS_Ephemeris< double >();
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Ephemeris_SBAS_allocate(VALUE self)
#else
_wrap_Ephemeris_SBAS_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_SBAS_EphemerisT_double_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Ephemeris_SBAS__SWIG_1(int argc, VALUE *argv, VALUE self) {
  SBAS_SpaceNode< double >::SatelliteProperties::Ephemeris *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SBAS_Ephemeris< double > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_SBAS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double >::SatelliteProperties::Ephemeris const &","SBAS_Ephemeris<(double)>", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "SBAS_SpaceNode< double >::SatelliteProperties::Ephemeris const &","SBAS_Ephemeris<(double)>", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< SBAS_SpaceNode< double >::SatelliteProperties::Ephemeris * >(argp1);
  {
    try {
      result = (SBAS_Ephemeris< double > *)new SBAS_Ephemeris< double >((SBAS_SpaceNode< double >::SatelliteProperties::Ephemeris const &)*arg1);
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Ephemeris_SBAS(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Ephemeris_SBAS__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SBAS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ephemeris_SBAS__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Ephemeris_SBAS.new", 
    "    Ephemeris_SBAS.new()\n"
    "    Ephemeris_SBAS.new(SBAS_SpaceNode< double >::SatelliteProperties::Ephemeris const &eph)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.svid=

  call-seq:
    svid=(unsigned int const & v) -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_svide___(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > *","set_svid", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","set_svid", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (unsigned int)SBAS_Ephemeris_Sl_double_Sg__set_svid(arg1,(unsigned int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.svid

  call-seq:
    svid -> unsigned int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_svid(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","get_svid", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (unsigned int *) &SBAS_Ephemeris_Sl_double_Sg__get_svid((SBAS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.WN=

  call-seq:
    WN=(unsigned int const & v) -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_WNe___(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > *","set_WN", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","set_WN", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (unsigned int)SBAS_Ephemeris_Sl_double_Sg__set_WN(arg1,(unsigned int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.WN

  call-seq:
    WN -> unsigned int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_WN(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","get_WN", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (unsigned int *) &SBAS_Ephemeris_Sl_double_Sg__get_WN((SBAS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.t_0=

  call-seq:
    t_0=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_t_0e___(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > *","set_t_0", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_t_0", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)SBAS_Ephemeris_Sl_double_Sg__set_t_0(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.t_0

  call-seq:
    t_0 -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_t_0(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","get_t_0", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &SBAS_Ephemeris_Sl_double_Sg__get_t_0((SBAS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.URA=

  call-seq:
    URA=(int const & v) -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_URAe___(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > *","set_URA", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","set_URA", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (int)SBAS_Ephemeris_Sl_double_Sg__set_URA(arg1,(int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.URA

  call-seq:
    URA -> int const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_URA(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","get_URA", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (int *) &SBAS_Ephemeris_Sl_double_Sg__get_URA((SBAS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.x=

  call-seq:
    x=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_xe___(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > *","set_x", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_x", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)SBAS_Ephemeris_Sl_double_Sg__set_x(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.x

  call-seq:
    x -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_x(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","get_x", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &SBAS_Ephemeris_Sl_double_Sg__get_x((SBAS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.y=

  call-seq:
    y=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_ye___(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > *","set_y", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_y", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)SBAS_Ephemeris_Sl_double_Sg__set_y(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.y

  call-seq:
    y -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_y(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","get_y", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &SBAS_Ephemeris_Sl_double_Sg__get_y((SBAS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.z=

  call-seq:
    z=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_ze___(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > *","set_z", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_z", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)SBAS_Ephemeris_Sl_double_Sg__set_z(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.z

  call-seq:
    z -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_z(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","get_z", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &SBAS_Ephemeris_Sl_double_Sg__get_z((SBAS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.dx=

  call-seq:
    dx=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_dxe___(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > *","set_dx", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_dx", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)SBAS_Ephemeris_Sl_double_Sg__set_dx(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.dx

  call-seq:
    dx -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_dx(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","get_dx", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &SBAS_Ephemeris_Sl_double_Sg__get_dx((SBAS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.dy=

  call-seq:
    dy=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_dye___(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > *","set_dy", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_dy", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)SBAS_Ephemeris_Sl_double_Sg__set_dy(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.dy

  call-seq:
    dy -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_dy(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","get_dy", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &SBAS_Ephemeris_Sl_double_Sg__get_dy((SBAS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.dz=

  call-seq:
    dz=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_dze___(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > *","set_dz", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_dz", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)SBAS_Ephemeris_Sl_double_Sg__set_dz(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.dz

  call-seq:
    dz -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_dz(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","get_dz", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &SBAS_Ephemeris_Sl_double_Sg__get_dz((SBAS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.ddx=

  call-seq:
    ddx=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_ddxe___(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > *","set_ddx", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_ddx", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)SBAS_Ephemeris_Sl_double_Sg__set_ddx(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.ddx

  call-seq:
    ddx -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_ddx(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","get_ddx", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &SBAS_Ephemeris_Sl_double_Sg__get_ddx((SBAS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.ddy=

  call-seq:
    ddy=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_ddye___(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > *","set_ddy", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_ddy", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)SBAS_Ephemeris_Sl_double_Sg__set_ddy(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.ddy

  call-seq:
    ddy -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_ddy(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","get_ddy", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &SBAS_Ephemeris_Sl_double_Sg__get_ddy((SBAS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.ddz=

  call-seq:
    ddz=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_ddze___(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > *","set_ddz", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_ddz", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)SBAS_Ephemeris_Sl_double_Sg__set_ddz(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.ddz

  call-seq:
    ddz -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_ddz(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","get_ddz", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &SBAS_Ephemeris_Sl_double_Sg__get_ddz((SBAS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.a_Gf0=

  call-seq:
    a_Gf0=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_a_Gf0e___(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > *","set_a_Gf0", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_a_Gf0", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)SBAS_Ephemeris_Sl_double_Sg__set_a_Gf0(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.a_Gf0

  call-seq:
    a_Gf0 -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_a_Gf0(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","get_a_Gf0", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &SBAS_Ephemeris_Sl_double_Sg__get_a_Gf0((SBAS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.a_Gf1=

  call-seq:
    a_Gf1=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_a_Gf1e___(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > *","set_a_Gf1", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_a_Gf1", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (double)SBAS_Ephemeris_Sl_double_Sg__set_a_Gf1(arg1,(double const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.a_Gf1

  call-seq:
    a_Gf1 -> double const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_a_Gf1(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","get_a_Gf1", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  {
    try {
      result = (double *) &SBAS_Ephemeris_Sl_double_Sg__get_a_Gf1((SBAS_Ephemeris< double > const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(*result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::Ephemeris_SBAS.constellation

  call-seq:
    constellation(Time t, double const & pseudo_range=0, bool const & with_velocity=True)
    constellation(Time t, double const & pseudo_range=0)
    constellation(Time t)

An instance method.

*/
SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_constellation__SWIG_0(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  System_XYZ< double,WGS84 > *arg2 = 0 ;
  System_XYZ< double,WGS84 > *arg3 = 0 ;
  GPS_Time< double > *arg4 = 0 ;
  double *arg5 = 0 ;
  bool *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  System_XYZ< double,WGS84 > temp2 ;
  System_XYZ< double,WGS84 > temp3 ;
  void *argp4 ;
  int res4 = 0 ;
  double temp5 ;
  double val5 ;
  int ecode5 = 0 ;
  bool temp6 ;
  bool val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","constellation", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  res4 = SWIG_ConvertPtr(argv[0], &argp4, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "GPS_Time< double > const &","constellation", 4, argv[0] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","constellation", 4, argv[0])); 
  }
  arg4 = reinterpret_cast< GPS_Time< double > * >(argp4);
  ecode5 = SWIG_AsVal_double(argv[1], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","constellation", 5, argv[1] ));
  } 
  temp5 = static_cast< double >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_bool(argv[2], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "bool","constellation", 6, argv[2] ));
  } 
  temp6 = static_cast< bool >(val6);
  arg6 = &temp6;
  {
    try {
      SBAS_Ephemeris_Sl_double_Sg__constellation__SWIG_0((SBAS_Ephemeris< double > const *)arg1,*arg2,*arg3,(GPS_Time< double > const &)*arg4,(double const &)*arg5,(bool const &)*arg6);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new System_XYZ< double,WGS84 >(*arg2)), SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new System_XYZ< double,WGS84 >(*arg3)), SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_constellation__SWIG_1(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  System_XYZ< double,WGS84 > *arg2 = 0 ;
  System_XYZ< double,WGS84 > *arg3 = 0 ;
  GPS_Time< double > *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  System_XYZ< double,WGS84 > temp2 ;
  System_XYZ< double,WGS84 > temp3 ;
  void *argp4 ;
  int res4 = 0 ;
  double temp5 ;
  double val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","constellation", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  res4 = SWIG_ConvertPtr(argv[0], &argp4, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "GPS_Time< double > const &","constellation", 4, argv[0] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","constellation", 4, argv[0])); 
  }
  arg4 = reinterpret_cast< GPS_Time< double > * >(argp4);
  ecode5 = SWIG_AsVal_double(argv[1], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","constellation", 5, argv[1] ));
  } 
  temp5 = static_cast< double >(val5);
  arg5 = &temp5;
  {
    try {
      SBAS_Ephemeris_Sl_double_Sg__constellation__SWIG_0((SBAS_Ephemeris< double > const *)arg1,*arg2,*arg3,(GPS_Time< double > const &)*arg4,(double const &)*arg5);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new System_XYZ< double,WGS84 >(*arg2)), SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new System_XYZ< double,WGS84 >(*arg3)), SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ephemeris_SBAS_constellation__SWIG_2(int argc, VALUE *argv, VALUE self) {
  SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *) 0 ;
  System_XYZ< double,WGS84 > *arg2 = 0 ;
  System_XYZ< double,WGS84 > *arg3 = 0 ;
  GPS_Time< double > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  System_XYZ< double,WGS84 > temp2 ;
  System_XYZ< double,WGS84 > temp3 ;
  void *argp4 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_EphemerisT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const *","constellation", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp1);
  res4 = SWIG_ConvertPtr(argv[0], &argp4, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "GPS_Time< double > const &","constellation", 4, argv[0] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","constellation", 4, argv[0])); 
  }
  arg4 = reinterpret_cast< GPS_Time< double > * >(argp4);
  {
    try {
      SBAS_Ephemeris_Sl_double_Sg__constellation__SWIG_0((SBAS_Ephemeris< double > const *)arg1,*arg2,*arg3,(GPS_Time< double > const &)*arg4);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new System_XYZ< double,WGS84 >(*arg2)), SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new System_XYZ< double,WGS84 >(*arg3)), SWIGTYPE_p_System_XYZT_double_WGS84_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Ephemeris_SBAS_constellation(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SBAS_EphemerisT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ephemeris_SBAS_constellation__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SBAS_EphemerisT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Ephemeris_SBAS_constellation__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SBAS_EphemerisT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Ephemeris_SBAS_constellation__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "constellation", 
    "    void constellation(System_XYZ< double,WGS84 > &position, System_XYZ< double,WGS84 > &velocity, GPS_Time< double > const &t, double const &pseudo_range, bool const &with_velocity)\n"
    "    void constellation(System_XYZ< double,WGS84 > &position, System_XYZ< double,WGS84 > &velocity, GPS_Time< double > const &t, double const &pseudo_range)\n"
    "    void constellation(System_XYZ< double,WGS84 > &position, System_XYZ< double,WGS84 > &velocity, GPS_Time< double > const &t)\n");
  
  return Qnil;
}


SWIGINTERN void
free_SBAS_Ephemeris_Sl_double_Sg_(void *self) {
    SBAS_Ephemeris< double > *arg1 = (SBAS_Ephemeris< double > *)self;
    delete arg1;
}

/*
  Document-class: GPS_PVT::GPS::SpaceNode_SBAS

  Proxy of C++ GPS_PVT::GPS::SpaceNode_SBAS class


*/
static swig_class SwigClassSpaceNode_SBAS;

/*
  Document-method: GPS_PVT::GPS::MessageType.DONT_USE

  call-seq:
    DONT_USE -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.PRN_MASK

  call-seq:
    PRN_MASK -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.FAST_CORRECTION_2

  call-seq:
    FAST_CORRECTION_2 -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.FAST_CORRECTION_3

  call-seq:
    FAST_CORRECTION_3 -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.FAST_CORRECTION_4

  call-seq:
    FAST_CORRECTION_4 -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.FAST_CORRECTION_5

  call-seq:
    FAST_CORRECTION_5 -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.INTEGRITY_INFORMATION

  call-seq:
    INTEGRITY_INFORMATION -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.FAST_CORRECTION_DEGRADATION

  call-seq:
    FAST_CORRECTION_DEGRADATION -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.GEO_NAVIGATION

  call-seq:
    GEO_NAVIGATION -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.DEGRADATION_PARAMS

  call-seq:
    DEGRADATION_PARAMS -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.SBAS_NETWORK_TIME_UTC_OFFSET_PARAMS

  call-seq:
    SBAS_NETWORK_TIME_UTC_OFFSET_PARAMS -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.GEO_SAT_ALNAMACS

  call-seq:
    GEO_SAT_ALNAMACS -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.IONO_GRID_POINT_MASKS

  call-seq:
    IONO_GRID_POINT_MASKS -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.MIXED_CORRECTION_FAST_AND_LONG_TERM

  call-seq:
    MIXED_CORRECTION_FAST_AND_LONG_TERM -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.LONG_TERM_CORRECTION

  call-seq:
    LONG_TERM_CORRECTION -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.IONO_DELAY_CORRECTION

  call-seq:
    IONO_DELAY_CORRECTION -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.SERVICE_MESSAGE

  call-seq:
    SERVICE_MESSAGE -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.CLOCK_EPHEMERIS_COV_MAT

  call-seq:
    CLOCK_EPHEMERIS_COV_MAT -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.INTERNAL_TEST_MESSAGE

  call-seq:
    INTERNAL_TEST_MESSAGE -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.NULL_MESSAGES

  call-seq:
    NULL_MESSAGES -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::MessageType.UNSUPPORTED_MESSAGE

  call-seq:
    UNSUPPORTED_MESSAGE -> int

A class method.

*/
/*
  Document-method: GPS_PVT::GPS::SpaceNode_SBAS.sagnac_correction

  call-seq:
    sagnac_correction(XYZ sat_pos, XYZ usr_pos) -> SBAS_SpaceNode< double >::float_t

A class method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_SBAS_sagnac_correction(int argc, VALUE *argv, VALUE self) {
  SBAS_SpaceNode< double >::xyz_t arg1 ;
  SBAS_SpaceNode< double >::xyz_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SBAS_SpaceNode< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_System_XYZT_double_WGS84_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double >::xyz_t const","SBAS_SpaceNode<(double)>::sagnac_correction", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "SBAS_SpaceNode< double >::xyz_t const","SBAS_SpaceNode<(double)>::sagnac_correction", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< SBAS_SpaceNode< double >::xyz_t * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_System_XYZT_double_WGS84_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double >::xyz_t const","SBAS_SpaceNode<(double)>::sagnac_correction", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "SBAS_SpaceNode< double >::xyz_t const","SBAS_SpaceNode<(double)>::sagnac_correction", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< SBAS_SpaceNode< double >::xyz_t * >(argp2));
    }
  }
  {
    try {
      result = (SBAS_SpaceNode< double >::float_t)SBAS_SpaceNode< double >::SWIGTEMPLATEDISAMBIGUATOR sagnac_correction(arg1,arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode_SBAS.tropo_correction

  call-seq:
    tropo_correction(SBAS_SpaceNode< double >::float_t const & year_utc, ENU relative_pos, LLH usrllh) -> SBAS_SpaceNode< double >::float_t

A class method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_SBAS_tropo_correction(int argc, VALUE *argv, VALUE self) {
  SBAS_SpaceNode< double >::float_t *arg1 = 0 ;
  SBAS_SpaceNode< double >::enu_t *arg2 = 0 ;
  SBAS_SpaceNode< double >::llh_t *arg3 = 0 ;
  SBAS_SpaceNode< double >::float_t temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SBAS_SpaceNode< double >::float_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double >::float_t","SBAS_SpaceNode<(double)>::tropo_correction", 1, argv[0] ));
  } 
  temp1 = static_cast< SBAS_SpaceNode< double >::float_t >(val1);
  arg1 = &temp1;
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_System_ENUT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double >::enu_t const &","SBAS_SpaceNode<(double)>::tropo_correction", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "SBAS_SpaceNode< double >::enu_t const &","SBAS_SpaceNode<(double)>::tropo_correction", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< SBAS_SpaceNode< double >::enu_t * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_System_LLHT_double_WGS84_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double >::llh_t const &","SBAS_SpaceNode<(double)>::tropo_correction", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "SBAS_SpaceNode< double >::llh_t const &","SBAS_SpaceNode<(double)>::tropo_correction", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< SBAS_SpaceNode< double >::llh_t * >(argp3);
  {
    try {
      result = (SBAS_SpaceNode< double >::float_t)SBAS_SpaceNode< double >::SWIGTEMPLATEDISAMBIGUATOR tropo_correction((double const &)*arg1,(System_ENU< double,WGS84 > const &)*arg2,(System_LLH< double,WGS84 > const &)*arg3);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SpaceNode_SBAS_allocate(VALUE self)
#else
_wrap_SpaceNode_SBAS_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_SBAS_SpaceNodeT_double_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode_SBAS.new

  call-seq:
    SpaceNode_SBAS.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_SpaceNode_SBAS(int argc, VALUE *argv, VALUE self) {
  SBAS_SpaceNode< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (SBAS_SpaceNode< double > *)new SBAS_SpaceNode< double >();
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_SBAS_SpaceNode_Sl_double_Sg_(void *self) {
    SBAS_SpaceNode< double > *arg1 = (SBAS_SpaceNode< double > *)self;
    delete arg1;
}

/*
  Document-method: GPS_PVT::GPS::SpaceNode_SBAS.has_satellite

  call-seq:
    has_satellite(int const & prn) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_SBAS_has_satellite(int argc, VALUE *argv, VALUE self) {
  SBAS_SpaceNode< double > *arg1 = (SBAS_SpaceNode< double > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double > const *","has_satellite", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_SpaceNode< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","has_satellite", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = (bool)((SBAS_SpaceNode< double > const *)arg1)->has_satellite((int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode_SBAS.update_all_ephemeris

  call-seq:
    update_all_ephemeris(Time target_time)

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_SBAS_update_all_ephemeris(int argc, VALUE *argv, VALUE self) {
  SBAS_SpaceNode< double > *arg1 = (SBAS_SpaceNode< double > *) 0 ;
  SBAS_SpaceNode< double >::gps_time_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double > *","update_all_ephemeris", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_SpaceNode< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double >::gps_time_t const &","update_all_ephemeris", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "SBAS_SpaceNode< double >::gps_time_t const &","update_all_ephemeris", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< SBAS_SpaceNode< double >::gps_time_t * >(argp2);
  {
    try {
      (arg1)->update_all_ephemeris((SBAS_SpaceNode< double >::gps_time_t const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode_SBAS.available_satellites

  call-seq:
    available_satellites(SBAS_SpaceNode< double >::float_t const & lng_deg) -> SBAS_SpaceNode< double >::available_satellites_t

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_SBAS_available_satellites(int argc, VALUE *argv, VALUE self) {
  SBAS_SpaceNode< double > *arg1 = (SBAS_SpaceNode< double > *) 0 ;
  SBAS_SpaceNode< double >::float_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SBAS_SpaceNode< double >::float_t temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::vector< std::pair< int,SBAS_SpaceNode< double >::Satellite const * > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double > const *","available_satellites", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_SpaceNode< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double >::float_t","available_satellites", 2, argv[0] ));
  } 
  temp2 = static_cast< SBAS_SpaceNode< double >::float_t >(val2);
  arg2 = &temp2;
  {
    try {
      result = ((SBAS_SpaceNode< double > const *)arg1)->available_satellites((SBAS_SpaceNode< double >::float_t const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new SBAS_SpaceNode< double >::available_satellites_t(static_cast< const SBAS_SpaceNode< double >::available_satellites_t& >(result))), SWIGTYPE_p_std__vectorT_std__pairT_int_SBAS_SpaceNodeT_double_t__Satellite_const_p_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode_SBAS.register_ephemeris

  call-seq:
    register_ephemeris(int const & prn, Ephemeris_SBAS eph, int const & priority_delta=1)
    register_ephemeris(int const & prn, Ephemeris_SBAS eph)

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_SBAS_register_ephemeris__SWIG_0(int argc, VALUE *argv, VALUE self) {
  SBAS_SpaceNode< double > *arg1 = (SBAS_SpaceNode< double > *) 0 ;
  int *arg2 = 0 ;
  SBAS_Ephemeris< double > *arg3 = 0 ;
  int *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double > *","register_ephemeris", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_SpaceNode< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","register_ephemeris", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_SBAS_EphemerisT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const &","register_ephemeris", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "SBAS_Ephemeris< double > const &","register_ephemeris", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","register_ephemeris", 4, argv[2] ));
  } 
  temp4 = static_cast< int >(val4);
  arg4 = &temp4;
  {
    try {
      SBAS_SpaceNode_Sl_double_Sg__register_ephemeris__SWIG_0(arg1,(int const &)*arg2,(SBAS_Ephemeris< double > const &)*arg3,(int const &)*arg4);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SpaceNode_SBAS_register_ephemeris__SWIG_1(int argc, VALUE *argv, VALUE self) {
  SBAS_SpaceNode< double > *arg1 = (SBAS_SpaceNode< double > *) 0 ;
  int *arg2 = 0 ;
  SBAS_Ephemeris< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double > *","register_ephemeris", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_SpaceNode< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","register_ephemeris", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_SBAS_EphemerisT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "SBAS_Ephemeris< double > const &","register_ephemeris", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "SBAS_Ephemeris< double > const &","register_ephemeris", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< SBAS_Ephemeris< double > * >(argp3);
  {
    try {
      SBAS_SpaceNode_Sl_double_Sg__register_ephemeris__SWIG_0(arg1,(int const &)*arg2,(SBAS_Ephemeris< double > const &)*arg3);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SpaceNode_SBAS_register_ephemeris(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SBAS_SpaceNodeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_SBAS_EphemerisT_double_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SpaceNode_SBAS_register_ephemeris__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SBAS_SpaceNodeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_SBAS_EphemerisT_double_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SpaceNode_SBAS_register_ephemeris__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "register_ephemeris", 
    "    void register_ephemeris(int const &prn, SBAS_Ephemeris< double > const &eph, int const &priority_delta)\n"
    "    void register_ephemeris(int const &prn, SBAS_Ephemeris< double > const &eph)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode_SBAS.ephemeris

  call-seq:
    ephemeris(int const & prn) -> Ephemeris_SBAS

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_SBAS_ephemeris(int argc, VALUE *argv, VALUE self) {
  SBAS_SpaceNode< double > *arg1 = (SBAS_SpaceNode< double > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  SBAS_Ephemeris< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double > const *","ephemeris", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_SpaceNode< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ephemeris", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = SBAS_SpaceNode_Sl_double_Sg__ephemeris((SBAS_SpaceNode< double > const *)arg1,(int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new SBAS_Ephemeris< double >(static_cast< const SBAS_Ephemeris< double >& >(result))), SWIGTYPE_p_SBAS_EphemerisT_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode_SBAS.read

  call-seq:
    read(char const * fname) -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_SBAS_read(int argc, VALUE *argv, VALUE self) {
  SBAS_SpaceNode< double > *arg1 = (SBAS_SpaceNode< double > *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double > *","read", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_SpaceNode< double > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","read", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (int)SBAS_SpaceNode_Sl_double_Sg__read(arg1,(char const *)arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode_SBAS.decode_message

  call-seq:
    decode_message(unsigned int const [8] buf, int const & prn, Time t_reception, bool const & LNAV_VNAV_LP_LPV_approach=False) -> int
    decode_message(unsigned int const [8] buf, int const & prn, Time t_reception) -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_SBAS_decode_message__SWIG_2(int argc, VALUE *argv, VALUE self) {
  SBAS_SpaceNode< double > *arg1 = (SBAS_SpaceNode< double > *) 0 ;
  unsigned int *arg2 ;
  int *arg3 = 0 ;
  GPS_Time< double > *arg4 = 0 ;
  bool *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2[8] ;
  int temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  bool temp5 ;
  bool val5 ;
  int ecode5 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double > *","decode_message", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_SpaceNode< double > * >(argp1);
  {
    if(!(RB_TYPE_P(argv[0], T_ARRAY) && (RARRAY_LEN(argv[0]) == 8))){
      SWIG_exception(SWIG_TypeError, "array[8] is expected");
    }
    for(int i(0); i < 8; ++i){
      if(!SWIG_IsOK(SWIG_AsVal_unsigned_SS_int (RARRAY_AREF(argv[0], i), &temp2[i]))){
        SWIG_exception(SWIG_TypeError, "unsigned int is expected");
      }
    }
    arg2 = temp2;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","decode_message", 3, argv[1] ));
  } 
  temp3 = static_cast< int >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "GPS_Time< double > const &","decode_message", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","decode_message", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< GPS_Time< double > * >(argp4);
  ecode5 = SWIG_AsVal_bool(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "bool","decode_message", 5, argv[3] ));
  } 
  temp5 = static_cast< bool >(val5);
  arg5 = &temp5;
  {
    try {
      result = (int)SBAS_SpaceNode_Sl_double_Sg__decode_message__SWIG_2(arg1,(unsigned int const (*))arg2,(int const &)*arg3,(GPS_Time< double > const &)*arg4,(bool const &)*arg5);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SpaceNode_SBAS_decode_message__SWIG_3(int argc, VALUE *argv, VALUE self) {
  SBAS_SpaceNode< double > *arg1 = (SBAS_SpaceNode< double > *) 0 ;
  unsigned int *arg2 ;
  int *arg3 = 0 ;
  GPS_Time< double > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2[8] ;
  int temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double > *","decode_message", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_SpaceNode< double > * >(argp1);
  {
    if(!(RB_TYPE_P(argv[0], T_ARRAY) && (RARRAY_LEN(argv[0]) == 8))){
      SWIG_exception(SWIG_TypeError, "array[8] is expected");
    }
    for(int i(0); i < 8; ++i){
      if(!SWIG_IsOK(SWIG_AsVal_unsigned_SS_int (RARRAY_AREF(argv[0], i), &temp2[i]))){
        SWIG_exception(SWIG_TypeError, "unsigned int is expected");
      }
    }
    arg2 = temp2;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","decode_message", 3, argv[1] ));
  } 
  temp3 = static_cast< int >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_GPS_TimeT_double_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "GPS_Time< double > const &","decode_message", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "GPS_Time< double > const &","decode_message", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< GPS_Time< double > * >(argp4);
  {
    try {
      result = (int)SBAS_SpaceNode_Sl_double_Sg__decode_message__SWIG_2(arg1,(unsigned int const (*))arg2,(int const &)*arg3,(GPS_Time< double > const &)*arg4);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_SpaceNode_SBAS_decode_message(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SBAS_SpaceNodeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = RB_TYPE_P(argv[1], T_ARRAY) ? 1 : 0;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SpaceNode_SBAS_decode_message__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SBAS_SpaceNodeT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = RB_TYPE_P(argv[1], T_ARRAY) ? 1 : 0;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_GPS_TimeT_double_t, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_SpaceNode_SBAS_decode_message__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "decode_message", 
    "    int decode_message(unsigned int const buf[8], int const &prn, GPS_Time< double > const &t_reception, bool const &LNAV_VNAV_LP_LPV_approach)\n"
    "    int decode_message(unsigned int const buf[8], int const &prn, GPS_Time< double > const &t_reception)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SpaceNode_SBAS.ionospheric_grid_points

  call-seq:
    ionospheric_grid_points(int const & prn) -> std::string

An instance method.

*/
SWIGINTERN VALUE
_wrap_SpaceNode_SBAS_ionospheric_grid_points(int argc, VALUE *argv, VALUE self) {
  SBAS_SpaceNode< double > *arg1 = (SBAS_SpaceNode< double > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_SpaceNodeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_SpaceNode< double > const *","ionospheric_grid_points", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_SpaceNode< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ionospheric_grid_points", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      result = SBAS_SpaceNode_Sl_double_Sg__ionospheric_grid_points((SBAS_SpaceNode< double > const *)arg1,(int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-class: GPS_PVT::GPS::SolverOptions_SBAS < GPS::SolverOptionsCommon

  Proxy of C++ GPS_PVT::GPS::SolverOptions_SBAS class


*/
static swig_class SwigClassSolverOptions_SBAS;

/*
  Document-method: GPS_PVT::GPS::SolverOptions_SBAS.exclude

  call-seq:
    exclude(int const & prn)

An instance method.

*/
SWIGINTERN VALUE
_wrap_SolverOptions_SBAS_exclude(int argc, VALUE *argv, VALUE self) {
  SBAS_SolverOptions< double > *arg1 = (SBAS_SolverOptions< double > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_SolverOptionsT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_SolverOptions< double > *","exclude", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_SolverOptions< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","exclude", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->exclude((int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SolverOptions_SBAS.include

  call-seq:
    include(int const & prn)

An instance method.

*/
SWIGINTERN VALUE
_wrap_SolverOptions_SBAS_include(int argc, VALUE *argv, VALUE self) {
  SBAS_SolverOptions< double > *arg1 = (SBAS_SolverOptions< double > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_SolverOptionsT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_SolverOptions< double > *","include", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_SolverOptions< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","include", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->include((int const &)*arg2);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::GPS::SolverOptions_SBAS.excluded

  call-seq:
    excluded -> std::vector< int >

An instance method.

*/
SWIGINTERN VALUE
_wrap_SolverOptions_SBAS_excluded(int argc, VALUE *argv, VALUE self) {
  SBAS_SolverOptions< double > *arg1 = (SBAS_SolverOptions< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_SBAS_SolverOptionsT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "SBAS_SolverOptions< double > const *","excluded", 1, self )); 
  }
  arg1 = reinterpret_cast< SBAS_SolverOptions< double > * >(argp1);
  {
    try {
      result = ((SBAS_SolverOptions< double > const *)arg1)->excluded();
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  {
    vresult = rb_ary_new();
    
    for(std::vector< int >::const_iterator it((&result)->begin()), it_end((&result)->end());
      it != it_end; ++it){
      vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_From_int  (*it));
    }
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SolverOptions_SBAS_allocate(VALUE self)
#else
_wrap_SolverOptions_SBAS_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_SBAS_SolverOptionsT_double_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: GPS_PVT::GPS::SolverOptions_SBAS.new

  call-seq:
    SolverOptions_SBAS.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_SolverOptions_SBAS(int argc, VALUE *argv, VALUE self) {
  SBAS_SolverOptions< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (SBAS_SolverOptions< double > *)new SBAS_SolverOptions< double >();
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_SBAS_SolverOptions_Sl_double_Sg_(void *self) {
    SBAS_SolverOptions< double > *arg1 = (SBAS_SolverOptions< double > *)self;
    delete arg1;
}

/*
  Document-class: GPS_PVT::GPS

  Proxy of C++ GPS_PVT::GPS class



*/
static swig_class SwigClassRINEX_Observation;

/*
  Document-method: GPS_PVT::GPS::RINEX_Observation.read

  call-seq:
    read(char const * fname)

A class method.

*/
SWIGINTERN VALUE
_wrap_RINEX_Observation_read(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","RINEX_Observation_Sl_double_Sg__read", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_intern("read")), argc, argv);
    }
    
    try {
      RINEX_Observation_Sl_double_Sg__read((char const *)arg1);
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_RINEX_Observation_allocate(VALUE self)
#else
_wrap_RINEX_Observation_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RINEX_ObservationT_double_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: GPS_PVT::GPS::RINEX_Observation.new

  call-seq:
    RINEX_Observation.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_RINEX_Observation(int argc, VALUE *argv, VALUE self) {
  RINEX_Observation< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (RINEX_Observation< double > *)new RINEX_Observation< double >();
      DATA_PTR(self) = result;
    } catch (const native_exception &e) {
      e.regenerate();
      SWIG_fail;
    } catch (const std::exception& e) {
      SWIG_exception_fail(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_RINEX_Observation_Sl_double_Sg_(void *self) {
    RINEX_Observation< double > *arg1 = (RINEX_Observation< double > *)self;
    delete arg1;
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_tTo_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *)  ((Matrix< double,Array2D_Dense< double > > *) x));
}
static void *_p_GPS_EphemerisT_double_tTo_p_GPS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GPS_SpaceNode< double >::SatelliteProperties::Ephemeris *)  ((GPS_Ephemeris< double > *) x));
}
static void *_p_GPS_SolverOptionsT_double_tTo_p_GPS_SolverOptions_CommonT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GPS_SolverOptions_Common< double > *)  ((GPS_SolverOptions< double > *) x));
}
static void *_p_SBAS_SolverOptionsT_double_tTo_p_GPS_SolverOptions_CommonT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GPS_SolverOptions_Common< double > *)  ((SBAS_SolverOptions< double > *) x));
}
static void *_p_GPS_Ionospheric_UTC_ParametersT_double_tTo_p_GPS_SpaceNodeT_double_t__Ionospheric_UTC_Parameters(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GPS_SpaceNode< double >::Ionospheric_UTC_Parameters *)  ((GPS_Ionospheric_UTC_Parameters< double > *) x));
}
static void *_p_SBAS_EphemerisT_double_tTo_p_SBAS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SBAS_SpaceNode< double >::SatelliteProperties::Ephemeris *)  ((SBAS_Ephemeris< double > *) x));
}
static swig_type_info _swigt__System_LLHT_double_WGS84_t = {"_System_LLHT_double_WGS84_t", "System_LLH< double,WGS84 >", 0, 0, (void*)0, 0};
static swig_type_info _swigt__System_XYZT_double_WGS84_t = {"_System_XYZT_double_WGS84_t", "System_XYZ< double,WGS84 >", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ComplexT_double_t = {"_p_ComplexT_double_t", "Complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GPS_EphemerisT_double_t = {"_p_GPS_EphemerisT_double_t", "GPS_Ephemeris< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GPS_Ionospheric_UTC_ParametersT_double_t = {"_p_GPS_Ionospheric_UTC_ParametersT_double_t", "GPS_Ionospheric_UTC_Parameters< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GPS_MeasurementT_double_t = {"_p_GPS_MeasurementT_double_t", "GPS_Measurement< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GPS_SolverOptionsT_double_t = {"_p_GPS_SolverOptionsT_double_t", "GPS_SolverOptions< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GPS_SolverOptions_CommonT_double_t = {"_p_GPS_SolverOptions_CommonT_double_t", "GPS_SolverOptions_Common< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GPS_SolverT_double_t = {"_p_GPS_SolverT_double_t", "GPS_Solver< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GPS_Solver_GeneralOptionsT_double_t = {"_p_GPS_Solver_GeneralOptionsT_double_t", "GPS_Solver_GeneralOptions< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GPS_SpaceNodeT_double_t = {"_p_GPS_SpaceNodeT_double_t", "GPS_SpaceNode< double >::self_t *|GPS_SpaceNode< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GPS_SpaceNodeT_double_t__Ionospheric_UTC_Parameters = {"_p_GPS_SpaceNodeT_double_t__Ionospheric_UTC_Parameters", "GPS_SpaceNode< double >::Ionospheric_UTC_Parameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GPS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris = {"_p_GPS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris", "GPS_SpaceNode< double >::SatelliteProperties::Ephemeris *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GPS_TimeT_double_t = {"_p_GPS_TimeT_double_t", "GPS_SpaceNode< double >::gps_time_t *|SBAS_SpaceNode< double >::gps_time_t *|GPS_Time< GPS_Time< double >::float_t > *|GPS_Time< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GPS_TimeT_double_t__leap_second_event_t = {"_p_GPS_TimeT_double_t__leap_second_event_t", "GPS_Time< double >::leap_second_event_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GPS_TimeT_double_t__leap_year_prop_res_t = {"_p_GPS_TimeT_double_t__leap_year_prop_res_t", "GPS_Time< double >::leap_year_prop_res_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GPS_User_PVTT_double_t = {"_p_GPS_User_PVTT_double_t", "GPS_User_PVT< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t = {"_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t", "Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *|Matrix< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t = {"_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t", "Matrix< double,Array2D_Dense< double > > *|Matrix< double,Array2D_Dense< double >,MatrixViewBase< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixViewBaseT_t = {"_p_MatrixViewBaseT_t", "MatrixViewBase< > *|MatViewBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixViewFilterT_MatrixViewBaseT_t_t = {"_p_MatrixViewFilterT_MatrixViewBaseT_t_t", "MatrixViewFilter< MatrixViewBase< > > *|MatView_f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t = {"_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t", "Matrix_Frozen< double,Array2D_Dense< double > > *|Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RINEX_ObservationT_double_t = {"_p_RINEX_ObservationT_double_t", "RINEX_Observation< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SBAS_EphemerisT_double_t = {"_p_SBAS_EphemerisT_double_t", "SBAS_Ephemeris< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SBAS_SolverOptionsT_double_t = {"_p_SBAS_SolverOptionsT_double_t", "SBAS_SolverOptions< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SBAS_SpaceNodeT_double_t = {"_p_SBAS_SpaceNodeT_double_t", "SBAS_SpaceNode< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SBAS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris = {"_p_SBAS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris", "SBAS_SpaceNode< double >::SatelliteProperties::Ephemeris *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_System_ENUT_double_WGS84_t = {"_p_System_ENUT_double_WGS84_t", "System_ENU< double,WGS84 > *|GPS_SpaceNode< double >::enu_t *|SBAS_SpaceNode< double >::enu_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_System_LLHT_double_WGS84_t = {"_p_System_LLHT_double_WGS84_t", "GPS_SpaceNode< double >::llh_t *|SBAS_SpaceNode< double >::llh_t *|System_LLH< double,WGS84 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_System_XYZT_double_WGS84_t = {"_p_System_XYZT_double_WGS84_t", "GPS_SpaceNode< double >::xyz_t *|SBAS_SpaceNode< double >::xyz_t *|System_XYZ< double,WGS84 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_available_satellites_t = {"_p_available_satellites_t", "available_satellites_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_enu_t = {"_p_enu_t", "enu_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float_t = {"_p_float_t", "float_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gps_space_node_t = {"_p_gps_space_node_t", "gps_space_node_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gps_time_t = {"_p_gps_time_t", "gps_time_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int_t = {"_p_int_t", "int_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llh_t = {"_p_llh_t", "llh_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_GPS_Solver_RAIM_LSRT_double_GPS_Solver_Base_DebugT_double_GPS_Solver_BaseT_double_t_t_t__user_pvt_t__detection_t = {"_p_p_GPS_Solver_RAIM_LSRT_double_GPS_Solver_Base_DebugT_double_GPS_Solver_BaseT_double_t_t_t__user_pvt_t__detection_t", "GPS_User_PVT< double >::base_t::detection_t **|GPS_Solver_RAIM_LSR< double,GPS_Solver_Base_Debug< double,GPS_Solver_Base< double > > >::user_pvt_t::detection_t **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_GPS_Solver_RAIM_LSRT_double_GPS_Solver_Base_DebugT_double_GPS_Solver_BaseT_double_t_t_t__user_pvt_t__exclusion_t = {"_p_p_GPS_Solver_RAIM_LSRT_double_GPS_Solver_Base_DebugT_double_GPS_Solver_BaseT_double_t_t_t__user_pvt_t__exclusion_t", "GPS_User_PVT< double >::base_t::exclusion_t **|GPS_Solver_RAIM_LSR< double,GPS_Solver_Base_Debug< double,GPS_Solver_Base< double > > >::user_pvt_t::exclusion_t **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_range_correction_list_t = {"_p_range_correction_list_t", "range_correction_list_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_s16_t = {"_p_s16_t", "s16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_s32_t = {"_p_s32_t", "s32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_s8_t = {"_p_s8_t", "s8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_satellites_t = {"_p_satellites_t", "satellites_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_self_t = {"_p_self_t", "self_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_int_SBAS_SpaceNodeT_double_t__Satellite_const_p_t_t = {"_p_std__vectorT_std__pairT_int_SBAS_SpaceNodeT_double_t__Satellite_const_p_t_t", "SBAS_SpaceNode< double >::available_satellites_t *|std::vector< std::pair< int,SBAS_SpaceNode< double >::Satellite const * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__GC_VALUE = {"_p_swig__GC_VALUE", "swig::GC_VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_u16_t = {"_p_u16_t", "u16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_u32_t = {"_p_u32_t", "u32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_u8_t = {"_p_u8_t", "u8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint_t = {"_p_uint_t", "uint_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xyz_t = {"_p_xyz_t", "xyz_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__System_LLHT_double_WGS84_t,
  &_swigt__System_XYZT_double_WGS84_t,
  &_swigt__p_ComplexT_double_t,
  &_swigt__p_GPS_EphemerisT_double_t,
  &_swigt__p_GPS_Ionospheric_UTC_ParametersT_double_t,
  &_swigt__p_GPS_MeasurementT_double_t,
  &_swigt__p_GPS_SolverOptionsT_double_t,
  &_swigt__p_GPS_SolverOptions_CommonT_double_t,
  &_swigt__p_GPS_SolverT_double_t,
  &_swigt__p_GPS_Solver_GeneralOptionsT_double_t,
  &_swigt__p_GPS_SpaceNodeT_double_t,
  &_swigt__p_GPS_SpaceNodeT_double_t__Ionospheric_UTC_Parameters,
  &_swigt__p_GPS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris,
  &_swigt__p_GPS_TimeT_double_t,
  &_swigt__p_GPS_TimeT_double_t__leap_second_event_t,
  &_swigt__p_GPS_TimeT_double_t__leap_year_prop_res_t,
  &_swigt__p_GPS_User_PVTT_double_t,
  &_swigt__p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,
  &_swigt__p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,
  &_swigt__p_MatrixViewBaseT_t,
  &_swigt__p_MatrixViewFilterT_MatrixViewBaseT_t_t,
  &_swigt__p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,
  &_swigt__p_RINEX_ObservationT_double_t,
  &_swigt__p_SBAS_EphemerisT_double_t,
  &_swigt__p_SBAS_SolverOptionsT_double_t,
  &_swigt__p_SBAS_SpaceNodeT_double_t,
  &_swigt__p_SBAS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris,
  &_swigt__p_System_ENUT_double_WGS84_t,
  &_swigt__p_System_LLHT_double_WGS84_t,
  &_swigt__p_System_XYZT_double_WGS84_t,
  &_swigt__p_available_satellites_t,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_enu_t,
  &_swigt__p_float_t,
  &_swigt__p_gps_space_node_t,
  &_swigt__p_gps_time_t,
  &_swigt__p_int,
  &_swigt__p_int_t,
  &_swigt__p_llh_t,
  &_swigt__p_p_GPS_Solver_RAIM_LSRT_double_GPS_Solver_Base_DebugT_double_GPS_Solver_BaseT_double_t_t_t__user_pvt_t__detection_t,
  &_swigt__p_p_GPS_Solver_RAIM_LSRT_double_GPS_Solver_Base_DebugT_double_GPS_Solver_BaseT_double_t_t_t__user_pvt_t__exclusion_t,
  &_swigt__p_range_correction_list_t,
  &_swigt__p_s16_t,
  &_swigt__p_s32_t,
  &_swigt__p_s8_t,
  &_swigt__p_satellites_t,
  &_swigt__p_self_t,
  &_swigt__p_std__vectorT_std__pairT_int_SBAS_SpaceNodeT_double_t__Satellite_const_p_t_t,
  &_swigt__p_swig__GC_VALUE,
  &_swigt__p_u16_t,
  &_swigt__p_u32_t,
  &_swigt__p_u8_t,
  &_swigt__p_uint_t,
  &_swigt__p_xyz_t,
};

static swig_cast_info _swigc__System_LLHT_double_WGS84_t[] = {  {&_swigt__System_LLHT_double_WGS84_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__System_XYZT_double_WGS84_t[] = {  {&_swigt__System_XYZT_double_WGS84_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComplexT_double_t[] = {  {&_swigt__p_ComplexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GPS_EphemerisT_double_t[] = {  {&_swigt__p_GPS_EphemerisT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GPS_Ionospheric_UTC_ParametersT_double_t[] = {  {&_swigt__p_GPS_Ionospheric_UTC_ParametersT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GPS_MeasurementT_double_t[] = {  {&_swigt__p_GPS_MeasurementT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GPS_SolverOptionsT_double_t[] = {  {&_swigt__p_GPS_SolverOptionsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GPS_SolverOptions_CommonT_double_t[] = {  {&_swigt__p_GPS_SolverOptions_CommonT_double_t, 0, 0, 0},  {&_swigt__p_GPS_SolverOptionsT_double_t, _p_GPS_SolverOptionsT_double_tTo_p_GPS_SolverOptions_CommonT_double_t, 0, 0},  {&_swigt__p_SBAS_SolverOptionsT_double_t, _p_SBAS_SolverOptionsT_double_tTo_p_GPS_SolverOptions_CommonT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GPS_SolverT_double_t[] = {  {&_swigt__p_GPS_SolverT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GPS_Solver_GeneralOptionsT_double_t[] = {  {&_swigt__p_GPS_Solver_GeneralOptionsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GPS_SpaceNodeT_double_t[] = {  {&_swigt__p_GPS_SpaceNodeT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GPS_SpaceNodeT_double_t__Ionospheric_UTC_Parameters[] = {  {&_swigt__p_GPS_Ionospheric_UTC_ParametersT_double_t, _p_GPS_Ionospheric_UTC_ParametersT_double_tTo_p_GPS_SpaceNodeT_double_t__Ionospheric_UTC_Parameters, 0, 0},  {&_swigt__p_GPS_SpaceNodeT_double_t__Ionospheric_UTC_Parameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GPS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris[] = {  {&_swigt__p_GPS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris, 0, 0, 0},  {&_swigt__p_GPS_EphemerisT_double_t, _p_GPS_EphemerisT_double_tTo_p_GPS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GPS_TimeT_double_t[] = {  {&_swigt__p_GPS_TimeT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GPS_TimeT_double_t__leap_second_event_t[] = {  {&_swigt__p_GPS_TimeT_double_t__leap_second_event_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GPS_TimeT_double_t__leap_year_prop_res_t[] = {  {&_swigt__p_GPS_TimeT_double_t__leap_year_prop_res_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GPS_User_PVTT_double_t[] = {  {&_swigt__p_GPS_User_PVTT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t[] = {  {&_swigt__p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t[] = {  {&_swigt__p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixViewBaseT_t[] = {  {&_swigt__p_MatrixViewBaseT_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixViewFilterT_MatrixViewBaseT_t_t[] = {  {&_swigt__p_MatrixViewFilterT_MatrixViewBaseT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t[] = {  {&_swigt__p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0, 0, 0},  {&_swigt__p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, _p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_tTo_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RINEX_ObservationT_double_t[] = {  {&_swigt__p_RINEX_ObservationT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SBAS_EphemerisT_double_t[] = {  {&_swigt__p_SBAS_EphemerisT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SBAS_SolverOptionsT_double_t[] = {  {&_swigt__p_SBAS_SolverOptionsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SBAS_SpaceNodeT_double_t[] = {  {&_swigt__p_SBAS_SpaceNodeT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SBAS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris[] = {  {&_swigt__p_SBAS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris, 0, 0, 0},  {&_swigt__p_SBAS_EphemerisT_double_t, _p_SBAS_EphemerisT_double_tTo_p_SBAS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_System_ENUT_double_WGS84_t[] = {  {&_swigt__p_System_ENUT_double_WGS84_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_System_LLHT_double_WGS84_t[] = {  {&_swigt__p_System_LLHT_double_WGS84_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_System_XYZT_double_WGS84_t[] = {  {&_swigt__p_System_XYZT_double_WGS84_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_available_satellites_t[] = {  {&_swigt__p_available_satellites_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_enu_t[] = {  {&_swigt__p_enu_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float_t[] = {  {&_swigt__p_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gps_space_node_t[] = {  {&_swigt__p_gps_space_node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gps_time_t[] = {  {&_swigt__p_gps_time_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int_t[] = {  {&_swigt__p_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llh_t[] = {  {&_swigt__p_llh_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_GPS_Solver_RAIM_LSRT_double_GPS_Solver_Base_DebugT_double_GPS_Solver_BaseT_double_t_t_t__user_pvt_t__detection_t[] = {  {&_swigt__p_p_GPS_Solver_RAIM_LSRT_double_GPS_Solver_Base_DebugT_double_GPS_Solver_BaseT_double_t_t_t__user_pvt_t__detection_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_GPS_Solver_RAIM_LSRT_double_GPS_Solver_Base_DebugT_double_GPS_Solver_BaseT_double_t_t_t__user_pvt_t__exclusion_t[] = {  {&_swigt__p_p_GPS_Solver_RAIM_LSRT_double_GPS_Solver_Base_DebugT_double_GPS_Solver_BaseT_double_t_t_t__user_pvt_t__exclusion_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_range_correction_list_t[] = {  {&_swigt__p_range_correction_list_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_s16_t[] = {  {&_swigt__p_s16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_s32_t[] = {  {&_swigt__p_s32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_s8_t[] = {  {&_swigt__p_s8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_satellites_t[] = {  {&_swigt__p_satellites_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_self_t[] = {  {&_swigt__p_self_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_int_SBAS_SpaceNodeT_double_t__Satellite_const_p_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_int_SBAS_SpaceNodeT_double_t__Satellite_const_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__GC_VALUE[] = {  {&_swigt__p_swig__GC_VALUE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_u16_t[] = {  {&_swigt__p_u16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_u32_t[] = {  {&_swigt__p_u32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_u8_t[] = {  {&_swigt__p_u8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint_t[] = {  {&_swigt__p_uint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xyz_t[] = {  {&_swigt__p_xyz_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__System_LLHT_double_WGS84_t,
  _swigc__System_XYZT_double_WGS84_t,
  _swigc__p_ComplexT_double_t,
  _swigc__p_GPS_EphemerisT_double_t,
  _swigc__p_GPS_Ionospheric_UTC_ParametersT_double_t,
  _swigc__p_GPS_MeasurementT_double_t,
  _swigc__p_GPS_SolverOptionsT_double_t,
  _swigc__p_GPS_SolverOptions_CommonT_double_t,
  _swigc__p_GPS_SolverT_double_t,
  _swigc__p_GPS_Solver_GeneralOptionsT_double_t,
  _swigc__p_GPS_SpaceNodeT_double_t,
  _swigc__p_GPS_SpaceNodeT_double_t__Ionospheric_UTC_Parameters,
  _swigc__p_GPS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris,
  _swigc__p_GPS_TimeT_double_t,
  _swigc__p_GPS_TimeT_double_t__leap_second_event_t,
  _swigc__p_GPS_TimeT_double_t__leap_year_prop_res_t,
  _swigc__p_GPS_User_PVTT_double_t,
  _swigc__p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,
  _swigc__p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,
  _swigc__p_MatrixViewBaseT_t,
  _swigc__p_MatrixViewFilterT_MatrixViewBaseT_t_t,
  _swigc__p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,
  _swigc__p_RINEX_ObservationT_double_t,
  _swigc__p_SBAS_EphemerisT_double_t,
  _swigc__p_SBAS_SolverOptionsT_double_t,
  _swigc__p_SBAS_SpaceNodeT_double_t,
  _swigc__p_SBAS_SpaceNodeT_double_t__SatelliteProperties__Ephemeris,
  _swigc__p_System_ENUT_double_WGS84_t,
  _swigc__p_System_LLHT_double_WGS84_t,
  _swigc__p_System_XYZT_double_WGS84_t,
  _swigc__p_available_satellites_t,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_enu_t,
  _swigc__p_float_t,
  _swigc__p_gps_space_node_t,
  _swigc__p_gps_time_t,
  _swigc__p_int,
  _swigc__p_int_t,
  _swigc__p_llh_t,
  _swigc__p_p_GPS_Solver_RAIM_LSRT_double_GPS_Solver_Base_DebugT_double_GPS_Solver_BaseT_double_t_t_t__user_pvt_t__detection_t,
  _swigc__p_p_GPS_Solver_RAIM_LSRT_double_GPS_Solver_Base_DebugT_double_GPS_Solver_BaseT_double_t_t_t__user_pvt_t__exclusion_t,
  _swigc__p_range_correction_list_t,
  _swigc__p_s16_t,
  _swigc__p_s32_t,
  _swigc__p_s8_t,
  _swigc__p_satellites_t,
  _swigc__p_self_t,
  _swigc__p_std__vectorT_std__pairT_int_SBAS_SpaceNodeT_double_t__Satellite_const_p_t_t,
  _swigc__p_swig__GC_VALUE,
  _swigc__p_u16_t,
  _swigc__p_u32_t,
  _swigc__p_u8_t,
  _swigc__p_uint_t,
  _swigc__p_xyz_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_GPS(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mGPS = rb_define_module("GPS_PVT");
  mGPS = rb_define_module_under(mGPS, "GPS");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  SwigClassGC_VALUE.klass = rb_define_class_under(mGPS, "GC_VALUE", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__GC_VALUE, (void *) &SwigClassGC_VALUE);
  rb_undef_alloc_func(SwigClassGC_VALUE.klass);
  rb_define_method(SwigClassGC_VALUE.klass, "inspect", VALUEFUNC(_wrap_GC_VALUE_inspect), -1);
  rb_define_method(SwigClassGC_VALUE.klass, "to_s", VALUEFUNC(_wrap_GC_VALUE_to_s), -1);
  SwigClassGC_VALUE.mark = 0;
  SwigClassGC_VALUE.trackObjects = 0;
  
  swig::SwigGCReferences::initialize();
  
  rb_require("gps_pvt/SylphideMath");
  rb_require("gps_pvt/Coordinate");
  rb_define_const(mGPS, "GPS_SC2RAD", SWIG_From_double(static_cast< double >(3.1415926535898)));
  
  SwigClassTime.klass = rb_define_class_under(mGPS, "Time", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_GPS_TimeT_double_t, (void *) &SwigClassTime);
  rb_define_alloc_func(SwigClassTime.klass, _wrap_Time_allocate);
  rb_define_method(SwigClassTime.klass, "initialize", VALUEFUNC(_wrap_new_Time), -1);
  rb_define_const(SwigClassTime.klass, "Seconds_day", SWIG_From_unsigned_SS_int(static_cast< unsigned int >(GPS_Time< double >::seconds_day)));
  rb_define_const(SwigClassTime.klass, "Seconds_week", SWIG_From_unsigned_SS_int(static_cast< unsigned int >(GPS_Time< double >::seconds_week)));
  rb_define_singleton_method(SwigClassTime.klass, "days_of_month", VALUEFUNC(_wrap_Time_days_of_month_get), 0);
  rb_define_singleton_method(SwigClassTime.klass, "is_leap_year", VALUEFUNC(_wrap_Time_is_leap_year), -1);
  rb_define_singleton_method(SwigClassTime.klass, "leap_year_prop", VALUEFUNC(_wrap_Time_leap_year_prop), -1);
  rb_define_method(SwigClassTime.klass, "week=", VALUEFUNC(_wrap_Time_week_set), -1);
  rb_define_method(SwigClassTime.klass, "week", VALUEFUNC(_wrap_Time_week_get), -1);
  rb_define_method(SwigClassTime.klass, "seconds=", VALUEFUNC(_wrap_Time_seconds_set), -1);
  rb_define_method(SwigClassTime.klass, "seconds", VALUEFUNC(_wrap_Time_seconds_get), -1);
  rb_define_singleton_method(SwigClassTime.klass, "now", VALUEFUNC(_wrap_Time_now), -1);
  rb_define_method(SwigClassTime.klass, "serialize", VALUEFUNC(_wrap_Time_serialize), -1);
  rb_define_method(SwigClassTime.klass, "+", VALUEFUNC(_wrap_Time___add__), -1);
  rb_define_method(SwigClassTime.klass, "-", VALUEFUNC(_wrap_Time___sub__), -1);
  rb_define_method(SwigClassTime.klass, "<", VALUEFUNC(_wrap_Time___lt__), -1);
  rb_define_method(SwigClassTime.klass, ">", VALUEFUNC(_wrap_Time___gt__), -1);
  rb_define_method(SwigClassTime.klass, "==", VALUEFUNC(_wrap_Time___eq__), -1);
  rb_define_method(SwigClassTime.klass, "<=", VALUEFUNC(_wrap_Time___le__), -1);
  rb_define_method(SwigClassTime.klass, ">=", VALUEFUNC(_wrap_Time___ge__), -1);
  rb_define_method(SwigClassTime.klass, "c_tm", VALUEFUNC(_wrap_Time_c_tm), -1);
  rb_define_method(SwigClassTime.klass, "year", VALUEFUNC(_wrap_Time_year), -1);
  rb_define_method(SwigClassTime.klass, "interval", VALUEFUNC(_wrap_Time_interval), -1);
  rb_define_singleton_method(SwigClassTime.klass, "leap_second_events", VALUEFUNC(_wrap_Time_leap_second_events_get), 0);
  rb_define_singleton_method(SwigClassTime.klass, "guess_leap_seconds", VALUEFUNC(_wrap_Time_guess_leap_seconds), -1);
  rb_define_method(SwigClassTime.klass, "to_a", VALUEFUNC(_wrap_Time_to_a), -1);
  rb_define_method(SwigClassTime.klass, "<=>", VALUEFUNC(_wrap_Time___cmp__), -1);
  SwigClassTime.mark = 0;
  SwigClassTime.destroy = (void (*)(void *)) free_GPS_Time_Sl_double_Sg_;
  SwigClassTime.trackObjects = 0;
  
  SwigClassSpaceNode.klass = rb_define_class_under(mGPS, "SpaceNode", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_GPS_SpaceNodeT_double_t, (void *) &SwigClassSpaceNode);
  rb_define_alloc_func(SwigClassSpaceNode.klass, _wrap_SpaceNode_allocate);
  rb_define_method(SwigClassSpaceNode.klass, "initialize", VALUEFUNC(_wrap_new_SpaceNode), -1);
  rb_define_singleton_method(SwigClassSpaceNode.klass, "light_speed", VALUEFUNC(_wrap_SpaceNode_light_speed_get), 0);
  rb_define_singleton_method(SwigClassSpaceNode.klass, "L1_Frequency", VALUEFUNC(_wrap_SpaceNode_L1_Frequency_get), 0);
  rb_define_singleton_method(SwigClassSpaceNode.klass, "L1_WaveLength", VALUEFUNC(_wrap_SpaceNode_L1_WaveLength), -1);
  rb_define_singleton_method(SwigClassSpaceNode.klass, "SC2RAD", VALUEFUNC(_wrap_SpaceNode_SC2RAD_get), 0);
  rb_define_singleton_method(SwigClassSpaceNode.klass, "L2_Frequency", VALUEFUNC(_wrap_SpaceNode_L2_Frequency_get), 0);
  rb_define_singleton_method(SwigClassSpaceNode.klass, "L2_WaveLength", VALUEFUNC(_wrap_SpaceNode_L2_WaveLength), -1);
  rb_define_singleton_method(SwigClassSpaceNode.klass, "gamma_L1_L2", VALUEFUNC(_wrap_SpaceNode_gamma_L1_L2_get), 0);
  rb_define_singleton_method(SwigClassSpaceNode.klass, "gamma_per_L1", VALUEFUNC(_wrap_SpaceNode_gamma_per_L1), -1);
  rb_define_method(SwigClassSpaceNode.klass, "iono_utc", VALUEFUNC(_wrap_SpaceNode_iono_utc), -1);
  rb_define_method(SwigClassSpaceNode.klass, "is_valid_iono", VALUEFUNC(_wrap_SpaceNode_is_valid_iono), -1);
  rb_define_method(SwigClassSpaceNode.klass, "is_valid_utc", VALUEFUNC(_wrap_SpaceNode_is_valid_utc), -1);
  rb_define_method(SwigClassSpaceNode.klass, "is_valid_iono_utc", VALUEFUNC(_wrap_SpaceNode_is_valid_iono_utc), -1);
  rb_define_method(SwigClassSpaceNode.klass, "update_iono_utc", VALUEFUNC(_wrap_SpaceNode_update_iono_utc), -1);
  rb_define_method(SwigClassSpaceNode.klass, "has_satellite", VALUEFUNC(_wrap_SpaceNode_has_satellite), -1);
  rb_define_method(SwigClassSpaceNode.klass, "update_all_ephemeris", VALUEFUNC(_wrap_SpaceNode_update_all_ephemeris), -1);
  rb_define_method(SwigClassSpaceNode.klass, "merge", VALUEFUNC(_wrap_SpaceNode_merge), -1);
  rb_define_singleton_method(SwigClassSpaceNode.klass, "pierce_point", VALUEFUNC(_wrap_SpaceNode_pierce_point), -1);
  rb_define_singleton_method(SwigClassSpaceNode.klass, "slant_factor", VALUEFUNC(_wrap_SpaceNode_slant_factor), -1);
  rb_define_singleton_method(SwigClassSpaceNode.klass, "tec2delay", VALUEFUNC(_wrap_SpaceNode_tec2delay), -1);
  rb_define_method(SwigClassSpaceNode.klass, "iono_correction", VALUEFUNC(_wrap_SpaceNode_iono_correction), -1);
  rb_define_singleton_method(SwigClassSpaceNode.klass, "tropo_correction_zenith_hydrostatic_Saastamoinen", VALUEFUNC(_wrap_SpaceNode_tropo_correction_zenith_hydrostatic_Saastamoinen), -1);
  rb_define_singleton_method(SwigClassSpaceNode.klass, "tropo_correction", VALUEFUNC(_wrap_SpaceNode_tropo_correction), -1);
  rb_define_method(SwigClassSpaceNode.klass, "register_ephemeris", VALUEFUNC(_wrap_SpaceNode_register_ephemeris), -1);
  rb_define_method(SwigClassSpaceNode.klass, "ephemeris", VALUEFUNC(_wrap_SpaceNode_ephemeris), -1);
  rb_define_method(SwigClassSpaceNode.klass, "read", VALUEFUNC(_wrap_SpaceNode_read), -1);
  SwigClassSpaceNode.mark = 0;
  SwigClassSpaceNode.destroy = (void (*)(void *)) free_GPS_SpaceNode_Sl_double_Sg_;
  SwigClassSpaceNode.trackObjects = 0;
  
  SwigClassIonospheric_UTC_Parameters.klass = rb_define_class_under(mGPS, "Ionospheric_UTC_Parameters", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_GPS_Ionospheric_UTC_ParametersT_double_t, (void *) &SwigClassIonospheric_UTC_Parameters);
  rb_define_alloc_func(SwigClassIonospheric_UTC_Parameters.klass, _wrap_Ionospheric_UTC_Parameters_allocate);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "initialize", VALUEFUNC(_wrap_new_Ionospheric_UTC_Parameters), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "alpha=", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_alphae___), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "alpha", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_alpha), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "beta=", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_betae___), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "beta", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_beta), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "A1=", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_A1e___), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "A1", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_A1), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "A0=", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_A0e___), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "A0", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_A0), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "t_ot=", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_t_ote___), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "t_ot", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_t_ot), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "WN_t=", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_WN_te___), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "WN_t", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_WN_t), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "delta_t_LS=", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_delta_t_LSe___), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "delta_t_LS", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_delta_t_LS), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "WN_LSF=", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_WN_LSFe___), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "WN_LSF", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_WN_LSF), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "DN=", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_DNe___), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "DN", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_DN), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "delta_t_LSF=", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_delta_t_LSFe___), -1);
  rb_define_method(SwigClassIonospheric_UTC_Parameters.klass, "delta_t_LSF", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_delta_t_LSF), -1);
  rb_define_singleton_method(SwigClassIonospheric_UTC_Parameters.klass, "parse", VALUEFUNC(_wrap_Ionospheric_UTC_Parameters_parse), -1);
  SwigClassIonospheric_UTC_Parameters.mark = 0;
  SwigClassIonospheric_UTC_Parameters.destroy = (void (*)(void *)) free_GPS_Ionospheric_UTC_Parameters_Sl_double_Sg_;
  SwigClassIonospheric_UTC_Parameters.trackObjects = 0;
  
  SwigClassEphemeris.klass = rb_define_class_under(mGPS, "Ephemeris", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_GPS_EphemerisT_double_t, (void *) &SwigClassEphemeris);
  rb_define_alloc_func(SwigClassEphemeris.klass, _wrap_Ephemeris_allocate);
  rb_define_method(SwigClassEphemeris.klass, "initialize", VALUEFUNC(_wrap_new_Ephemeris), -1);
  rb_define_method(SwigClassEphemeris.klass, "iode_subframe3=", VALUEFUNC(_wrap_Ephemeris_iode_subframe3_set), -1);
  rb_define_method(SwigClassEphemeris.klass, "iode_subframe3", VALUEFUNC(_wrap_Ephemeris_iode_subframe3_get), -1);
  rb_define_method(SwigClassEphemeris.klass, "invalidate", VALUEFUNC(_wrap_Ephemeris_invalidate), -1);
  rb_define_method(SwigClassEphemeris.klass, "consistent?", VALUEFUNC(_wrap_Ephemeris_consistentq___), -1);
  rb_define_method(SwigClassEphemeris.klass, "svid=", VALUEFUNC(_wrap_Ephemeris_svide___), -1);
  rb_define_method(SwigClassEphemeris.klass, "svid", VALUEFUNC(_wrap_Ephemeris_svid), -1);
  rb_define_method(SwigClassEphemeris.klass, "WN=", VALUEFUNC(_wrap_Ephemeris_WNe___), -1);
  rb_define_method(SwigClassEphemeris.klass, "WN", VALUEFUNC(_wrap_Ephemeris_WN), -1);
  rb_define_method(SwigClassEphemeris.klass, "URA=", VALUEFUNC(_wrap_Ephemeris_URAe___), -1);
  rb_define_method(SwigClassEphemeris.klass, "URA", VALUEFUNC(_wrap_Ephemeris_URA), -1);
  rb_define_method(SwigClassEphemeris.klass, "SV_health=", VALUEFUNC(_wrap_Ephemeris_SV_healthe___), -1);
  rb_define_method(SwigClassEphemeris.klass, "SV_health", VALUEFUNC(_wrap_Ephemeris_SV_health), -1);
  rb_define_method(SwigClassEphemeris.klass, "iodc=", VALUEFUNC(_wrap_Ephemeris_iodce___), -1);
  rb_define_method(SwigClassEphemeris.klass, "iodc", VALUEFUNC(_wrap_Ephemeris_iodc), -1);
  rb_define_method(SwigClassEphemeris.klass, "t_GD=", VALUEFUNC(_wrap_Ephemeris_t_GDe___), -1);
  rb_define_method(SwigClassEphemeris.klass, "t_GD", VALUEFUNC(_wrap_Ephemeris_t_GD), -1);
  rb_define_method(SwigClassEphemeris.klass, "t_oc=", VALUEFUNC(_wrap_Ephemeris_t_oce___), -1);
  rb_define_method(SwigClassEphemeris.klass, "t_oc", VALUEFUNC(_wrap_Ephemeris_t_oc), -1);
  rb_define_method(SwigClassEphemeris.klass, "a_f2=", VALUEFUNC(_wrap_Ephemeris_a_f2e___), -1);
  rb_define_method(SwigClassEphemeris.klass, "a_f2", VALUEFUNC(_wrap_Ephemeris_a_f2), -1);
  rb_define_method(SwigClassEphemeris.klass, "a_f1=", VALUEFUNC(_wrap_Ephemeris_a_f1e___), -1);
  rb_define_method(SwigClassEphemeris.klass, "a_f1", VALUEFUNC(_wrap_Ephemeris_a_f1), -1);
  rb_define_method(SwigClassEphemeris.klass, "a_f0=", VALUEFUNC(_wrap_Ephemeris_a_f0e___), -1);
  rb_define_method(SwigClassEphemeris.klass, "a_f0", VALUEFUNC(_wrap_Ephemeris_a_f0), -1);
  rb_define_method(SwigClassEphemeris.klass, "iode=", VALUEFUNC(_wrap_Ephemeris_iodee___), -1);
  rb_define_method(SwigClassEphemeris.klass, "iode", VALUEFUNC(_wrap_Ephemeris_iode), -1);
  rb_define_method(SwigClassEphemeris.klass, "c_rs=", VALUEFUNC(_wrap_Ephemeris_c_rse___), -1);
  rb_define_method(SwigClassEphemeris.klass, "c_rs", VALUEFUNC(_wrap_Ephemeris_c_rs), -1);
  rb_define_method(SwigClassEphemeris.klass, "delta_n=", VALUEFUNC(_wrap_Ephemeris_delta_ne___), -1);
  rb_define_method(SwigClassEphemeris.klass, "delta_n", VALUEFUNC(_wrap_Ephemeris_delta_n), -1);
  rb_define_method(SwigClassEphemeris.klass, "M0=", VALUEFUNC(_wrap_Ephemeris_M0e___), -1);
  rb_define_method(SwigClassEphemeris.klass, "M0", VALUEFUNC(_wrap_Ephemeris_M0), -1);
  rb_define_method(SwigClassEphemeris.klass, "c_uc=", VALUEFUNC(_wrap_Ephemeris_c_uce___), -1);
  rb_define_method(SwigClassEphemeris.klass, "c_uc", VALUEFUNC(_wrap_Ephemeris_c_uc), -1);
  rb_define_method(SwigClassEphemeris.klass, "e=", VALUEFUNC(_wrap_Ephemeris_ee___), -1);
  rb_define_method(SwigClassEphemeris.klass, "e", VALUEFUNC(_wrap_Ephemeris_e), -1);
  rb_define_method(SwigClassEphemeris.klass, "c_us=", VALUEFUNC(_wrap_Ephemeris_c_use___), -1);
  rb_define_method(SwigClassEphemeris.klass, "c_us", VALUEFUNC(_wrap_Ephemeris_c_us), -1);
  rb_define_method(SwigClassEphemeris.klass, "sqrt_A=", VALUEFUNC(_wrap_Ephemeris_sqrt_Ae___), -1);
  rb_define_method(SwigClassEphemeris.klass, "sqrt_A", VALUEFUNC(_wrap_Ephemeris_sqrt_A), -1);
  rb_define_method(SwigClassEphemeris.klass, "t_oe=", VALUEFUNC(_wrap_Ephemeris_t_oee___), -1);
  rb_define_method(SwigClassEphemeris.klass, "t_oe", VALUEFUNC(_wrap_Ephemeris_t_oe), -1);
  rb_define_method(SwigClassEphemeris.klass, "fit_interval=", VALUEFUNC(_wrap_Ephemeris_fit_intervale___), -1);
  rb_define_method(SwigClassEphemeris.klass, "fit_interval", VALUEFUNC(_wrap_Ephemeris_fit_interval), -1);
  rb_define_method(SwigClassEphemeris.klass, "c_ic=", VALUEFUNC(_wrap_Ephemeris_c_ice___), -1);
  rb_define_method(SwigClassEphemeris.klass, "c_ic", VALUEFUNC(_wrap_Ephemeris_c_ic), -1);
  rb_define_method(SwigClassEphemeris.klass, "Omega0=", VALUEFUNC(_wrap_Ephemeris_Omega0e___), -1);
  rb_define_method(SwigClassEphemeris.klass, "Omega0", VALUEFUNC(_wrap_Ephemeris_Omega0), -1);
  rb_define_method(SwigClassEphemeris.klass, "c_is=", VALUEFUNC(_wrap_Ephemeris_c_ise___), -1);
  rb_define_method(SwigClassEphemeris.klass, "c_is", VALUEFUNC(_wrap_Ephemeris_c_is), -1);
  rb_define_method(SwigClassEphemeris.klass, "i0=", VALUEFUNC(_wrap_Ephemeris_i0e___), -1);
  rb_define_method(SwigClassEphemeris.klass, "i0", VALUEFUNC(_wrap_Ephemeris_i0), -1);
  rb_define_method(SwigClassEphemeris.klass, "c_rc=", VALUEFUNC(_wrap_Ephemeris_c_rce___), -1);
  rb_define_method(SwigClassEphemeris.klass, "c_rc", VALUEFUNC(_wrap_Ephemeris_c_rc), -1);
  rb_define_method(SwigClassEphemeris.klass, "omega=", VALUEFUNC(_wrap_Ephemeris_omegae___), -1);
  rb_define_method(SwigClassEphemeris.klass, "omega", VALUEFUNC(_wrap_Ephemeris_omega), -1);
  rb_define_method(SwigClassEphemeris.klass, "dot_Omega0=", VALUEFUNC(_wrap_Ephemeris_dot_Omega0e___), -1);
  rb_define_method(SwigClassEphemeris.klass, "dot_Omega0", VALUEFUNC(_wrap_Ephemeris_dot_Omega0), -1);
  rb_define_method(SwigClassEphemeris.klass, "dot_i0=", VALUEFUNC(_wrap_Ephemeris_dot_i0e___), -1);
  rb_define_method(SwigClassEphemeris.klass, "dot_i0", VALUEFUNC(_wrap_Ephemeris_dot_i0), -1);
  rb_define_method(SwigClassEphemeris.klass, "parse", VALUEFUNC(_wrap_Ephemeris_parse), -1);
  rb_define_method(SwigClassEphemeris.klass, "constellation", VALUEFUNC(_wrap_Ephemeris_constellation), -1);
  SwigClassEphemeris.mark = 0;
  SwigClassEphemeris.destroy = (void (*)(void *)) free_GPS_Ephemeris_Sl_double_Sg_;
  SwigClassEphemeris.trackObjects = 0;
  
  SwigClassPVT.klass = rb_define_class_under(mGPS, "PVT", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_GPS_User_PVTT_double_t, (void *) &SwigClassPVT);
  rb_define_alloc_func(SwigClassPVT.klass, _wrap_PVT_allocate);
  rb_define_method(SwigClassPVT.klass, "initialize", VALUEFUNC(_wrap_new_PVT), -1);
  rb_define_const(SwigClassPVT.klass, "ERROR_NO", SWIG_From_int(static_cast< int >(GPS_User_PVT< double >::ERROR_NO)));
  rb_define_const(SwigClassPVT.klass, "ERROR_UNSOLVED", SWIG_From_int(static_cast< int >(GPS_User_PVT< double >::ERROR_UNSOLVED)));
  rb_define_const(SwigClassPVT.klass, "ERROR_INVALID_IONO_MODEL", SWIG_From_int(static_cast< int >(GPS_User_PVT< double >::ERROR_INVALID_IONO_MODEL)));
  rb_define_const(SwigClassPVT.klass, "ERROR_INSUFFICIENT_SATELLITES", SWIG_From_int(static_cast< int >(GPS_User_PVT< double >::ERROR_INSUFFICIENT_SATELLITES)));
  rb_define_const(SwigClassPVT.klass, "ERROR_POSITION_LS", SWIG_From_int(static_cast< int >(GPS_User_PVT< double >::ERROR_POSITION_LS)));
  rb_define_const(SwigClassPVT.klass, "ERROR_POSITION_NOT_CONVERGED", SWIG_From_int(static_cast< int >(GPS_User_PVT< double >::ERROR_POSITION_NOT_CONVERGED)));
  rb_define_const(SwigClassPVT.klass, "ERROR_DOP", SWIG_From_int(static_cast< int >(GPS_User_PVT< double >::ERROR_DOP)));
  rb_define_const(SwigClassPVT.klass, "ERROR_VELOCITY_SKIPPED", SWIG_From_int(static_cast< int >(GPS_User_PVT< double >::ERROR_VELOCITY_SKIPPED)));
  rb_define_const(SwigClassPVT.klass, "ERROR_VELOCITY_INSUFFICIENT_SATELLITES", SWIG_From_int(static_cast< int >(GPS_User_PVT< double >::ERROR_VELOCITY_INSUFFICIENT_SATELLITES)));
  rb_define_const(SwigClassPVT.klass, "ERROR_VELOCITY_LS", SWIG_From_int(static_cast< int >(GPS_User_PVT< double >::ERROR_VELOCITY_LS)));
  rb_define_method(SwigClassPVT.klass, "error_code", VALUEFUNC(_wrap_PVT_error_code), -1);
  rb_define_method(SwigClassPVT.klass, "receiver_time", VALUEFUNC(_wrap_PVT_receiver_time), -1);
  rb_define_method(SwigClassPVT.klass, "xyz", VALUEFUNC(_wrap_PVT_xyz), -1);
  rb_define_method(SwigClassPVT.klass, "llh", VALUEFUNC(_wrap_PVT_llh), -1);
  rb_define_method(SwigClassPVT.klass, "receiver_error", VALUEFUNC(_wrap_PVT_receiver_error), -1);
  rb_define_method(SwigClassPVT.klass, "velocity", VALUEFUNC(_wrap_PVT_velocity), -1);
  rb_define_method(SwigClassPVT.klass, "receiver_error_rate", VALUEFUNC(_wrap_PVT_receiver_error_rate), -1);
  rb_define_method(SwigClassPVT.klass, "gdop", VALUEFUNC(_wrap_PVT_gdop), -1);
  rb_define_method(SwigClassPVT.klass, "pdop", VALUEFUNC(_wrap_PVT_pdop), -1);
  rb_define_method(SwigClassPVT.klass, "hdop", VALUEFUNC(_wrap_PVT_hdop), -1);
  rb_define_method(SwigClassPVT.klass, "vdop", VALUEFUNC(_wrap_PVT_vdop), -1);
  rb_define_method(SwigClassPVT.klass, "tdop", VALUEFUNC(_wrap_PVT_tdop), -1);
  rb_define_method(SwigClassPVT.klass, "used_satellites", VALUEFUNC(_wrap_PVT_used_satellites), -1);
  rb_define_method(SwigClassPVT.klass, "used_satellite_list", VALUEFUNC(_wrap_PVT_used_satellite_list), -1);
  rb_define_method(SwigClassPVT.klass, "position_solved?", VALUEFUNC(_wrap_PVT_position_solvedq___), -1);
  rb_define_method(SwigClassPVT.klass, "velocity_solved?", VALUEFUNC(_wrap_PVT_velocity_solvedq___), -1);
  rb_define_method(SwigClassPVT.klass, "G", VALUEFUNC(_wrap_PVT_G), -1);
  rb_define_method(SwigClassPVT.klass, "W", VALUEFUNC(_wrap_PVT_W), -1);
  rb_define_method(SwigClassPVT.klass, "delta_r", VALUEFUNC(_wrap_PVT_delta_r), -1);
  rb_define_method(SwigClassPVT.klass, "G_enu", VALUEFUNC(_wrap_PVT_G_enu), -1);
  rb_define_method(SwigClassPVT.klass, "C", VALUEFUNC(_wrap_PVT_C), -1);
  rb_define_method(SwigClassPVT.klass, "C_enu", VALUEFUNC(_wrap_PVT_C_enu), -1);
  rb_define_method(SwigClassPVT.klass, "S", VALUEFUNC(_wrap_PVT_S), -1);
  rb_define_method(SwigClassPVT.klass, "S_enu", VALUEFUNC(_wrap_PVT_S_enu), -1);
  rb_define_method(SwigClassPVT.klass, "slope_HV", VALUEFUNC(_wrap_PVT_slope_HV), -1);
  rb_define_method(SwigClassPVT.klass, "slope_HV_enu", VALUEFUNC(_wrap_PVT_slope_HV_enu), -1);
  rb_define_method(SwigClassPVT.klass, "fd", VALUEFUNC(_wrap_PVT_fd), -1);
  rb_define_method(SwigClassPVT.klass, "fde_min", VALUEFUNC(_wrap_PVT_fde_min), -1);
  rb_define_method(SwigClassPVT.klass, "fde_2nd", VALUEFUNC(_wrap_PVT_fde_2nd), -1);
  SwigClassPVT.mark = 0;
  SwigClassPVT.destroy = (void (*)(void *)) free_GPS_User_PVT_Sl_double_Sg_;
  SwigClassPVT.trackObjects = 0;
  
  SwigClassMeasurement.klass = rb_define_class_under(mGPS, "Measurement", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_GPS_MeasurementT_double_t, (void *) &SwigClassMeasurement);
  rb_include_module(SwigClassMeasurement.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassMeasurement.klass, _wrap_Measurement_allocate);
  rb_define_method(SwigClassMeasurement.klass, "initialize", VALUEFUNC(_wrap_new_Measurement), -1);
  rb_define_const(SwigClassMeasurement.klass, "L1_PSEUDORANGE", SWIG_From_int(static_cast< int >(GPS_Measurement< double >::L1_PSEUDORANGE)));
  rb_define_const(SwigClassMeasurement.klass, "L1_DOPPLER", SWIG_From_int(static_cast< int >(GPS_Measurement< double >::L1_DOPPLER)));
  rb_define_const(SwigClassMeasurement.klass, "L1_CARRIER_PHASE", SWIG_From_int(static_cast< int >(GPS_Measurement< double >::L1_CARRIER_PHASE)));
  rb_define_const(SwigClassMeasurement.klass, "L1_RANGE_RATE", SWIG_From_int(static_cast< int >(GPS_Measurement< double >::L1_RANGE_RATE)));
  rb_define_const(SwigClassMeasurement.klass, "L1_PSEUDORANGE_SIGMA", SWIG_From_int(static_cast< int >(GPS_Measurement< double >::L1_PSEUDORANGE_SIGMA)));
  rb_define_const(SwigClassMeasurement.klass, "L1_DOPPLER_SIGMA", SWIG_From_int(static_cast< int >(GPS_Measurement< double >::L1_DOPPLER_SIGMA)));
  rb_define_const(SwigClassMeasurement.klass, "L1_CARRIER_PHASE_SIGMA", SWIG_From_int(static_cast< int >(GPS_Measurement< double >::L1_CARRIER_PHASE_SIGMA)));
  rb_define_const(SwigClassMeasurement.klass, "L1_RANGE_RATE_SIGMA", SWIG_From_int(static_cast< int >(GPS_Measurement< double >::L1_RANGE_RATE_SIGMA)));
  rb_define_const(SwigClassMeasurement.klass, "L1_SIGNAL_STRENGTH_dBHz", SWIG_From_int(static_cast< int >(GPS_Measurement< double >::L1_SIGNAL_STRENGTH_dBHz)));
  rb_define_const(SwigClassMeasurement.klass, "L1_LOCK_SEC", SWIG_From_int(static_cast< int >(GPS_Measurement< double >::L1_LOCK_SEC)));
  rb_define_const(SwigClassMeasurement.klass, "L1_FREQUENCY", SWIG_From_int(static_cast< int >(GPS_Measurement< double >::L1_FREQUENCY)));
  rb_define_const(SwigClassMeasurement.klass, "ITEMS_PREDEFINED", SWIG_From_int(static_cast< int >(GPS_Measurement< double >::ITEMS_PREDEFINED)));
  rb_define_method(SwigClassMeasurement.klass, "add", VALUEFUNC(_wrap_Measurement_add), -1);
  rb_define_method(SwigClassMeasurement.klass, "each", VALUEFUNC(_wrap_Measurement_each), -1);
  rb_define_method(SwigClassMeasurement.klass, "to_hash", VALUEFUNC(_wrap_Measurement_to_hash), -1);
  SwigClassMeasurement.mark = 0;
  SwigClassMeasurement.destroy = (void (*)(void *)) free_GPS_Measurement_Sl_double_Sg_;
  SwigClassMeasurement.trackObjects = 0;
  
  SwigClassSolverOptionsCommon.klass = rb_define_class_under(mGPS, "SolverOptionsCommon", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_GPS_SolverOptions_CommonT_double_t, (void *) &SwigClassSolverOptionsCommon);
  rb_undef_alloc_func(SwigClassSolverOptionsCommon.klass);
  rb_define_method(SwigClassSolverOptionsCommon.klass, "cast_general", VALUEFUNC(_wrap_SolverOptionsCommon_cast_general), -1);
  rb_define_method(SwigClassSolverOptionsCommon.klass, "elevation_mask=", VALUEFUNC(_wrap_SolverOptionsCommon_elevation_maske___), -1);
  rb_define_method(SwigClassSolverOptionsCommon.klass, "elevation_mask", VALUEFUNC(_wrap_SolverOptionsCommon_elevation_mask), -1);
  rb_define_method(SwigClassSolverOptionsCommon.klass, "residual_mask=", VALUEFUNC(_wrap_SolverOptionsCommon_residual_maske___), -1);
  rb_define_method(SwigClassSolverOptionsCommon.klass, "residual_mask", VALUEFUNC(_wrap_SolverOptionsCommon_residual_mask), -1);
  SwigClassSolverOptionsCommon.mark = 0;
  SwigClassSolverOptionsCommon.destroy = (void (*)(void *)) free_GPS_SolverOptions_Common_Sl_double_Sg_;
  SwigClassSolverOptionsCommon.trackObjects = 0;
  
  SwigClassSolverOptions.klass = rb_define_class_under(mGPS, "SolverOptions", ((swig_class *) SWIGTYPE_p_GPS_SolverOptions_CommonT_double_t->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_GPS_SolverOptionsT_double_t, (void *) &SwigClassSolverOptions);
  rb_define_alloc_func(SwigClassSolverOptions.klass, _wrap_SolverOptions_allocate);
  rb_define_method(SwigClassSolverOptions.klass, "initialize", VALUEFUNC(_wrap_new_SolverOptions), -1);
  rb_define_method(SwigClassSolverOptions.klass, "exclude", VALUEFUNC(_wrap_SolverOptions_exclude), -1);
  rb_define_method(SwigClassSolverOptions.klass, "include", VALUEFUNC(_wrap_SolverOptions_include), -1);
  rb_define_method(SwigClassSolverOptions.klass, "excluded", VALUEFUNC(_wrap_SolverOptions_excluded), -1);
  SwigClassSolverOptions.mark = 0;
  SwigClassSolverOptions.destroy = (void (*)(void *)) free_GPS_SolverOptions_Sl_double_Sg_;
  SwigClassSolverOptions.trackObjects = 0;
  
  SwigClassSolver.klass = rb_define_class_under(mGPS, "Solver", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_GPS_SolverT_double_t, (void *) &SwigClassSolver);
  rb_define_alloc_func(SwigClassSolver.klass, _wrap_Solver_allocate);
  rb_define_method(SwigClassSolver.klass, "initialize", VALUEFUNC(_wrap_new_Solver), -1);
  rb_define_method(SwigClassSolver.klass, "hooks", VALUEFUNC(_wrap_Solver_hooks_get), -1);
  rb_define_method(SwigClassSolver.klass, "gps_space_node", VALUEFUNC(_wrap_Solver_gps_space_node), -1);
  rb_define_method(SwigClassSolver.klass, "gps_options", VALUEFUNC(_wrap_Solver_gps_options), -1);
  rb_define_method(SwigClassSolver.klass, "sbas_space_node", VALUEFUNC(_wrap_Solver_sbas_space_node), -1);
  rb_define_method(SwigClassSolver.klass, "sbas_options", VALUEFUNC(_wrap_Solver_sbas_options), -1);
  rb_define_method(SwigClassSolver.klass, "solve", VALUEFUNC(_wrap_Solver_solve), -1);
  rb_define_method(SwigClassSolver.klass, "correction", VALUEFUNC(_wrap_Solver_correction), -1);
  rb_define_method(SwigClassSolver.klass, "correction=", VALUEFUNC(_wrap_Solver_correctione___), -1);
  SwigClassSolver.mark = (void (*)(void *)) GPS_Solver<double>::mark;
  SwigClassSolver.destroy = (void (*)(void *)) free_GPS_Solver_Sl_double_Sg_;
  SwigClassSolver.trackObjects = 0;
  
  SwigClassEphemeris_SBAS.klass = rb_define_class_under(mGPS, "Ephemeris_SBAS", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_SBAS_EphemerisT_double_t, (void *) &SwigClassEphemeris_SBAS);
  rb_define_alloc_func(SwigClassEphemeris_SBAS.klass, _wrap_Ephemeris_SBAS_allocate);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "initialize", VALUEFUNC(_wrap_new_Ephemeris_SBAS), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "svid=", VALUEFUNC(_wrap_Ephemeris_SBAS_svide___), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "svid", VALUEFUNC(_wrap_Ephemeris_SBAS_svid), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "WN=", VALUEFUNC(_wrap_Ephemeris_SBAS_WNe___), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "WN", VALUEFUNC(_wrap_Ephemeris_SBAS_WN), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "t_0=", VALUEFUNC(_wrap_Ephemeris_SBAS_t_0e___), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "t_0", VALUEFUNC(_wrap_Ephemeris_SBAS_t_0), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "URA=", VALUEFUNC(_wrap_Ephemeris_SBAS_URAe___), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "URA", VALUEFUNC(_wrap_Ephemeris_SBAS_URA), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "x=", VALUEFUNC(_wrap_Ephemeris_SBAS_xe___), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "x", VALUEFUNC(_wrap_Ephemeris_SBAS_x), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "y=", VALUEFUNC(_wrap_Ephemeris_SBAS_ye___), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "y", VALUEFUNC(_wrap_Ephemeris_SBAS_y), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "z=", VALUEFUNC(_wrap_Ephemeris_SBAS_ze___), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "z", VALUEFUNC(_wrap_Ephemeris_SBAS_z), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "dx=", VALUEFUNC(_wrap_Ephemeris_SBAS_dxe___), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "dx", VALUEFUNC(_wrap_Ephemeris_SBAS_dx), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "dy=", VALUEFUNC(_wrap_Ephemeris_SBAS_dye___), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "dy", VALUEFUNC(_wrap_Ephemeris_SBAS_dy), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "dz=", VALUEFUNC(_wrap_Ephemeris_SBAS_dze___), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "dz", VALUEFUNC(_wrap_Ephemeris_SBAS_dz), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "ddx=", VALUEFUNC(_wrap_Ephemeris_SBAS_ddxe___), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "ddx", VALUEFUNC(_wrap_Ephemeris_SBAS_ddx), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "ddy=", VALUEFUNC(_wrap_Ephemeris_SBAS_ddye___), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "ddy", VALUEFUNC(_wrap_Ephemeris_SBAS_ddy), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "ddz=", VALUEFUNC(_wrap_Ephemeris_SBAS_ddze___), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "ddz", VALUEFUNC(_wrap_Ephemeris_SBAS_ddz), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "a_Gf0=", VALUEFUNC(_wrap_Ephemeris_SBAS_a_Gf0e___), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "a_Gf0", VALUEFUNC(_wrap_Ephemeris_SBAS_a_Gf0), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "a_Gf1=", VALUEFUNC(_wrap_Ephemeris_SBAS_a_Gf1e___), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "a_Gf1", VALUEFUNC(_wrap_Ephemeris_SBAS_a_Gf1), -1);
  rb_define_method(SwigClassEphemeris_SBAS.klass, "constellation", VALUEFUNC(_wrap_Ephemeris_SBAS_constellation), -1);
  SwigClassEphemeris_SBAS.mark = 0;
  SwigClassEphemeris_SBAS.destroy = (void (*)(void *)) free_SBAS_Ephemeris_Sl_double_Sg_;
  SwigClassEphemeris_SBAS.trackObjects = 0;
  
  SwigClassSpaceNode_SBAS.klass = rb_define_class_under(mGPS, "SpaceNode_SBAS", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_SBAS_SpaceNodeT_double_t, (void *) &SwigClassSpaceNode_SBAS);
  rb_define_alloc_func(SwigClassSpaceNode_SBAS.klass, _wrap_SpaceNode_SBAS_allocate);
  rb_define_method(SwigClassSpaceNode_SBAS.klass, "initialize", VALUEFUNC(_wrap_new_SpaceNode_SBAS), -1);
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "DONT_USE", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::DONT_USE)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "PRN_MASK", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::PRN_MASK)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "FAST_CORRECTION_2", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::FAST_CORRECTION_2)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "FAST_CORRECTION_3", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::FAST_CORRECTION_3)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "FAST_CORRECTION_4", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::FAST_CORRECTION_4)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "FAST_CORRECTION_5", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::FAST_CORRECTION_5)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "INTEGRITY_INFORMATION", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::INTEGRITY_INFORMATION)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "FAST_CORRECTION_DEGRADATION", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::FAST_CORRECTION_DEGRADATION)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "GEO_NAVIGATION", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::GEO_NAVIGATION)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "DEGRADATION_PARAMS", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::DEGRADATION_PARAMS)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "SBAS_NETWORK_TIME_UTC_OFFSET_PARAMS", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::SBAS_NETWORK_TIME_UTC_OFFSET_PARAMS)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "GEO_SAT_ALNAMACS", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::GEO_SAT_ALNAMACS)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "IONO_GRID_POINT_MASKS", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::IONO_GRID_POINT_MASKS)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "MIXED_CORRECTION_FAST_AND_LONG_TERM", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::MIXED_CORRECTION_FAST_AND_LONG_TERM)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "LONG_TERM_CORRECTION", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::LONG_TERM_CORRECTION)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "IONO_DELAY_CORRECTION", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::IONO_DELAY_CORRECTION)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "SERVICE_MESSAGE", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::SERVICE_MESSAGE)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "CLOCK_EPHEMERIS_COV_MAT", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::CLOCK_EPHEMERIS_COV_MAT)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "INTERNAL_TEST_MESSAGE", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::INTERNAL_TEST_MESSAGE)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "NULL_MESSAGES", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::NULL_MESSAGES)));
  rb_define_const(SwigClassSpaceNode_SBAS.klass, "UNSUPPORTED_MESSAGE", SWIG_From_int(static_cast< int >(SBAS_SpaceNode< double >::UNSUPPORTED_MESSAGE)));
  rb_define_singleton_method(SwigClassSpaceNode_SBAS.klass, "sagnac_correction", VALUEFUNC(_wrap_SpaceNode_SBAS_sagnac_correction), -1);
  rb_define_singleton_method(SwigClassSpaceNode_SBAS.klass, "tropo_correction", VALUEFUNC(_wrap_SpaceNode_SBAS_tropo_correction), -1);
  rb_define_method(SwigClassSpaceNode_SBAS.klass, "has_satellite", VALUEFUNC(_wrap_SpaceNode_SBAS_has_satellite), -1);
  rb_define_method(SwigClassSpaceNode_SBAS.klass, "update_all_ephemeris", VALUEFUNC(_wrap_SpaceNode_SBAS_update_all_ephemeris), -1);
  rb_define_method(SwigClassSpaceNode_SBAS.klass, "available_satellites", VALUEFUNC(_wrap_SpaceNode_SBAS_available_satellites), -1);
  rb_define_method(SwigClassSpaceNode_SBAS.klass, "register_ephemeris", VALUEFUNC(_wrap_SpaceNode_SBAS_register_ephemeris), -1);
  rb_define_method(SwigClassSpaceNode_SBAS.klass, "ephemeris", VALUEFUNC(_wrap_SpaceNode_SBAS_ephemeris), -1);
  rb_define_method(SwigClassSpaceNode_SBAS.klass, "read", VALUEFUNC(_wrap_SpaceNode_SBAS_read), -1);
  rb_define_method(SwigClassSpaceNode_SBAS.klass, "decode_message", VALUEFUNC(_wrap_SpaceNode_SBAS_decode_message), -1);
  rb_define_method(SwigClassSpaceNode_SBAS.klass, "ionospheric_grid_points", VALUEFUNC(_wrap_SpaceNode_SBAS_ionospheric_grid_points), -1);
  SwigClassSpaceNode_SBAS.mark = 0;
  SwigClassSpaceNode_SBAS.destroy = (void (*)(void *)) free_SBAS_SpaceNode_Sl_double_Sg_;
  SwigClassSpaceNode_SBAS.trackObjects = 0;
  
  SwigClassSolverOptions_SBAS.klass = rb_define_class_under(mGPS, "SolverOptions_SBAS", ((swig_class *) SWIGTYPE_p_GPS_SolverOptions_CommonT_double_t->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_SBAS_SolverOptionsT_double_t, (void *) &SwigClassSolverOptions_SBAS);
  rb_define_alloc_func(SwigClassSolverOptions_SBAS.klass, _wrap_SolverOptions_SBAS_allocate);
  rb_define_method(SwigClassSolverOptions_SBAS.klass, "initialize", VALUEFUNC(_wrap_new_SolverOptions_SBAS), -1);
  rb_define_method(SwigClassSolverOptions_SBAS.klass, "exclude", VALUEFUNC(_wrap_SolverOptions_SBAS_exclude), -1);
  rb_define_method(SwigClassSolverOptions_SBAS.klass, "include", VALUEFUNC(_wrap_SolverOptions_SBAS_include), -1);
  rb_define_method(SwigClassSolverOptions_SBAS.klass, "excluded", VALUEFUNC(_wrap_SolverOptions_SBAS_excluded), -1);
  SwigClassSolverOptions_SBAS.mark = 0;
  SwigClassSolverOptions_SBAS.destroy = (void (*)(void *)) free_SBAS_SolverOptions_Sl_double_Sg_;
  SwigClassSolverOptions_SBAS.trackObjects = 0;
  
  SwigClassRINEX_Observation.klass = rb_define_class_under(mGPS, "RINEX_Observation", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_RINEX_ObservationT_double_t, (void *) &SwigClassRINEX_Observation);
  rb_define_alloc_func(SwigClassRINEX_Observation.klass, _wrap_RINEX_Observation_allocate);
  rb_define_method(SwigClassRINEX_Observation.klass, "initialize", VALUEFUNC(_wrap_new_RINEX_Observation), -1);
  rb_define_singleton_method(SwigClassRINEX_Observation.klass, "read", VALUEFUNC(_wrap_RINEX_Observation_read), -1);
  SwigClassRINEX_Observation.mark = 0;
  SwigClassRINEX_Observation.destroy = (void (*)(void *)) free_RINEX_Observation_Sl_double_Sg_;
  SwigClassRINEX_Observation.trackObjects = 0;
}

