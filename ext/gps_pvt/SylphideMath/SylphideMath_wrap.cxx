/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGRUBY
#define SWIGRUBY
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif
#ifndef RTYPEDDATA_P
# define RTYPEDDATA_P(x) (TYPE(x) != T_DATA)
#endif



/*
 * The following macros are used for providing the correct type of a
 * function pointer to the Ruby C API.
 * Starting with Ruby 2.7 (corresponding to RB_METHOD_DEFINITION_DECL being
 * defined) these macros act transparently due to Ruby's moving away from
 * ANYARGS and instead employing strict function signatures.
 *
 * Note: In case of C (not C++) the macros are transparent even before
 * Ruby 2.7 due to the fact that the Ruby C API used function declarators
 * with empty parentheses, which allows for an unspecified number of
 * arguments.
 *
 * PROTECTFUNC(f) is used for the function pointer argument of the Ruby
 * C API function rb_protect().
 *
 * VALUEFUNC(f) is used for the function pointer argument(s) of Ruby C API
 * functions like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is used to typecast a C function that implements either
 * the "mark" or "free" stuff for a Ruby Data object, so that it can be
 * passed as an argument to Ruby C API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 *
 * SWIG_RUBY_VOID_ANYARGS_FUNC(f) is used for the function pointer
 * argument(s) of Ruby C API functions like rb_define_virtual_variable().
 *
 * SWIG_RUBY_INT_ANYARGS_FUNC(f) is used for the function pointer
 * argument(s) of Ruby C API functions like st_foreach().
 */
#if defined(__cplusplus) && !defined(RB_METHOD_DEFINITION_DECL)
#  define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#  define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#  define VOIDFUNC(f) ((RUBY_DATA_FUNC) f)
#  define SWIG_RUBY_VOID_ANYARGS_FUNC(f) ((void (*)(ANYARGS))(f))
#  define SWIG_RUBY_INT_ANYARGS_FUNC(f) ((int (*)(ANYARGS))(f))
#else
#  define PROTECTFUNC(f) (f)
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#  define SWIG_RUBY_VOID_ANYARGS_FUNC(f) (f)
#  define SWIG_RUBY_INT_ANYARGS_FUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(ST_DATA_T_DEFINED)
/* Needs to be explicitly included for Ruby 1.8 and earlier */
#include <st.h>
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif

/* Global hash table to store Trackings from C/C++
   structs to Ruby Objects.
*/
static st_table* swig_ruby_trackings = NULL;

static VALUE swig_ruby_trackings_count(ID id, VALUE *var) {
  return SWIG2NUM(swig_ruby_trackings->num_entries);
}


/* Setup a hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a hash table to store Trackings from C++
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  VALUE trackings_value = Qnil;
  /* change the variable name so that we can mix modules
     compiled with older SWIG's - this used to be called "@__trackings__" */
  ID trackings_id = rb_intern( "@__safetrackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  trackings_value = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* The trick here is that we have to store the hash table
  pointer in a Ruby variable. We do not want Ruby's GC to
  treat this pointer as a Ruby object, so we convert it to
  a Ruby numeric value. */
  if (trackings_value == Qnil) {
    /* No, it hasn't.  Create one ourselves */
    swig_ruby_trackings = st_init_numtable();
    rb_ivar_set( _mSWIG, trackings_id, SWIG2NUM(swig_ruby_trackings) );
  } else {
    swig_ruby_trackings = (st_table*)NUM2SWIG(trackings_value);
  }

  rb_define_virtual_variable("SWIG_TRACKINGS_COUNT",
                             VALUEFUNC(swig_ruby_trackings_count),
                             SWIG_RUBY_VOID_ANYARGS_FUNC((rb_gvar_setter_t*)NULL));
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* Store the mapping to the global hash table. */
  st_insert(swig_ruby_trackings, (st_data_t)ptr, object);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Now lookup the value stored in the global hash table */
  VALUE value;

  if (st_lookup(swig_ruby_trackings, (st_data_t)ptr, &value)) {
    return value;
  } else {
    return Qnil;
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Delete the object from the hash table */
  st_delete(swig_ruby_trackings, (st_data_t *)&ptr, NULL);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object. */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    // object might have the T_ZOMBIE type, but that's just
    // because the GC has flagged it as such for a deferred
    // destruction. Until then, it's still a T_DATA object.
    DATA_PTR(object) = 0;
  }
}

/* This is a helper method that iterates over all the trackings
   passing the C++ object pointer and its related Ruby object
   to the passed callback function. */

/* Proxy method to abstract the internal trackings datatype */
static int swig_ruby_internal_iterate_callback(st_data_t ptr, st_data_t obj, st_data_t meth) {
  ((void (*) (void *, VALUE))meth)((void *)ptr, (VALUE)obj);
  return ST_CONTINUE;
}

SWIGRUNTIME void SWIG_RubyIterateTrackings( void(*meth)(void* ptr, VALUE obj) ) {
  st_foreach(swig_ruby_trackings,
             SWIG_RUBY_INT_ANYARGS_FUNC(swig_ruby_internal_iterate_callback),
             (st_data_t)meth);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    swig_ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;

  if (!ptr)
    return Qnil;

  assert(type);
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);

      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));

  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  if (NIL_P(stype))
    return NULL;
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef struct {
  void (*datafree)(void *);
  int own;
} swig_ruby_owntype;

SWIGRUNTIME swig_ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, swig_ruby_owntype own) {
  swig_ruby_owntype oldown = {0, 0};
  if (TYPE(obj) == T_DATA && !RTYPEDDATA_P(obj)) {
    oldown.datafree = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own.datafree;
  }
  return oldown;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, swig_ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA || (TYPE(obj) == T_DATA && RTYPEDDATA_P(obj))) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) {
    own->datafree = RDATA(obj)->dfree;
    own->own = 0;
  }
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      if (ptr) {
        if (tc->type == ty) {
          *ptr = vptr;
        } else {
          int newmemory = 0;
          *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
          if (newmemory == SWIG_CAST_NEW_MEMORY) {
            assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
            if (own)
              own->own = own->own | SWIG_CAST_NEW_MEMORY;
          }
        }
      }
    }
  } else {
    if (ptr)
      *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ComplexT_double_t swig_types[0]
#define SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t swig_types[1]
#define SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t swig_types[2]
#define SWIGTYPE_p_MatrixViewBaseT_t swig_types[3]
#define SWIGTYPE_p_MatrixViewFilterT_MatrixViewBaseT_t_t swig_types[4]
#define SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t swig_types[5]
#define SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t swig_types[6]
#define SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t swig_types[7]
#define SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t swig_types[8]
#define SWIGTYPE_p_char swig_types[9]
#define SWIGTYPE_p_double swig_types[10]
#define SWIGTYPE_p_f_r_q_const__Complex__double___p_Complex__double___r_q_const__unsigned_int_r_q_const__unsigned_int__void swig_types[11]
#define SWIGTYPE_p_f_r_q_const__double_p_double_r_q_const__unsigned_int_r_q_const__unsigned_int__void swig_types[12]
#define SWIGTYPE_p_native_exception swig_types[13]
#define SWIGTYPE_p_self_t swig_types[14]
#define SWIGTYPE_p_std__exception swig_types[15]
#define SWIGTYPE_p_swig__GC_VALUE swig_types[16]
#define SWIGTYPE_p_unsigned_int swig_types[17]
static swig_type_info *swig_types[19];
static swig_module_info swig_module = {swig_types, 18, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_SylphideMath
#define SWIG_name    "GPS_PVT::SylphideMath"

static VALUE mSylphideMath;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <string>
#include <sstream>
#include <vector>
#include <exception>

#if defined(SWIGRUBY) && defined(isfinite)
#undef isfinite_
#undef isfinite
#endif

#include "param/complex.h"
#include "param/matrix.h"

#if defined(SWIGRUBY) && defined(isfinite_)
#undef isfinite_
#define isfinite(x) finite(x)
#endif


#include <typeinfo>
#include <stdexcept>


namespace swig {
  class SwigGCReferences {
    VALUE _hash;

    SwigGCReferences() : _hash(Qnil) {
    }
    ~SwigGCReferences() {
      if (_hash != Qnil)
        rb_gc_unregister_address(&_hash);
    }
    static void EndProcHandler(VALUE) {
      // Ruby interpreter ending - _hash can no longer be accessed.
      SwigGCReferences &s_references = instance();
      s_references._hash = Qnil;
    }
  public:
    static SwigGCReferences& instance() {
      // Hash of all GC_VALUE's currently in use
      static SwigGCReferences s_references;

      return s_references;
    }
    static void initialize() {
      SwigGCReferences &s_references = instance();
      if (s_references._hash == Qnil) {
        rb_set_end_proc(&EndProcHandler, Qnil);
        s_references._hash = rb_hash_new();
        rb_gc_register_address(&s_references._hash);
      }
    }
    void GC_register(VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(_hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 0;
        ++n;
        rb_hash_aset(_hash, obj, INT2NUM(n));
      }
    }
    void GC_unregister(const VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      // this test should not be needed but I've noticed some very erratic
      // behavior of none being unregistered in some very rare situations.
      if (BUILTIN_TYPE(obj) == T_NONE)
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(_hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 1;
        --n;
        if (n)
          rb_hash_aset(_hash, obj, INT2NUM(n));
        else
          rb_hash_delete(_hash, obj);
      }
    }
  };

  class GC_VALUE {
  protected:
    VALUE  _obj;

    static ID hash_id;
    static ID   lt_id;
    static ID   gt_id;
    static ID   eq_id;
    static ID   le_id;
    static ID   ge_id;

    static ID  pos_id;
    static ID  neg_id;
    static ID  inv_id;

    static ID  add_id;
    static ID  sub_id;
    static ID  mul_id;
    static ID  div_id;
    static ID  mod_id;

    static ID  and_id;
    static ID   or_id;
    static ID  xor_id;

    static ID  lshift_id;
    static ID  rshift_id;

    struct OpArgs
    {
      VALUE src;
      ID    id;
      int   nargs;
      VALUE target;
    };


  public:
    GC_VALUE() : _obj(Qnil)
    {
    }

    GC_VALUE(const GC_VALUE& item) : _obj(item._obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    GC_VALUE(VALUE obj) :_obj(obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    ~GC_VALUE() 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
    }
    
    GC_VALUE & operator=(const GC_VALUE& item) 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
      _obj = item._obj;
      SwigGCReferences::instance().GC_register(_obj);
      return *this;
    }

    operator VALUE() const
    {
      return _obj;
    }

    VALUE inspect() const
    {
      return rb_inspect(_obj);
    }

    VALUE to_s() const
    {
      return rb_inspect(_obj);
    }

    static VALUE swig_rescue_swallow(VALUE, VALUE)
    {
      /*
      VALUE errstr = rb_obj_as_string(rb_errinfo());
      printf("Swallowing error: '%s'\n", RSTRING_PTR(StringValue(errstr)));
      */
      return Qnil; /* Swallow Ruby exception */
    }

    static VALUE swig_rescue_funcall(VALUE p)
    {
      OpArgs* args = (OpArgs*) p;
      return rb_funcall(args->src, args->id, args->nargs, args->target);
    }

    bool relational_equal_op(const GC_VALUE& other, const ID& op_id, bool (*op_func)(const VALUE& a, const VALUE& b)) const
    {
      if (FIXNUM_P(_obj) && FIXNUM_P(other._obj)) {
        return op_func(_obj, other._obj);
      }
      bool res = false;
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      if (rb_respond_to(_obj, op_id)) {
        OpArgs  args;
        args.src    = _obj;
        args.id     = op_id;
        args.nargs  = 1;
        args.target = VALUE(other);
        ret = rb_rescue(VALUEFUNC(swig_rescue_funcall), VALUE(&args),
                       (VALUEFUNC(swig_rescue_swallow)), Qnil);
      }
      if (ret == Qnil) {
        VALUE a = rb_funcall(         _obj, hash_id, 0 );
        VALUE b = rb_funcall( VALUE(other), hash_id, 0 );
        res = op_func(a, b);
      } else {
        res = RTEST(ret);
      }
      SWIG_RUBY_THREAD_END_BLOCK;
      return res;
    }

    static bool operator_eq(const VALUE& a, const VALUE& b) { return a == b; }
    static bool operator_lt(const VALUE& a, const VALUE& b) { return a < b; }
    static bool operator_le(const VALUE& a, const VALUE& b) { return a <= b; }
    static bool operator_gt(const VALUE& a, const VALUE& b) { return a > b; }
    static bool operator_ge(const VALUE& a, const VALUE& b) { return a >= b; }

    bool operator==(const GC_VALUE& other) const { return relational_equal_op(other, eq_id, operator_eq); }
    bool operator<(const GC_VALUE& other) const { return relational_equal_op(other, lt_id, operator_lt); }
    bool operator<=(const GC_VALUE& other) const { return relational_equal_op(other, le_id, operator_le); }
    bool operator>(const GC_VALUE& other) const { return relational_equal_op(other, gt_id, operator_gt); }
    bool operator>=(const GC_VALUE& other) const { return relational_equal_op(other, ge_id, operator_ge); }

    bool operator!=(const GC_VALUE& other) const
    {
      return !(this->operator==(other));
    }

    GC_VALUE unary_op(const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 0;
      args.target = Qnil;
      ret = rb_rescue(VALUEFUNC(swig_rescue_funcall), VALUE(&args),
                     (VALUEFUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return ret;
    }

    GC_VALUE operator+() const { return unary_op(pos_id); }
    GC_VALUE operator-() const { return unary_op(neg_id); }
    GC_VALUE operator~() const { return unary_op(inv_id); }

    GC_VALUE binary_op(const GC_VALUE& other, const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 1;
      args.target = VALUE(other);
      ret = rb_rescue(VALUEFUNC(swig_rescue_funcall), VALUE(&args),
                     (VALUEFUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return GC_VALUE(ret);
    }

    GC_VALUE operator+(const GC_VALUE& other) const { return binary_op(other, add_id); }
    GC_VALUE operator-(const GC_VALUE& other) const { return binary_op(other, sub_id); }
    GC_VALUE operator*(const GC_VALUE& other) const { return binary_op(other, mul_id); }
    GC_VALUE operator/(const GC_VALUE& other) const { return binary_op(other, div_id); }
    GC_VALUE operator%(const GC_VALUE& other) const { return binary_op(other, mod_id); }
    GC_VALUE operator&(const GC_VALUE& other) const { return binary_op(other, and_id); }
    GC_VALUE operator^(const GC_VALUE& other) const { return binary_op(other, xor_id); }
    GC_VALUE operator|(const GC_VALUE& other) const { return binary_op(other, or_id); }
    GC_VALUE operator<<(const GC_VALUE& other) const { return binary_op(other, lshift_id); }
    GC_VALUE operator>>(const GC_VALUE& other) const { return binary_op(other, rshift_id); }
  };

  ID  GC_VALUE::hash_id = rb_intern("hash");
  ID  GC_VALUE::lt_id = rb_intern("<");
  ID  GC_VALUE::gt_id = rb_intern(">");
  ID  GC_VALUE::eq_id = rb_intern("==");
  ID  GC_VALUE::le_id = rb_intern("<=");
  ID  GC_VALUE::ge_id = rb_intern(">=");

  ID  GC_VALUE::pos_id = rb_intern("+@");
  ID  GC_VALUE::neg_id = rb_intern("-@");
  ID  GC_VALUE::inv_id = rb_intern("~");

  ID  GC_VALUE::add_id = rb_intern("+");
  ID  GC_VALUE::sub_id = rb_intern("-");
  ID  GC_VALUE::mul_id = rb_intern("*");
  ID  GC_VALUE::div_id = rb_intern("/");
  ID  GC_VALUE::mod_id = rb_intern("%");

  ID  GC_VALUE::and_id = rb_intern("&");
  ID  GC_VALUE::or_id  = rb_intern("|");
  ID  GC_VALUE::xor_id = rb_intern("^");

  ID  GC_VALUE::lshift_id = rb_intern("<<");
  ID  GC_VALUE::rshift_id = rb_intern(">>");

  typedef GC_VALUE LANGUAGE_OBJ;

} // namespace swig



#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


struct native_exception : public std::exception {

  int state;
  native_exception(const int &state_) : std::exception(), state(state_) {}
  void regenerate() const {rb_jump_tag(state);}



};


static VALUE funcall_throw_if_error(VALUE (*func)(VALUE), VALUE arg) {
  int state;
  VALUE res = rb_protect(func, arg, &state);
  if(state != 0){throw native_exception(state);}
  return res;
}
static VALUE yield_throw_if_error(const int &argc, const VALUE *argv) {
  struct yield_t {
    const int &argc;
    const VALUE *argv;
    static VALUE run(VALUE v){
      yield_t *arg(reinterpret_cast<yield_t *>(v));
      return rb_yield_values2(arg->argc, arg->argv);
    }
  } arg = {argc, argv};
  return funcall_throw_if_error(yield_t::run, reinterpret_cast<VALUE>(&arg));
}
static std::string inspect_str(const VALUE &v){
  VALUE v_inspect(rb_inspect(v));
  return std::string(RSTRING_PTR(v_inspect), RSTRING_LEN(v_inspect));
}


SWIGINTERN VALUE
SWIG_ruby_failed(VALUE SWIGUNUSEDPARM(arg1), VALUE SWIGUNUSEDPARM(arg2))
{
  return Qnil;
} 


/*@SWIG:/usr/share/swig4.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj); (void)type;
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2DBL), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   rb_float_new 


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {
  template <class Type> struct traits_asptr;
  template <class Type> struct traits_asval;
  struct pointer_category;
  template <class Type, class Category> struct traits_as;
  template <class Type> struct traits_from;
  template <class Type> struct traits_from_ptr;
  template <class Type> struct noconst_traits;
  template <class Type> swig_type_info* type_info();
  template <class Type> const char* type_name();
  template <class Type> VALUE from(const Type& val);
}



namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static VALUE from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static VALUE from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static VALUE from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static VALUE from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline VALUE from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline VALUE from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(VALUE obj, Type **val) {
      Type *p = 0;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(VALUE obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(VALUE obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(VALUE obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(VALUE obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(VALUE obj) {
      Type v;
      int res = asval(obj, &v);
      if (!SWIG_IsOK(res)) {
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
        throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(VALUE obj) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(obj, &v);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
        throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(VALUE obj) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(obj, &v);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
        throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type>
  inline Type as(VALUE obj) {
    return traits_as< Type, typename traits< Type >::category >::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(VALUE obj) {
      int res = asval(obj, (Type *)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(VALUE obj) {
      int res = asptr(obj, (Type **)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(VALUE obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(VALUE obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static VALUE from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


// SWIG_Traits_frag(Complex) is invalid, which will be hidden by SWIG_Traits_frag(Complex<T>)

  namespace swig {
    template <class T> struct traits< Complex<T> > {
      typedef value_category category;
    };
    template <class T> struct traits_asval< Complex<T> > {
      typedef Complex<T> value_type;
      static int asval(VALUE obj, value_type *v) {
        if(RB_TYPE_P(obj, T_COMPLEX)){

          static const ID id_r(rb_intern("real")), id_i(rb_intern("imag"));
          int res = swig::asval(rb_funcall(obj, id_r, 0), &(v->real()));
          if(!SWIG_IsOK(res)){return res;}
          return swig::asval(rb_funcall(obj, id_i, 0), &(v->imaginary()));





        }else{
          v->imaginary() = T(0);
          return swig::asval(obj, &(v->real()));
        }
      }
    };
    template <class T> struct traits_from< Complex<T> > {
      typedef Complex<T> value_type;
      static VALUE from(const value_type &v) {
        return rb_complex_new(swig::from(v.real()), swig::from(v.imaginary()));
      }
    };
    template <class T> struct traits_check< Complex<T>, value_category> {
      static bool check(VALUE obj) {
        if(RB_TYPE_P(obj, T_COMPLEX)){

          static const ID id_r(rb_intern("real")), id_i(rb_intern("imag"));
          return swig::check<T>(rb_funcall(obj, id_r, 0))
              && swig::check<T>(rb_funcall(obj, id_i, 0));




        }else{
          return swig::check<T>(obj);
        }
      }
    };
  }



    namespace swig {
      template <>
      inline swig_type_info *type_info<Complex<double> >() {
        return SWIGTYPE_p_ComplexT_double_t;
      }
      template <>
      inline swig_type_info *type_info<Complex<double> *>() {
        return SWIGTYPE_p_ComplexT_double_t;
      }
    }
  

SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}

SWIGINTERN Complex< double > Complex_Sl_double_Sg__rectangular__SWIG_0(double const &r,double const &i=double(0)){
    return Complex<double>(r, i);
  }
SWIGINTERN double Complex_Sl_double_Sg__set_real(Complex< double > *self,double const &v){
  return (self->real() = v);
}
SWIGINTERN double Complex_Sl_double_Sg__get_real(Complex< double > *self){
  return self->real();
}
SWIGINTERN double Complex_Sl_double_Sg__set_imaginary(Complex< double > *self,double const &v){
  return (self->imaginary() = v);
}
SWIGINTERN double Complex_Sl_double_Sg__get_imaginary(Complex< double > *self){
  return self->imaginary();
}
SWIGINTERN std::string Complex_Sl_double_Sg____str__(Complex< double > const *self){
    std::stringstream s;
    s << (*self);
    return s.str();
  }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


template <class BaseView = MatrixViewBase<> >
struct MatrixViewFilter : public BaseView {
  typedef MatrixViewFilter<BaseView> self_t;

  struct {
    unsigned int row_offset, column_offset;
    unsigned int rows, columns;
    bool transposed;
    bool conjugated;
  } prop;

  MatrixViewFilter() : BaseView() {
    prop.row_offset = prop.column_offset = 0;
    prop.rows = prop.columns = 0; // to be configured
    prop.transposed = false;
    prop.conjugated = false;
  }
  MatrixViewFilter(const self_t &view)
      : BaseView((const BaseView &)view), prop(view.prop) {
  }
  
  void transpose() {
    prop.transposed = !prop.transposed;
  }
  void conjugate() {
    prop.conjugated = !prop.conjugated;
  }
  void partial(
      const unsigned int &new_rows, const unsigned int &new_columns,
      const unsigned int &row_offset, const unsigned int &column_offset) {
    if(prop.transposed){
      prop.row_offset += column_offset;
      prop.column_offset += row_offset;
      prop.rows = new_columns;
      prop.columns = new_rows;
    }else{
      prop.row_offset += row_offset;
      prop.column_offset += column_offset;
      prop.rows = new_rows;
      prop.columns = new_columns;
    }
  }
  
  template <class T, class Array2D_Type>
  struct mat_t : public Matrix_Frozen<T, Array2D_Type, self_t> {
    typedef Matrix_Frozen<T, Array2D_Type, self_t> super_t;
    mat_t(const Matrix_Frozen<T, Array2D_Type, BaseView> &orig) : super_t(orig) {
      super_t::view.prop.rows = orig.rows();
      super_t::view.prop.columns = orig.columns();
    }
    mat_t(const Matrix_Frozen<T, Array2D_Type, self_t> &orig) : super_t(orig) {}
    self_t &view() {return super_t::view;}
  };
  
  template <class T, class Array2D_Type, class ViewType>
  static Matrix_Frozen<T, Array2D_Type, self_t> transpose(
      const Matrix_Frozen<T, Array2D_Type, ViewType> &orig){
    mat_t<T, Array2D_Type> res(orig);
    res.view().transpose();
    return res;
  }
  template <class T, class Array2D_Type, class ViewType>
  static Matrix_Frozen<T, Array2D_Type, self_t> conjugate(
      const Matrix_Frozen<T, Array2D_Type, ViewType> &orig){
    return mat_t<T, Array2D_Type>(orig);
  }
  template <class T, class Array2D_Type, class ViewType>
  static Matrix_Frozen<Complex<T>, Array2D_Type, self_t> conjugate(
      const Matrix_Frozen<Complex<T>, Array2D_Type, ViewType> &orig){
    mat_t<Complex<T>, Array2D_Type> res(orig);
    res.view().conjugate();
    return res;
  }
  template <class T, class Array2D_Type, class ViewType>
  static Matrix_Frozen<T, Array2D_Type, self_t> partial(
      const Matrix_Frozen<T, Array2D_Type, ViewType> &orig,
      const unsigned int &new_rows, const unsigned int &new_columns,
      const unsigned int &row_offset, const unsigned int &column_offset) {
    if(new_rows + row_offset > orig.rows()){
      throw std::out_of_range("Row size exceeding");
    }else if(new_columns + column_offset > orig.columns()){
      throw std::out_of_range("Column size exceeding");
    }
    mat_t<T, Array2D_Type> res(orig);
    res.view().partial(new_rows, new_columns, row_offset, column_offset);
    return res;
  }
  template <class T, class Array2D_Type, class ViewType>
  static Matrix_Frozen<T, Array2D_Type, self_t> partial(
      const Matrix_Frozen<T, Array2D_Type, ViewType> &orig,
      const unsigned int &new_rows, const unsigned int &new_columns) {
    return partial(orig, new_rows, new_columns, 0, 0);
  }

  template<class CharT, class Traits>
  friend std::basic_ostream<CharT, Traits> &operator<<(
      std::basic_ostream<CharT, Traits> &out, const self_t &view){
    out 
        << (view.prop.transposed 
          ? (view.prop.conjugated ? "[*] " : "[T] ") 
          : (view.prop.conjugated ? "[~] " : ""))
        << "[Size](" << view.prop.rows << "," << view.prop.columns << ") ";
    if((view.prop.row_offset > 0) || (view.prop.column_offset > 0)){
      out << "[Offset](" << view.prop.row_offset << "," << view.prop.column_offset << ") ";
    }
    return out << (const BaseView &)view;
  }

  inline const unsigned int rows(
      const unsigned int &_rows, const unsigned int &_columns) const noexcept {
    return prop.transposed ? prop.columns : prop.rows;
  }
  inline const unsigned int columns(
      const unsigned int &_rows, const unsigned int &_columns) const noexcept {
    return prop.transposed ? prop.rows : prop.columns;
  }

  template <class T>
  struct conjugate_t {
    static T run(const T &v, const bool &conjugated = false){return v;}
  };
  template <class T>
  struct conjugate_t<Complex<T> > {
    static Complex<T> run(const Complex<T> &v, const bool &conjugated = false){
      return conjugated ? v.conjugate() : v;
    }
  };

  template <class T, class Array2D_Type>
  inline T operator()(
      Array2D_Type &storage, const unsigned int &i, const unsigned int &j) const {
    return conjugate_t<T>::run(
        prop.transposed
          ? BaseView::template operator()<T, Array2D_Type>(
            storage, (j + prop.column_offset), (i + prop.row_offset))
          : BaseView::template operator()<T, Array2D_Type>(
            storage, (i + prop.row_offset), (j + prop.column_offset)),
        prop.conjugated);
  }
};


typedef MatrixViewBase<> MatViewBase;

typedef MatrixViewFilter<MatrixViewBase<> > MatView_f;







struct MatrixUtil {
  struct each_break_t {
    unsigned int r, c;
    each_break_t(const unsigned int &row, const unsigned int &column)
        : r(row), c(column) {}
  };
  enum each_which_t {
    EACH_ALL,
    EACH_DIAGONAL,
    EACH_OFF_DIAGONAL,
    EACH_LOWER,
    EACH_UPPER,
    EACH_STRICT_LOWER,
    EACH_STRICT_UPPER,
    EACH_UNKNOWN,
  };
  template <class T, 
      class Array2D_Type, class ViewType,
      class Array2D_Type2 = Array2D_Dense<T>, class ViewType2 = MatrixViewBase<> >
  static void each(
      const Matrix_Frozen<T, Array2D_Type, ViewType> &src,
      void (*each_func)(
        const T &src_elm, T *dst_elm,
        const unsigned int &i, const unsigned int &j),
      const each_which_t &each_which = EACH_ALL,
      Matrix<T, Array2D_Type2, ViewType2> *dst = NULL) {
    unsigned int i_max(src.rows()), j_max(src.columns());
    switch(each_which){
      case EACH_DIAGONAL:
        for(unsigned int k(0), k_max(i_max >= j_max ? j_max : i_max); k < k_max; ++k){
          (*each_func)(src(k, k), (dst ? &((*dst)(k, k)) : NULL), k, k);
        }
        break;
      case EACH_OFF_DIAGONAL:
        for(unsigned int i(0); i < i_max; ++i){
          for(unsigned int j(0); j < j_max; ++j){
            if(i != j){
              (*each_func)(src(i, j), (dst ? &((*dst)(i, j)) : NULL), i, j);
            }
          }
        }
        break;
      case EACH_LOWER:
        for(unsigned int i(0); i < i_max; ++i){
          for(unsigned int j(0); j <= i; ++j){
            (*each_func)(src(i, j), (dst ? &((*dst)(i, j)) : NULL), i, j);
          }
        }
        break;
      case EACH_UPPER:
        for(unsigned int i(0); i < i_max; ++i){
          for(unsigned int j(i); j < j_max; ++j){
            (*each_func)(src(i, j), (dst ? &((*dst)(i, j)) : NULL), i, j);
          }
        }
        break;
      case EACH_STRICT_LOWER:
        for(unsigned int i(1); i < i_max; ++i){
          for(unsigned int j(0); j < i; ++j){
            (*each_func)(src(i, j), (dst ? &((*dst)(i, j)) : NULL), i, j);
          }
        }
        break;
      case EACH_STRICT_UPPER:
        for(unsigned int i(0); i < i_max; ++i){
          for(unsigned int j(i + 1); j < j_max; ++j){
            (*each_func)(src(i, j), (dst ? &((*dst)(i, j)) : NULL), i, j);
          }
        }
        break;
      case EACH_ALL:
      default:
        for(unsigned int i(0); i < i_max; ++i){
          for(unsigned int j(0); j < j_max; ++j){
            (*each_func)(src(i, j), (dst ? &((*dst)(i, j)) : NULL), i, j);
          }
        }
        break;
    }
  }
#if defined(SWIGRUBY)
  static each_which_t sym2each_which(const VALUE &value){
    if(!RB_TYPE_P(value, T_SYMBOL)){return EACH_UNKNOWN;}
    static const struct {
      VALUE sym;
      each_which_t which;
    } cmp[] = {
      {ID2SYM(rb_intern("all")),          EACH_ALL},
      {ID2SYM(rb_intern("diagonal")),     EACH_DIAGONAL},
      {ID2SYM(rb_intern("off_diagonal")), EACH_OFF_DIAGONAL},
      {ID2SYM(rb_intern("lower")),        EACH_LOWER},
      {ID2SYM(rb_intern("upper")),        EACH_UPPER},
      {ID2SYM(rb_intern("strict_lower")), EACH_STRICT_LOWER},
      {ID2SYM(rb_intern("strict_upper")), EACH_STRICT_UPPER},
    };
    unsigned int i(0);
    while(value != cmp[i].sym){
      if(++i >= (sizeof(cmp) / sizeof(cmp[0]))){break;}
    }
    if(i >= (sizeof(cmp) / sizeof(cmp[0]))){return EACH_UNKNOWN;}
    return cmp[i].which;
  }
#endif

  template <class T, class Array2D_Type, class ViewType>
  static bool replace(
      Matrix<T, Array2D_Type, ViewType> &dst,
      const void *src = NULL){
    unsigned int r(dst.rows()), c(dst.columns()), len(r * c);
    bool replaced(true);
#if defined(SWIGRUBY)
    struct bracket_read_t {
      static VALUE run(VALUE v) {
        VALUE *values = reinterpret_cast<VALUE *>(v);
        static const ID id_func(rb_intern("[]"));
        return rb_funcall2(values[0], id_func, 2, &values[1]);
      }
      static bool is_accessible(const VALUE &v) {
        static const ID id_func(rb_intern("[]"));
        return rb_respond_to(v, id_func) != 0;
      }
      static VALUE read(
          const VALUE &v, const unsigned int &row = 0, const unsigned int &column = 0) {
        VALUE values[3] = {v, UINT2NUM(row), UINT2NUM(column)};
        return funcall_throw_if_error(run, reinterpret_cast<VALUE>(values));
      }
    };
    const VALUE *value(static_cast<const VALUE *>(src));
    unsigned int i(0), j(0), i_elm(0);
    VALUE v_elm;
    if(value && RB_TYPE_P(*value, T_ARRAY)){
      if(RB_TYPE_P(RARRAY_AREF(*value, 0), T_ARRAY)){ // [[r0c0, r0c1, ...], ...]
        if((unsigned int)RARRAY_LEN(*value) < r){
          throw std::invalid_argument("Length is too short");
        }
        VALUE value_r;
        for(; i_elm < len; i_elm++){
          if(j == 0){
            value_r = RARRAY_AREF(*value, i);
            if(!RB_TYPE_P(value_r, T_ARRAY)){
              throw std::invalid_argument("double array [[...], ...] is required");
            }else if((unsigned int)RARRAY_LEN(value_r) < c){
              throw std::invalid_argument("Length is too short");
            }
          }
          v_elm = RARRAY_AREF(value_r, j);
          if(!SWIG_IsOK(swig::asval(v_elm, &dst(i, j)))){break;}
          if(++j >= c){j = 0; ++i;}
        }
      }else{ // [r0c0, r0c1, ...]
        if((unsigned int)RARRAY_LEN(*value) < len){
          throw std::invalid_argument("Length is too short");
        }
        for(; i_elm < len; i_elm++){
          v_elm = RARRAY_AREF(*value, i_elm);
          if(!SWIG_IsOK(swig::asval(v_elm, &dst(i, j)))){break;}
          if(++j >= c){j = 0; ++i;}
        }
      }
    }else if(value && bracket_read_t::is_accessible(*value)){
      for(; i_elm < len; i_elm++){
        v_elm = bracket_read_t::read(*value, i, j);
        if(!SWIG_IsOK(swig::asval(v_elm, &dst(i, j)))){break;}
        if(++j >= c){j = 0; ++i;}
      }
    }else if(rb_block_given_p()){
      for(; i_elm < len; i_elm++){
        VALUE args[2] = {UINT2NUM(i), UINT2NUM(j)};
        v_elm = yield_throw_if_error(2, args);
        if(!SWIG_IsOK(swig::asval(v_elm, &dst(i, j)))){break;}
        if(++j >= c){j = 0; ++i;}
      }
    }else{
      replaced = false;
    }
    if(replaced && (i_elm < len)){
      std::stringstream s;
      s << "Unexpected input [" << i << "," << j << "]: ";
      throw std::invalid_argument(s.str().append(inspect_str(v_elm)));
    }
#endif
    return replaced;
  }
  template <class T, class Array2D_Type, class ViewType>
  static bool replace(
      Matrix<T, Array2D_Type, ViewType> &dst,
      const T *src){
    if(!src){return false;}
    for(unsigned int i(0), r(dst.rows()); i < r; ++i){
      for(unsigned int j(0), c(dst.columns()); j < c; ++j){
        dst(i, j) = *(src++);
      }
    }
    return true;
  }
};


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


/*@SWIG:/usr/share/swig4.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


  inline bool is_lt_zero_after_asval(const unsigned int &i){
    return ((sizeof(unsigned int) == sizeof(unsigned long)) && ((UINT_MAX >> 1) <= i));
  }
  void raise_if_lt_zero_after_asval(const unsigned int &i){
    if(is_lt_zero_after_asval(i)){
      SWIG_exception(SWIG_ValueError, "Expected positive value.");
    }
  } 

SWIGINTERN double Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg____getitem__(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,unsigned int const &row,unsigned int const &column){
    return (self)->operator()(row, column);
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__copy(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self){
    return self->operator Matrix<double, Array2D_Dense<double> >();
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__circular__SWIG_0(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,unsigned int const &row_offset,unsigned int const &column_offset,unsigned int const &new_rows,unsigned int const &new_columns){
    return (Matrix<double, Array2D_Dense<double> >)((self)->circular(
        row_offset, column_offset, new_rows, new_columns));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__circular__SWIG_1(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,unsigned int const &row_offset,unsigned int const &column_offset){
    return (Matrix<double, Array2D_Dense<double> >)((self)->circular(row_offset, column_offset));
  }
SWIGINTERN bool Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix){
    return (self)->isDifferentSize(matrix);
  }
SWIGINTERN bool Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (self)->isDifferentSize(matrix);
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sm___SWIG_0(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,double const &scalar){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator*(scalar));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sd___SWIG_0(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,double const &scalar){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator/(scalar));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Ss_(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator-());
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator+(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator+(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sa___SWIG_3(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,double const &scalar){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator+(scalar));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator-(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator-(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Ss___SWIG_3(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,double const &scalar){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator-(scalar));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->entrywise_product(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->entrywise_product(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator*(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator*(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__first_minor(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,unsigned int const &row,unsigned int const &column){
    return (Matrix<double, Array2D_Dense<double> >)((self)->matrix_for_minor(row, column));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__adjugate(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self){
    return (Matrix<double, Array2D_Dense<double> >)((self)->adjugate());
  }
SWIGINTERN void Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__lup(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix< double,Array2D_Dense< double > > &output_L,Matrix< double,Array2D_Dense< double > > &output_U,Matrix< double,Array2D_Dense< double > > &output_P){
    struct buf_t {
      unsigned int pivot_len, pivot_num;
      unsigned int *pivot;
      buf_t(const unsigned int &size) 
          : pivot_len(size), pivot(new unsigned int[size]) {}
      ~buf_t(){
        delete [] pivot;
      }
      Matrix<double, Array2D_Dense<double> > P() const {
        Matrix<double, Array2D_Dense<double> > res(pivot_len, pivot_len);
        for(unsigned int i(0); i < pivot_len; ++i){
          res(i, pivot[i]) = 1;
        }
        return res;
      }
    } buf(self->rows());
    Matrix<double, Array2D_Dense<double> > LU(self->decomposeLUP(buf.pivot_num, buf.pivot));
    output_L = LU.partial(self->rows(), self->columns()).copy();
    output_U = LU.partial(self->rows(), self->columns(), 0, self->rows()).copy();
    output_P = buf.P();
  }
SWIGINTERN void Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__ud(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix< double,Array2D_Dense< double > > &output_U,Matrix< double,Array2D_Dense< double > > &output_D){
    Matrix<double, Array2D_Dense<double> > UD(self->decomposeUD());
    output_U = UD.partial(self->rows(), self->columns()).copy();
    output_D = UD.partial(self->rows(), self->columns(), 0, self->rows()).copy();
  }
SWIGINTERN void Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__qr(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix< double,Array2D_Dense< double > > &output_Q,Matrix< double,Array2D_Dense< double > > &output_R){
    Matrix<double, Array2D_Dense<double> > QR(self->decomposeQR());
    output_Q = QR.partial(self->rows(), self->rows()).copy();
    output_R = QR.partial(self->rows(), self->columns(), 0, self->rows()).copy();
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__inverse(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self){
    return (Matrix<double, Array2D_Dense<double> >)((self)->inverse());
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator/(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator/(matrix));
  }
SWIGINTERN std::string Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__debug(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self){
    std::stringstream s;
    s << self->inspect();
    return s.str();
  }

    template <bool with_index = false, bool assign = false>
    static inline VALUE matrix_yield_internal(
        const double &src, double *dst, const unsigned int &i, const unsigned int &j){
      VALUE v;
      if(with_index){
        VALUE values[] = {swig::from(src), UINT2NUM(i), UINT2NUM(j)};
        v = yield_throw_if_error(3, values);
      }else{
        VALUE values[] = {swig::from(src)};
        v = yield_throw_if_error(1, values);
      }
      if(assign && !SWIG_IsOK(swig::asval(v, dst))){
        std::stringstream s;
        s << "Unknown input (double expected) [" << i << "," << j << "]: ";
        throw std::invalid_argument(s.str().append(inspect_str(v)));
      }
      return v;
    }
    static void matrix_yield(
        const double &src, double *dst, const unsigned int &i, const unsigned int &j){
      matrix_yield_internal<false, false>(src, dst, i, j);
    }
    static void matrix_yield_with_index(
        const double &src, double *dst, const unsigned int &i, const unsigned int &j){
      matrix_yield_internal<true, false>(src, dst, i, j);
    }
    static void matrix_yield_get(
        const double &src, double *dst, const unsigned int &i, const unsigned int &j){
      matrix_yield_internal<false, true>(src, dst, i, j);
    }
    static void matrix_yield_get_with_index(
        const double &src, double *dst, const unsigned int &i, const unsigned int &j){
      matrix_yield_internal<true, true>(src, dst, i, j);
    }
    
    static void matrix_yield_check(
        const double &src, double *dst, const unsigned int &i, const unsigned int &j){
      VALUE res(matrix_yield_internal<false, false>(src, dst, i, j));
      if(RTEST(res)){throw typename MatrixUtil::each_break_t(i, j);}
    }
    static void (*matrix_each(const double *))
        (const double &, double *, const unsigned int &, const unsigned int &) {
      ID id_thisf(rb_frame_this_func()), id_callee(rb_frame_callee());
      static const ID 
          id_map(rb_intern("map")), id_mapb(rb_intern("map!")),
          id_eachwi(rb_intern("each_with_index"));
      if((id_thisf == id_map) || (id_thisf == id_mapb)){
        static const ID with_index[] = {
            rb_intern("map_with_index"), rb_intern("map_with_index!"), 
            rb_intern("collect_with_index"), rb_intern("collect_with_index!")};
        for(std::size_t i(0); i < sizeof(with_index) / sizeof(with_index[0]); ++i){
          if(id_callee == with_index[i]){
            return matrix_yield_get_with_index;
          }
        }
        return matrix_yield_get;
      }else if(id_callee == id_eachwi){
        return matrix_yield_with_index;
      }else{
        return matrix_yield;
      }     
    }
  
SWIGINTERN Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__each__SWIG_0(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,void (*each_func)(double const &,double *,unsigned int const &,unsigned int const &),MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL){
    MatrixUtil::each(*self, each_func, each_which);
    return *self;
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__map__SWIG_0(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,void (*each_func)(double const &,double *,unsigned int const &,unsigned int const &),MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL){
    Matrix<double, Array2D_Dense<double> > res(self->operator Matrix<double, Array2D_Dense<double> >());
    MatrixUtil::each(*self, each_func, each_which, &res);
    return res;
  }
SWIGINTERN VALUE Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__index__SWIG_0(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL){
    try{
      MatrixUtil::each(*self, matrix_yield_check, each_which);
      return Qnil;
    }catch(const typename MatrixUtil::each_break_t &each_break){
      return rb_ary_new_from_args(2, UINT2NUM(each_break.r), UINT2NUM(each_break.c));
    }
  }
SWIGINTERN VALUE Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__index__SWIG_2(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,VALUE value,VALUE idx_selector=Qnil){
    return rb_block_call(
        rb_current_receiver(), rb_frame_callee(),
        (RTEST(idx_selector) ? 1 : 0), &idx_selector,
        (rb_block_call_func_t)rb_equal, value);
  }
SWIGINTERN VALUE Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__to_a(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self){
    unsigned int i_max(self->rows()), j_max(self->columns());
    VALUE res = rb_ary_new2(i_max);
    for(unsigned int i(0); i < i_max; ++i){
      VALUE row = rb_ary_new2(j_max);
      for(unsigned int j(0); j < j_max; ++j){
        rb_ary_store(row, j, swig::from((*(self))(i, j)));
      }
      rb_ary_store(res, i, row);
    }
    return res;
  }
SWIGINTERN std::string Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg____str__(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self){
    std::stringstream s;
    s << (*self);
    return s.str();
  }
SWIGINTERN Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__conjugate(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self){
    return MatView_f::conjugate(*self);
  }
SWIGINTERN Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__adjoint(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self){
    return MatView_f::conjugate(MatView_f::transpose(*self));
  }
SWIGINTERN Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__transpose(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self){

    return MatView_f::transpose(*self);



  }
SWIGINTERN Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__partial(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,unsigned int const &new_rows,unsigned int const &new_columns,unsigned int const &row_offset,unsigned int const &column_offset){

    return MatView_f::partial(*self, new_rows, new_columns, row_offset, column_offset);



  }
SWIGINTERN Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__row_vector(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,unsigned int const &row){

    return MatView_f::partial(*self, 1, self->columns(), row, 0);



  }
SWIGINTERN Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__column_vector(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,unsigned int const &column){

    return MatView_f::partial(*self, self->rows(), 1, 0, column);



  }
SWIGINTERN void Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__eigen(Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_V,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_D){
    typedef Matrix<Complex<double>, Array2D_Dense<Complex<double> > > cmat_t;
    cmat_t VD(self->eigen());
    output_V = VD.partial(self->rows(), self->rows()).copy();
    cmat_t D(self->rows(), self->rows());
    for(unsigned int i(0); i < self->rows(); ++i){
      D(i, i) = VD(i, self->rows());
    }
    output_D = D;
  }
SWIGINTERN double Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg____getitem__(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,unsigned int const &row,unsigned int const &column){
    return (self)->operator()(row, column);
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__copy(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self){
    return self->operator Matrix<double, Array2D_Dense<double> >();
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__circular__SWIG_0(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,unsigned int const &row_offset,unsigned int const &column_offset,unsigned int const &new_rows,unsigned int const &new_columns){
    return (Matrix<double, Array2D_Dense<double> >)((self)->circular(
        row_offset, column_offset, new_rows, new_columns));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__circular__SWIG_1(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,unsigned int const &row_offset,unsigned int const &column_offset){
    return (Matrix<double, Array2D_Dense<double> >)((self)->circular(row_offset, column_offset));
  }
SWIGINTERN bool Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix){
    return (self)->isDifferentSize(matrix);
  }
SWIGINTERN bool Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (self)->isDifferentSize(matrix);
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sm___SWIG_0(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,double const &scalar){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator*(scalar));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sd___SWIG_0(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,double const &scalar){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator/(scalar));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Ss_(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator-());
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator+(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator+(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sa___SWIG_3(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,double const &scalar){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator+(scalar));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator-(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator-(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Ss___SWIG_3(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,double const &scalar){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator-(scalar));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->entrywise_product(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->entrywise_product(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator*(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator*(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__first_minor(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,unsigned int const &row,unsigned int const &column){
    return (Matrix<double, Array2D_Dense<double> >)((self)->matrix_for_minor(row, column));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__adjugate(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self){
    return (Matrix<double, Array2D_Dense<double> >)((self)->adjugate());
  }
SWIGINTERN void Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__lup(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix< double,Array2D_Dense< double > > &output_L,Matrix< double,Array2D_Dense< double > > &output_U,Matrix< double,Array2D_Dense< double > > &output_P){
    struct buf_t {
      unsigned int pivot_len, pivot_num;
      unsigned int *pivot;
      buf_t(const unsigned int &size) 
          : pivot_len(size), pivot(new unsigned int[size]) {}
      ~buf_t(){
        delete [] pivot;
      }
      Matrix<double, Array2D_Dense<double> > P() const {
        Matrix<double, Array2D_Dense<double> > res(pivot_len, pivot_len);
        for(unsigned int i(0); i < pivot_len; ++i){
          res(i, pivot[i]) = 1;
        }
        return res;
      }
    } buf(self->rows());
    Matrix<double, Array2D_Dense<double> > LU(self->decomposeLUP(buf.pivot_num, buf.pivot));
    output_L = LU.partial(self->rows(), self->columns()).copy();
    output_U = LU.partial(self->rows(), self->columns(), 0, self->rows()).copy();
    output_P = buf.P();
  }
SWIGINTERN void Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__ud(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix< double,Array2D_Dense< double > > &output_U,Matrix< double,Array2D_Dense< double > > &output_D){
    Matrix<double, Array2D_Dense<double> > UD(self->decomposeUD());
    output_U = UD.partial(self->rows(), self->columns()).copy();
    output_D = UD.partial(self->rows(), self->columns(), 0, self->rows()).copy();
  }
SWIGINTERN void Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__qr(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix< double,Array2D_Dense< double > > &output_Q,Matrix< double,Array2D_Dense< double > > &output_R){
    Matrix<double, Array2D_Dense<double> > QR(self->decomposeQR());
    output_Q = QR.partial(self->rows(), self->rows()).copy();
    output_R = QR.partial(self->rows(), self->columns(), 0, self->rows()).copy();
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__inverse(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self){
    return (Matrix<double, Array2D_Dense<double> >)((self)->inverse());
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator/(matrix));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<double, Array2D_Dense<double> >)((self)->operator/(matrix));
  }
SWIGINTERN std::string Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__debug(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self){
    std::stringstream s;
    s << self->inspect();
    return s.str();
  }
SWIGINTERN Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__each__SWIG_0(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,void (*each_func)(double const &,double *,unsigned int const &,unsigned int const &),MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL){
    MatrixUtil::each(*self, each_func, each_which);
    return *self;
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__map__SWIG_0(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,void (*each_func)(double const &,double *,unsigned int const &,unsigned int const &),MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL){
    Matrix<double, Array2D_Dense<double> > res(self->operator Matrix<double, Array2D_Dense<double> >());
    MatrixUtil::each(*self, each_func, each_which, &res);
    return res;
  }
SWIGINTERN VALUE Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__index__SWIG_0(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL){
    try{
      MatrixUtil::each(*self, matrix_yield_check, each_which);
      return Qnil;
    }catch(const typename MatrixUtil::each_break_t &each_break){
      return rb_ary_new_from_args(2, UINT2NUM(each_break.r), UINT2NUM(each_break.c));
    }
  }
SWIGINTERN VALUE Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__index__SWIG_2(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,VALUE value,VALUE idx_selector=Qnil){
    return rb_block_call(
        rb_current_receiver(), rb_frame_callee(),
        (RTEST(idx_selector) ? 1 : 0), &idx_selector,
        (rb_block_call_func_t)rb_equal, value);
  }
SWIGINTERN VALUE Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__to_a(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self){
    unsigned int i_max(self->rows()), j_max(self->columns());
    VALUE res = rb_ary_new2(i_max);
    for(unsigned int i(0); i < i_max; ++i){
      VALUE row = rb_ary_new2(j_max);
      for(unsigned int j(0); j < j_max; ++j){
        rb_ary_store(row, j, swig::from((*(self))(i, j)));
      }
      rb_ary_store(res, i, row);
    }
    return res;
  }
SWIGINTERN std::string Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg____str__(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self){
    std::stringstream s;
    s << (*self);
    return s.str();
  }
SWIGINTERN Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__conjugate(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self){
    return MatView_f::conjugate(*self);
  }
SWIGINTERN Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__adjoint(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self){
    return MatView_f::conjugate(MatView_f::transpose(*self));
  }
SWIGINTERN Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__transpose(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self){

    return MatView_f::transpose(*self);



  }
SWIGINTERN Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__partial(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,unsigned int const &new_rows,unsigned int const &new_columns,unsigned int const &row_offset,unsigned int const &column_offset){

    return MatView_f::partial(*self, new_rows, new_columns, row_offset, column_offset);



  }
SWIGINTERN Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__row_vector(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,unsigned int const &row){

    return MatView_f::partial(*self, 1, self->columns(), row, 0);



  }
SWIGINTERN Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__column_vector(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,unsigned int const &column){

    return MatView_f::partial(*self, self->rows(), 1, 0, column);



  }
SWIGINTERN void Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__eigen(Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_V,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_D){
    typedef Matrix<Complex<double>, Array2D_Dense<Complex<double> > > cmat_t;
    cmat_t VD(self->eigen());
    output_V = VD.partial(self->rows(), self->rows()).copy();
    cmat_t D(self->rows(), self->rows());
    for(unsigned int i(0); i < self->rows(); ++i){
      D(i, i) = VD(i, self->rows());
    }
    output_D = D;
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > *new_Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg___SWIG_0(unsigned int const &rows,unsigned int const &columns,void const *replacer=NULL){
    Matrix<double, Array2D_Dense< double >, MatrixViewBase< >> res(rows, columns);
    MatrixUtil::replace(res, replacer);
    return new Matrix<double, Array2D_Dense< double >, MatrixViewBase< >>(res);
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > *new_Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg___SWIG_2(unsigned int const &rows,unsigned int const &columns,double const *serialized){
    Matrix<double, Array2D_Dense< double >, MatrixViewBase< >> res(rows, columns);
    MatrixUtil::replace(res, serialized);
    return new Matrix<double, Array2D_Dense< double >, MatrixViewBase< >>(res);
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > *new_Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg___SWIG_3(void const *replacer){
    const VALUE *value(static_cast<const VALUE *>(replacer));
    static const ID id_r(rb_intern("row_size")), id_c(rb_intern("column_size"));
    if(value && RB_TYPE_P(*value, T_ARRAY) && RB_TYPE_P(RARRAY_AREF(*value, 0), T_ARRAY)){
      Matrix<double, Array2D_Dense< double >, MatrixViewBase< >> res(
          (unsigned int)RARRAY_LEN(*value),
          (unsigned int)RARRAY_LEN(RARRAY_AREF(*value, 0)));
      MatrixUtil::replace(res, replacer);
      return new Matrix<double, Array2D_Dense< double >, MatrixViewBase< >>(res);
    }else if(value && rb_respond_to(*value, id_r) && rb_respond_to(*value, id_c)){
      unsigned int r, c; 
      VALUE v_r(rb_funcall(*value, id_r, 0, 0)), v_c(rb_funcall(*value, id_c, 0, 0));
      if(!SWIG_IsOK(SWIG_AsVal_unsigned_SS_int (v_r, &r)) || is_lt_zero_after_asval(r)
          || !SWIG_IsOK(SWIG_AsVal_unsigned_SS_int (v_c, &c)) || is_lt_zero_after_asval(c)){
        throw std::invalid_argument(
            std::string("Invalid length [")
              .append(inspect_str(v_r)).append(", ")
              .append(inspect_str(v_c)).append("]"));
      }
      Matrix<double, Array2D_Dense< double >, MatrixViewBase< >> res(r, c);
      MatrixUtil::replace(res, replacer);
      return new Matrix<double, Array2D_Dense< double >, MatrixViewBase< >>(res);
    }else{
      throw std::invalid_argument("double array [[...], ...] or Matrix is required");
    }
  }
SWIGINTERN double &Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg____setitem__(Matrix< double,Array2D_Dense< double > > *self,unsigned int const &row,unsigned int const &column,double const &value){
    return ((self)->operator()(row, column) = value);
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__getScalar(unsigned int const &size,double const &scalar){
    return Matrix<double, Array2D_Dense<double> >(
        Matrix_Frozen<double, Array2D_Dense< double >, MatrixViewBase< >>::getScalar(size, scalar));
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__getI(unsigned int const &size){
    return Matrix<double, Array2D_Dense<double> >(
        Matrix_Frozen<double, Array2D_Dense< double >, MatrixViewBase< >>::getI(size));
  }
SWIGINTERN void Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__swap_rows(Matrix< double,Array2D_Dense< double > > *self,Matrix< double,Array2D_Dense< double > >::self_t *self_p,unsigned int const &r1,unsigned int const &r2){
    self->swapRows(r1, r2);
  }
SWIGINTERN void Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__swap_columns(Matrix< double,Array2D_Dense< double > > *self,Matrix< double,Array2D_Dense< double > >::self_t *self_p,unsigned int const &c1,unsigned int const &c2){
    self->swapColumns(c1, c2);
  }
SWIGINTERN void Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__replace_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix< double,Array2D_Dense< double > > *self,Matrix< double,Array2D_Dense< double > >::self_t *self_p,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix){
    self->replace(matrix);
  }
SWIGINTERN void Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__replace_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix< double,Array2D_Dense< double > > *self,Matrix< double,Array2D_Dense< double > >::self_t *self_p,Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    self->replace(matrix);
  }
SWIGINTERN void Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__replace__SWIG_3(Matrix< double,Array2D_Dense< double > > *self,Matrix< double,Array2D_Dense< double > >::self_t *self_p,void const *replacer=NULL){
    if(!MatrixUtil::replace(*self, replacer)){
      throw std::runtime_error("Unsupported replacement");
    }
  }
SWIGINTERN void Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__replace__SWIG_5(Matrix< double,Array2D_Dense< double > > *self,Matrix< double,Array2D_Dense< double > >::self_t *self_p,double const *serialized){
    if(!MatrixUtil::replace(*self, serialized)){
      throw std::runtime_error("Unsupported replacement");
    }
  }
SWIGINTERN void Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__map_bang__SWIG_0(Matrix< double,Array2D_Dense< double > > *self,Matrix< double,Array2D_Dense< double > >::self_t *self_p,void (*each_func)(double const &,double *,unsigned int const &,unsigned int const &),MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL){
    MatrixUtil::each(*self, each_func, each_which, self);
  }
SWIGINTERN Matrix< double,Array2D_Dense< double > > &Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__resize(Matrix< double,Array2D_Dense< double > > *self,unsigned int const *r_p,unsigned int const *c_p){
    unsigned int r(r_p ? *r_p : self->rows()), c(c_p ? *c_p : self->columns());
    Matrix<double, Array2D_Dense<double > > mat_new(r, c);
    unsigned int r_min(r), c_min(c);
    if(r_min > self->rows()){r_min = self->rows();}
    if(c_min > self->columns()){c_min = self->columns();}
    mat_new.partial(r_min, c_min).replace(self->partial(r_min, c_min), false);
    return (*(self) = mat_new);
  }
SWIGINTERN Complex< double > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg____getitem__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,unsigned int const &row,unsigned int const &column){
    return (self)->operator()(row, column);
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__copy(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self){
    return self->operator Matrix<Complex< double >, Array2D_Dense<Complex< double >> >();
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__circular__SWIG_0(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,unsigned int const &row_offset,unsigned int const &column_offset,unsigned int const &new_rows,unsigned int const &new_columns){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->circular(
        row_offset, column_offset, new_rows, new_columns));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__circular__SWIG_1(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,unsigned int const &row_offset,unsigned int const &column_offset){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->circular(row_offset, column_offset));
  }
SWIGINTERN bool Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix){
    return (self)->isDifferentSize(matrix);
  }
SWIGINTERN bool Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (self)->isDifferentSize(matrix);
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sm___SWIG_0(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Complex< double > const &scalar){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator*(scalar));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sd___SWIG_0(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Complex< double > const &scalar){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator/(scalar));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Ss_(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator-());
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator+(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator+(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sa___SWIG_3(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Complex< double > const &scalar){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator+(scalar));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator-(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator-(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Ss___SWIG_3(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Complex< double > const &scalar){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator-(scalar));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->entrywise_product(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->entrywise_product(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator*(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator*(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__first_minor(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,unsigned int const &row,unsigned int const &column){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->matrix_for_minor(row, column));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__adjugate(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->adjugate());
  }
SWIGINTERN void Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__lup(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_L,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_U,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_P){
    struct buf_t {
      unsigned int pivot_len, pivot_num;
      unsigned int *pivot;
      buf_t(const unsigned int &size) 
          : pivot_len(size), pivot(new unsigned int[size]) {}
      ~buf_t(){
        delete [] pivot;
      }
      Matrix<Complex< double >, Array2D_Dense<Complex< double >> > P() const {
        Matrix<Complex< double >, Array2D_Dense<Complex< double >> > res(pivot_len, pivot_len);
        for(unsigned int i(0); i < pivot_len; ++i){
          res(i, pivot[i]) = 1;
        }
        return res;
      }
    } buf(self->rows());
    Matrix<Complex< double >, Array2D_Dense<Complex< double >> > LU(self->decomposeLUP(buf.pivot_num, buf.pivot));
    output_L = LU.partial(self->rows(), self->columns()).copy();
    output_U = LU.partial(self->rows(), self->columns(), 0, self->rows()).copy();
    output_P = buf.P();
  }
SWIGINTERN void Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__ud(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_U,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_D){
    Matrix<Complex< double >, Array2D_Dense<Complex< double >> > UD(self->decomposeUD());
    output_U = UD.partial(self->rows(), self->columns()).copy();
    output_D = UD.partial(self->rows(), self->columns(), 0, self->rows()).copy();
  }
SWIGINTERN void Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__qr(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_Q,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_R){
    Matrix<Complex< double >, Array2D_Dense<Complex< double >> > QR(self->decomposeQR());
    output_Q = QR.partial(self->rows(), self->rows()).copy();
    output_R = QR.partial(self->rows(), self->columns(), 0, self->rows()).copy();
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__inverse(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->inverse());
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator/(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator/(matrix));
  }
SWIGINTERN std::string Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__debug(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self){
    std::stringstream s;
    s << self->inspect();
    return s.str();
  }

    template <bool with_index = false, bool assign = false>
    static inline VALUE matrix_yield_internal(
        const Complex< double > &src, Complex< double > *dst, const unsigned int &i, const unsigned int &j){
      VALUE v;
      if(with_index){
        VALUE values[] = {swig::from(src), UINT2NUM(i), UINT2NUM(j)};
        v = yield_throw_if_error(3, values);
      }else{
        VALUE values[] = {swig::from(src)};
        v = yield_throw_if_error(1, values);
      }
      if(assign && !SWIG_IsOK(swig::asval(v, dst))){
        std::stringstream s;
        s << "Unknown input (Complex< double > expected) [" << i << "," << j << "]: ";
        throw std::invalid_argument(s.str().append(inspect_str(v)));
      }
      return v;
    }
    static void matrix_yield(
        const Complex< double > &src, Complex< double > *dst, const unsigned int &i, const unsigned int &j){
      matrix_yield_internal<false, false>(src, dst, i, j);
    }
    static void matrix_yield_with_index(
        const Complex< double > &src, Complex< double > *dst, const unsigned int &i, const unsigned int &j){
      matrix_yield_internal<true, false>(src, dst, i, j);
    }
    static void matrix_yield_get(
        const Complex< double > &src, Complex< double > *dst, const unsigned int &i, const unsigned int &j){
      matrix_yield_internal<false, true>(src, dst, i, j);
    }
    static void matrix_yield_get_with_index(
        const Complex< double > &src, Complex< double > *dst, const unsigned int &i, const unsigned int &j){
      matrix_yield_internal<true, true>(src, dst, i, j);
    }
    
    static void matrix_yield_check(
        const Complex< double > &src, Complex< double > *dst, const unsigned int &i, const unsigned int &j){
      VALUE res(matrix_yield_internal<false, false>(src, dst, i, j));
      if(RTEST(res)){throw typename MatrixUtil::each_break_t(i, j);}
    }
    static void (*matrix_each(const Complex< double > *))
        (const Complex< double > &, Complex< double > *, const unsigned int &, const unsigned int &) {
      ID id_thisf(rb_frame_this_func()), id_callee(rb_frame_callee());
      static const ID 
          id_map(rb_intern("map")), id_mapb(rb_intern("map!")),
          id_eachwi(rb_intern("each_with_index"));
      if((id_thisf == id_map) || (id_thisf == id_mapb)){
        static const ID with_index[] = {
            rb_intern("map_with_index"), rb_intern("map_with_index!"), 
            rb_intern("collect_with_index"), rb_intern("collect_with_index!")};
        for(std::size_t i(0); i < sizeof(with_index) / sizeof(with_index[0]); ++i){
          if(id_callee == with_index[i]){
            return matrix_yield_get_with_index;
          }
        }
        return matrix_yield_get;
      }else if(id_callee == id_eachwi){
        return matrix_yield_with_index;
      }else{
        return matrix_yield;
      }     
    }
  
SWIGINTERN Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__each__SWIG_0(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,void (*each_func)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &),MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL){
    MatrixUtil::each(*self, each_func, each_which);
    return *self;
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__map__SWIG_0(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,void (*each_func)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &),MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL){
    Matrix<Complex< double >, Array2D_Dense<Complex< double >> > res(self->operator Matrix<Complex< double >, Array2D_Dense<Complex< double >> >());
    MatrixUtil::each(*self, each_func, each_which, &res);
    return res;
  }
SWIGINTERN VALUE Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__index__SWIG_0(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL){
    try{
      MatrixUtil::each(*self, matrix_yield_check, each_which);
      return Qnil;
    }catch(const typename MatrixUtil::each_break_t &each_break){
      return rb_ary_new_from_args(2, UINT2NUM(each_break.r), UINT2NUM(each_break.c));
    }
  }
SWIGINTERN VALUE Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__index__SWIG_2(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,VALUE value,VALUE idx_selector=Qnil){
    return rb_block_call(
        rb_current_receiver(), rb_frame_callee(),
        (RTEST(idx_selector) ? 1 : 0), &idx_selector,
        (rb_block_call_func_t)rb_equal, value);
  }
SWIGINTERN VALUE Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__to_a(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self){
    unsigned int i_max(self->rows()), j_max(self->columns());
    VALUE res = rb_ary_new2(i_max);
    for(unsigned int i(0); i < i_max; ++i){
      VALUE row = rb_ary_new2(j_max);
      for(unsigned int j(0); j < j_max; ++j){
        rb_ary_store(row, j, swig::from((*(self))(i, j)));
      }
      rb_ary_store(res, i, row);
    }
    return res;
  }
SWIGINTERN std::string Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg____str__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self){
    std::stringstream s;
    s << (*self);
    return s.str();
  }
SWIGINTERN Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__conjugate(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self){
    return MatView_f::conjugate(*self);
  }
SWIGINTERN Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__adjoint(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self){
    return MatView_f::conjugate(MatView_f::transpose(*self));
  }
SWIGINTERN Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__transpose(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self){

    return MatView_f::transpose(*self);



  }
SWIGINTERN Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__partial(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,unsigned int const &new_rows,unsigned int const &new_columns,unsigned int const &row_offset,unsigned int const &column_offset){

    return MatView_f::partial(*self, new_rows, new_columns, row_offset, column_offset);



  }
SWIGINTERN Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__row_vector(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,unsigned int const &row){

    return MatView_f::partial(*self, 1, self->columns(), row, 0);



  }
SWIGINTERN Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__column_vector(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,unsigned int const &column){

    return MatView_f::partial(*self, self->rows(), 1, 0, column);



  }
SWIGINTERN void Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__eigen(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_V,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_D){
    typedef Matrix<Complex<double>, Array2D_Dense<Complex<double> > > cmat_t;
    cmat_t VD(self->eigen());
    output_V = VD.partial(self->rows(), self->rows()).copy();
    cmat_t D(self->rows(), self->rows());
    for(unsigned int i(0); i < self->rows(); ++i){
      D(i, i) = VD(i, self->rows());
    }
    output_D = D;
  }
SWIGINTERN Complex< double > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg____getitem__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,unsigned int const &row,unsigned int const &column){
    return (self)->operator()(row, column);
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__copy(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self){
    return self->operator Matrix<Complex< double >, Array2D_Dense<Complex< double >> >();
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__circular__SWIG_0(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,unsigned int const &row_offset,unsigned int const &column_offset,unsigned int const &new_rows,unsigned int const &new_columns){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->circular(
        row_offset, column_offset, new_rows, new_columns));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__circular__SWIG_1(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,unsigned int const &row_offset,unsigned int const &column_offset){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->circular(row_offset, column_offset));
  }
SWIGINTERN bool Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix){
    return (self)->isDifferentSize(matrix);
  }
SWIGINTERN bool Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (self)->isDifferentSize(matrix);
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sm___SWIG_0(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Complex< double > const &scalar){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator*(scalar));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sd___SWIG_0(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Complex< double > const &scalar){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator/(scalar));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Ss_(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator-());
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator+(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator+(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sa___SWIG_3(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Complex< double > const &scalar){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator+(scalar));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator-(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator-(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Ss___SWIG_3(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Complex< double > const &scalar){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator-(scalar));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->entrywise_product(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->entrywise_product(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator*(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator*(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__first_minor(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,unsigned int const &row,unsigned int const &column){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->matrix_for_minor(row, column));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__adjugate(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->adjugate());
  }
SWIGINTERN void Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__lup(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_L,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_U,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_P){
    struct buf_t {
      unsigned int pivot_len, pivot_num;
      unsigned int *pivot;
      buf_t(const unsigned int &size) 
          : pivot_len(size), pivot(new unsigned int[size]) {}
      ~buf_t(){
        delete [] pivot;
      }
      Matrix<Complex< double >, Array2D_Dense<Complex< double >> > P() const {
        Matrix<Complex< double >, Array2D_Dense<Complex< double >> > res(pivot_len, pivot_len);
        for(unsigned int i(0); i < pivot_len; ++i){
          res(i, pivot[i]) = 1;
        }
        return res;
      }
    } buf(self->rows());
    Matrix<Complex< double >, Array2D_Dense<Complex< double >> > LU(self->decomposeLUP(buf.pivot_num, buf.pivot));
    output_L = LU.partial(self->rows(), self->columns()).copy();
    output_U = LU.partial(self->rows(), self->columns(), 0, self->rows()).copy();
    output_P = buf.P();
  }
SWIGINTERN void Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__ud(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_U,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_D){
    Matrix<Complex< double >, Array2D_Dense<Complex< double >> > UD(self->decomposeUD());
    output_U = UD.partial(self->rows(), self->columns()).copy();
    output_D = UD.partial(self->rows(), self->columns(), 0, self->rows()).copy();
  }
SWIGINTERN void Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__qr(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_Q,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_R){
    Matrix<Complex< double >, Array2D_Dense<Complex< double >> > QR(self->decomposeQR());
    output_Q = QR.partial(self->rows(), self->rows()).copy();
    output_R = QR.partial(self->rows(), self->columns(), 0, self->rows()).copy();
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__inverse(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->inverse());
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator/(matrix));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    return (Matrix<Complex< double >, Array2D_Dense<Complex< double >> >)((self)->operator/(matrix));
  }
SWIGINTERN std::string Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__debug(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self){
    std::stringstream s;
    s << self->inspect();
    return s.str();
  }
SWIGINTERN Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__each__SWIG_0(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,void (*each_func)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &),MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL){
    MatrixUtil::each(*self, each_func, each_which);
    return *self;
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__map__SWIG_0(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,void (*each_func)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &),MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL){
    Matrix<Complex< double >, Array2D_Dense<Complex< double >> > res(self->operator Matrix<Complex< double >, Array2D_Dense<Complex< double >> >());
    MatrixUtil::each(*self, each_func, each_which, &res);
    return res;
  }
SWIGINTERN VALUE Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__index__SWIG_0(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL){
    try{
      MatrixUtil::each(*self, matrix_yield_check, each_which);
      return Qnil;
    }catch(const typename MatrixUtil::each_break_t &each_break){
      return rb_ary_new_from_args(2, UINT2NUM(each_break.r), UINT2NUM(each_break.c));
    }
  }
SWIGINTERN VALUE Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__index__SWIG_2(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,VALUE value,VALUE idx_selector=Qnil){
    return rb_block_call(
        rb_current_receiver(), rb_frame_callee(),
        (RTEST(idx_selector) ? 1 : 0), &idx_selector,
        (rb_block_call_func_t)rb_equal, value);
  }
SWIGINTERN VALUE Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__to_a(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self){
    unsigned int i_max(self->rows()), j_max(self->columns());
    VALUE res = rb_ary_new2(i_max);
    for(unsigned int i(0); i < i_max; ++i){
      VALUE row = rb_ary_new2(j_max);
      for(unsigned int j(0); j < j_max; ++j){
        rb_ary_store(row, j, swig::from((*(self))(i, j)));
      }
      rb_ary_store(res, i, row);
    }
    return res;
  }
SWIGINTERN std::string Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg____str__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self){
    std::stringstream s;
    s << (*self);
    return s.str();
  }
SWIGINTERN Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__conjugate(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self){
    return MatView_f::conjugate(*self);
  }
SWIGINTERN Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__adjoint(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self){
    return MatView_f::conjugate(MatView_f::transpose(*self));
  }
SWIGINTERN Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__transpose(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self){

    return MatView_f::transpose(*self);



  }
SWIGINTERN Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__partial(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,unsigned int const &new_rows,unsigned int const &new_columns,unsigned int const &row_offset,unsigned int const &column_offset){

    return MatView_f::partial(*self, new_rows, new_columns, row_offset, column_offset);



  }
SWIGINTERN Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__row_vector(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,unsigned int const &row){

    return MatView_f::partial(*self, 1, self->columns(), row, 0);



  }
SWIGINTERN Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__column_vector(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,unsigned int const &column){

    return MatView_f::partial(*self, self->rows(), 1, 0, column);



  }
SWIGINTERN void Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__eigen(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_V,Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &output_D){
    typedef Matrix<Complex<double>, Array2D_Dense<Complex<double> > > cmat_t;
    cmat_t VD(self->eigen());
    output_V = VD.partial(self->rows(), self->rows()).copy();
    cmat_t D(self->rows(), self->rows());
    for(unsigned int i(0); i < self->rows(); ++i){
      D(i, i) = VD(i, self->rows());
    }
    output_D = D;
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *new_Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg___SWIG_0(unsigned int const &rows,unsigned int const &columns,void const *replacer=NULL){
    Matrix<Complex< double >, Array2D_Dense< Complex< double > >, MatrixViewBase< >> res(rows, columns);
    MatrixUtil::replace(res, replacer);
    return new Matrix<Complex< double >, Array2D_Dense< Complex< double > >, MatrixViewBase< >>(res);
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *new_Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg___SWIG_2(unsigned int const &rows,unsigned int const &columns,Complex< double > const *serialized){
    Matrix<Complex< double >, Array2D_Dense< Complex< double > >, MatrixViewBase< >> res(rows, columns);
    MatrixUtil::replace(res, serialized);
    return new Matrix<Complex< double >, Array2D_Dense< Complex< double > >, MatrixViewBase< >>(res);
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *new_Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg___SWIG_3(void const *replacer){
    const VALUE *value(static_cast<const VALUE *>(replacer));
    static const ID id_r(rb_intern("row_size")), id_c(rb_intern("column_size"));
    if(value && RB_TYPE_P(*value, T_ARRAY) && RB_TYPE_P(RARRAY_AREF(*value, 0), T_ARRAY)){
      Matrix<Complex< double >, Array2D_Dense< Complex< double > >, MatrixViewBase< >> res(
          (unsigned int)RARRAY_LEN(*value),
          (unsigned int)RARRAY_LEN(RARRAY_AREF(*value, 0)));
      MatrixUtil::replace(res, replacer);
      return new Matrix<Complex< double >, Array2D_Dense< Complex< double > >, MatrixViewBase< >>(res);
    }else if(value && rb_respond_to(*value, id_r) && rb_respond_to(*value, id_c)){
      unsigned int r, c; 
      VALUE v_r(rb_funcall(*value, id_r, 0, 0)), v_c(rb_funcall(*value, id_c, 0, 0));
      if(!SWIG_IsOK(SWIG_AsVal_unsigned_SS_int (v_r, &r)) || is_lt_zero_after_asval(r)
          || !SWIG_IsOK(SWIG_AsVal_unsigned_SS_int (v_c, &c)) || is_lt_zero_after_asval(c)){
        throw std::invalid_argument(
            std::string("Invalid length [")
              .append(inspect_str(v_r)).append(", ")
              .append(inspect_str(v_c)).append("]"));
      }
      Matrix<Complex< double >, Array2D_Dense< Complex< double > >, MatrixViewBase< >> res(r, c);
      MatrixUtil::replace(res, replacer);
      return new Matrix<Complex< double >, Array2D_Dense< Complex< double > >, MatrixViewBase< >>(res);
    }else{
      throw std::invalid_argument("double array [[...], ...] or Matrix is required");
    }
  }
SWIGINTERN Complex< double > &Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg____setitem__(Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *self,unsigned int const &row,unsigned int const &column,Complex< double > const &value){
    return ((self)->operator()(row, column) = value);
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__getScalar(unsigned int const &size,Complex< double > const &scalar){
    return Matrix<Complex< double >, Array2D_Dense<Complex< double >> >(
        Matrix_Frozen<Complex< double >, Array2D_Dense< Complex< double > >, MatrixViewBase< >>::getScalar(size, scalar));
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__getI(unsigned int const &size){
    return Matrix<Complex< double >, Array2D_Dense<Complex< double >> >(
        Matrix_Frozen<Complex< double >, Array2D_Dense< Complex< double > >, MatrixViewBase< >>::getI(size));
  }
SWIGINTERN void Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__swap_rows(Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *self_p,unsigned int const &r1,unsigned int const &r2){
    self->swapRows(r1, r2);
  }
SWIGINTERN void Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__swap_columns(Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *self_p,unsigned int const &c1,unsigned int const &c2){
    self->swapColumns(c1, c2);
  }
SWIGINTERN void Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__replace_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *self_p,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix){
    self->replace(matrix);
  }
SWIGINTERN void Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__replace_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *self_p,Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix){
    self->replace(matrix);
  }
SWIGINTERN void Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__replace__SWIG_3(Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *self_p,void const *replacer=NULL){
    if(!MatrixUtil::replace(*self, replacer)){
      throw std::runtime_error("Unsupported replacement");
    }
  }
SWIGINTERN void Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__replace__SWIG_5(Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *self_p,Complex< double > const *serialized){
    if(!MatrixUtil::replace(*self, serialized)){
      throw std::runtime_error("Unsupported replacement");
    }
  }
SWIGINTERN void Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__map_bang__SWIG_0(Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *self,Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *self_p,void (*each_func)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &),MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL){
    MatrixUtil::each(*self, each_func, each_which, self);
  }
SWIGINTERN Matrix< Complex< double >,Array2D_Dense< Complex< double > > > &Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__resize(Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *self,unsigned int const *r_p,unsigned int const *c_p){
    unsigned int r(r_p ? *r_p : self->rows()), c(c_p ? *c_p : self->columns());
    Matrix<Complex<double>, Array2D_Dense<Complex<double> > > mat_new(r, c);
    unsigned int r_min(r), c_min(c);
    if(r_min > self->rows()){r_min = self->rows();}
    if(c_min > self->columns()){c_min = self->columns();}
    mat_new.partial(r_min, c_min).replace(self->partial(r_min, c_min), false);
    return (*(self) = mat_new);
  }

double set_tolerance(const double &width){
  MatrixValue<double>::zero = width;
  MatrixValue<Complex<double> >::zero = width;
  return width;
}
double get_tolerance(){
  return set_tolerance(MatrixValue<double>::zero.width);
}

static swig_class SwigClassGC_VALUE;

/*
  Document-method: GPS_PVT::SylphideMath::GC_VALUE.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_inspect(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::GC_VALUE.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_to_s(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-class: GPS_PVT::SylphideMath::ComplexD

  Proxy of C++ GPS_PVT::SylphideMath::ComplexD class


*/
static swig_class SwigClassComplexD;

/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.new

  call-seq:
    ComplexD.new(double const & real, double const & imaginary)
    ComplexD.new(double const & real)
    ComplexD.new
    ComplexD.new(ComplexD other)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_ComplexD__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  Complex< double > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","Complex<(double)>", 1, argv[0] ));
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Complex<(double)>", 2, argv[1] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (Complex< double > *)new Complex< double >((double const &)*arg1,(double const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ComplexD__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double *arg1 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  Complex< double > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","Complex<(double)>", 1, argv[0] ));
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  result = (Complex< double > *)new Complex< double >((double const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ComplexD__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Complex< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Complex< double > *)new Complex< double >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Complex_Sl_double_Sg_(void *self) {
    Complex< double > *arg1 = (Complex< double > *)self;
    delete arg1;
}

/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.polar

  call-seq:
    polar(double const & r, double const & theta=double(0)) -> ComplexD
    polar(double const & r) -> ComplexD

A class method.

*/
SWIGINTERN VALUE
_wrap_ComplexD_polar__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","Complex<(double)>::polar", 1, argv[0] ));
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Complex<(double)>::polar", 2, argv[1] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = Complex< double >::SWIGTEMPLATEDISAMBIGUATOR polar((double const &)*arg1,(double const &)*arg2);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ComplexD_polar__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double *arg1 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","Complex<(double)>::polar", 1, argv[0] ));
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  result = Complex< double >::SWIGTEMPLATEDISAMBIGUATOR polar((double const &)*arg1);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ComplexD_polar(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ComplexD_polar__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ComplexD_polar__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "ComplexD.polar", 
    "    Complex< double > ComplexD.polar(double const &r, double const &theta)\n"
    "    Complex< double > ComplexD.polar(double const &r)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.infinite?

  call-seq:
    infinite? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD_infiniteq___(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","isinf", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  result = (bool)((Complex< double > const *)arg1)->isinf();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.finite?

  call-seq:
    finite? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD_finiteq___(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","isfinite", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  result = (bool)((Complex< double > const *)arg1)->isfinite();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.abs2

  call-seq:
    abs2 -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD_abs2(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","abs2", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  result = (double)((Complex< double > const *)arg1)->abs2();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.abs

  call-seq:
    abs -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD_abs(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","abs", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  result = (double)((Complex< double > const *)arg1)->abs();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.arg

  call-seq:
    arg -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD_arg(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","arg", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  result = (double)((Complex< double > const *)arg1)->arg();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.power

  call-seq:
    power(double const & factor) -> ComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD_power(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","power", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","power", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = ((Complex< double > const *)arg1)->power((double const &)*arg2);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.sqrt

  call-seq:
    sqrt -> ComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD_sqrt(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","sqrt", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  result = ((Complex< double > const *)arg1)->sqrt();
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.conjugate

  call-seq:
    conjugate -> ComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD_conjugate(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","conjugate", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  result = ((Complex< double > const *)arg1)->conjugate();
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.==

  call-seq:
    ==(complex) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ComplexD___eq__(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  Complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > temp2 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  {
    if((!SWIG_IsOK(swig::asptr(argv[0], &arg2)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg2 = &temp2))))){
      SWIG_exception(SWIG_TypeError, "in method 'operator ==', expecting type Complex< double >");
    }
  }
  result = (bool)((Complex< double > const *)arg1)->operator ==((Complex< double > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.+

  call-seq:
    +(scalar) -> ComplexD
    +(complex) -> ComplexD

Add operator.
*/
SWIGINTERN VALUE
_wrap_ComplexD___add____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator +", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = ((Complex< double > const *)arg1)->operator +((double const &)*arg2);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.-

  call-seq:
    -(scalar) -> ComplexD
    -(complex) -> ComplexD

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_ComplexD___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator -", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = ((Complex< double > const *)arg1)->operator -((double const &)*arg2);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.*

  call-seq:
    *(double const & scalar) -> ComplexD
    *(ComplexD complex) -> ComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator *", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = ((Complex< double > const *)arg1)->operator *((double const &)*arg2);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD./

  call-seq:
    /(double const & scalar) -> ComplexD
    /(ComplexD complex) -> ComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD___div____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator /", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = ((Complex< double > const *)arg1)->operator /((double const &)*arg2);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.-@

  call-seq:
    -@ -> ComplexD

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_ComplexD___neg__(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  result = ((Complex< double > const *)arg1)->operator -();
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.+

  call-seq:
    +(scalar) -> ComplexD
    +(complex) -> ComplexD

Add operator.
*/
SWIGINTERN VALUE
_wrap_ComplexD___add____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  Complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > temp2 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  {
    if((!SWIG_IsOK(swig::asptr(argv[0], &arg2)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg2 = &temp2))))){
      SWIG_exception(SWIG_TypeError, "in method 'operator +', expecting type Complex< double >");
    }
  }
  result = ((Complex< double > const *)arg1)->operator +((Complex< double > const &)*arg2);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ComplexD___add__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ComplexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = swig::check<Complex< double > * >(argv[1]) || swig::check<Complex< double > >(argv[1]);
      }
      if (_v) {
        return _wrap_ComplexD___add____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ComplexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ComplexD___add____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ComplexD.__add__", 
    "    Complex< double > ComplexD.__add__(double const &scalar)\n"
    "    Complex< double > ComplexD.__add__(Complex< double > const &complex)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.-

  call-seq:
    -(scalar) -> ComplexD
    -(complex) -> ComplexD

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_ComplexD___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  Complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > temp2 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  {
    if((!SWIG_IsOK(swig::asptr(argv[0], &arg2)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg2 = &temp2))))){
      SWIG_exception(SWIG_TypeError, "in method 'operator -', expecting type Complex< double >");
    }
  }
  result = ((Complex< double > const *)arg1)->operator -((Complex< double > const &)*arg2);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ComplexD___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ComplexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = swig::check<Complex< double > * >(argv[1]) || swig::check<Complex< double > >(argv[1]);
      }
      if (_v) {
        return _wrap_ComplexD___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ComplexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ComplexD___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ComplexD.__sub__", 
    "    Complex< double > ComplexD.__sub__(double const &scalar)\n"
    "    Complex< double > ComplexD.__sub__(Complex< double > const &complex)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.*

  call-seq:
    *(double const & scalar) -> ComplexD
    *(ComplexD complex) -> ComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  Complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > temp2 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  {
    if((!SWIG_IsOK(swig::asptr(argv[0], &arg2)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg2 = &temp2))))){
      SWIG_exception(SWIG_TypeError, "in method 'operator *', expecting type Complex< double >");
    }
  }
  result = ((Complex< double > const *)arg1)->operator *((Complex< double > const &)*arg2);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ComplexD___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ComplexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = swig::check<Complex< double > * >(argv[1]) || swig::check<Complex< double > >(argv[1]);
      }
      if (_v) {
        return _wrap_ComplexD___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ComplexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ComplexD___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ComplexD.__mul__", 
    "    Complex< double > ComplexD.__mul__(double const &scalar)\n"
    "    Complex< double > ComplexD.__mul__(Complex< double > const &complex)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD./

  call-seq:
    /(double const & scalar) -> ComplexD
    /(ComplexD complex) -> ComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD___div____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  Complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > temp2 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  {
    if((!SWIG_IsOK(swig::asptr(argv[0], &arg2)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg2 = &temp2))))){
      SWIG_exception(SWIG_TypeError, "in method 'operator /', expecting type Complex< double >");
    }
  }
  result = ((Complex< double > const *)arg1)->operator /((Complex< double > const &)*arg2);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ComplexD___div__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ComplexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = swig::check<Complex< double > * >(argv[1]) || swig::check<Complex< double > >(argv[1]);
      }
      if (_v) {
        return _wrap_ComplexD___div____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ComplexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ComplexD___div____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ComplexD.__div__", 
    "    Complex< double > ComplexD.__div__(double const &scalar)\n"
    "    Complex< double > ComplexD.__div__(Complex< double > const &complex)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.exp

  call-seq:
    exp(double const & imaginary) -> ComplexD
    exp(double const & real, double const & imaginary) -> ComplexD
    exp(ComplexD complex) -> ComplexD

A class method.

*/
SWIGINTERN VALUE
_wrap_ComplexD_exp__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double *arg1 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","Complex<(double)>::exp", 1, argv[0] ));
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  result = Complex< double >::SWIGTEMPLATEDISAMBIGUATOR exp((double const &)*arg1);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ComplexD_exp__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","Complex<(double)>::exp", 1, argv[0] ));
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Complex<(double)>::exp", 2, argv[1] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = Complex< double >::SWIGTEMPLATEDISAMBIGUATOR exp((double const &)*arg1,(double const &)*arg2);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ComplexD_exp__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = 0 ;
  Complex< double > temp1 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    if((!SWIG_IsOK(swig::asptr(argv[0], &arg1)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg1 = &temp1))))){
      SWIG_exception(SWIG_TypeError, "in method 'Complex<(double)>::exp', expecting type Complex< double >");
    }
  }
  result = Complex< double >::SWIGTEMPLATEDISAMBIGUATOR exp((Complex< double > const &)*arg1);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ComplexD_exp(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    {
      _v = swig::check<Complex< double > * >(argv[0]) || swig::check<Complex< double > >(argv[0]);
    }
    if (_v) {
      return _wrap_ComplexD_exp__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ComplexD_exp__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ComplexD_exp__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "ComplexD.exp", 
    "    Complex< double > ComplexD.exp(double const &imaginary)\n"
    "    Complex< double > ComplexD.exp(double const &real, double const &imaginary)\n"
    "    Complex< double > ComplexD.exp(Complex< double > const &complex)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.rectangular

  call-seq:
    rectangular(double const & r, double const & i=double(0)) -> ComplexD
    rectangular(double const & r) -> ComplexD

A class method.

*/
SWIGINTERN VALUE
_wrap_ComplexD_rectangular__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","Complex_Sl_double_Sg__rectangular__SWIG_0", 1, argv[0] ));
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Complex_Sl_double_Sg__rectangular__SWIG_0", 2, argv[1] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = Complex_Sl_double_Sg__rectangular__SWIG_0((double const &)*arg1,(double const &)*arg2);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ComplexD_rectangular__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double *arg1 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","Complex_Sl_double_Sg__rectangular__SWIG_0", 1, argv[0] ));
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  result = Complex_Sl_double_Sg__rectangular__SWIG_0((double const &)*arg1);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ComplexD_rectangular(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ComplexD_rectangular__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ComplexD_rectangular__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "rectangular", 
    "    Complex< double > rectangular(double const &r, double const &i)\n"
    "    Complex< double > rectangular(double const &r)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.real=

  call-seq:
    real=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD_reale___(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > *","set_real", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_real", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (double)Complex_Sl_double_Sg__set_real(arg1,(double const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.real

  call-seq:
    real -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD_real(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > *","get_real", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  result = (double)Complex_Sl_double_Sg__get_real(arg1);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.imaginary=

  call-seq:
    imaginary=(double const & v) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD_imaginarye___(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > *","set_imaginary", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","set_imaginary", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (double)Complex_Sl_double_Sg__set_imaginary(arg1,(double const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.imaginary

  call-seq:
    imaginary -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD_imaginary(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > *","get_imaginary", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  result = (double)Complex_Sl_double_Sg__get_imaginary(arg1);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.to_s

  call-seq:
    to_s -> std::string

An instance method.

*/
SWIGINTERN VALUE
_wrap_ComplexD___str__(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = (Complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Complex< double > const *","__str__", 1, self )); 
  }
  arg1 = reinterpret_cast< Complex< double > * >(argp1);
  result = Complex_Sl_double_Sg____str__((Complex< double > const *)arg1);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ComplexD_allocate(VALUE self)
#else
_wrap_ComplexD_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_ComplexT_double_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: GPS_PVT::SylphideMath::ComplexD.new

  call-seq:
    ComplexD.new(double const & real, double const & imaginary)
    ComplexD.new(double const & real)
    ComplexD.new
    ComplexD.new(ComplexD other)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_ComplexD__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Complex< double > *arg1 = 0 ;
  Complex< double > temp1 ;
  Complex< double > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    if((!SWIG_IsOK(swig::asptr(argv[0], &arg1)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg1 = &temp1))))){
      SWIG_exception(SWIG_TypeError, "in method 'Complex<(double)>', expecting type Complex< double >");
    }
  }
  result = (Complex< double > *)new Complex< double >((Complex< double > const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ComplexD(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ComplexD__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      _v = swig::check<Complex< double > * >(argv[0]) || swig::check<Complex< double > >(argv[0]);
    }
    if (_v) {
      return _wrap_new_ComplexD__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ComplexD__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ComplexD__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "ComplexD.new", 
    "    ComplexD.new(double const &real, double const &imaginary)\n"
    "    ComplexD.new(double const &real)\n"
    "    ComplexD.new()\n"
    "    ComplexD.new(Complex< double > const &other)\n");
  
  return Qnil;
}


/*
  Document-class: GPS_PVT::SylphideMath::Matrix_FrozenD

  Proxy of C++ GPS_PVT::SylphideMath::Matrix_FrozenD class


*/
static swig_class SwigClassMatrix_FrozenD;

/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.rows

  call-seq:
    rows -> unsigned int const

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_rows(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *","rows", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = (unsigned int)(arg1)->rows();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.columns

  call-seq:
    columns -> unsigned int const

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_columns(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *","columns", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = (unsigned int)(arg1)->columns();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.square?

  call-seq:
    square? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_squareq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","isSquare", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->isSquare();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.diagonal?

  call-seq:
    diagonal? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_diagonalq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","isDiagonal", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->isDiagonal();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.lower_triangular?

  call-seq:
    lower_triangular? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_lower_triangularq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","isLowerTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->isLowerTriangular();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.upper_triangular?

  call-seq:
    upper_triangular? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_upper_triangularq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","isUpperTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->isUpperTriangular();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.symmetric?

  call-seq:
    symmetric? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_symmetricq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","isSymmetric", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->isSymmetric();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.hermitian?

  call-seq:
    hermitian? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_hermitianq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","isHermitian", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->isHermitian();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.skew_symmetric?

  call-seq:
    skew_symmetric? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_skew_symmetricq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","isSkewSymmetric", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->isSkewSymmetric();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.normal?

  call-seq:
    normal? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_normalq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","isNormal", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->isNormal();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.orthogonal?

  call-seq:
    orthogonal? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_orthogonalq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","isOrthogonal", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->isOrthogonal();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.unitary?

  call-seq:
    unitary? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_unitaryq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","isUnitary", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->isUnitary();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.trace

  call-seq:
    trace -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_trace(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","trace", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  try {
    result = (double)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->trace();
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.sum

  call-seq:
    sum -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_sum(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","sum", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = (double)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->sum();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.determinant

  call-seq:
    determinant -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_determinant(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","determinant", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  try {
    result = (double)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->determinant();
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.rank

  call-seq:
    rank -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_rank(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","rank", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  try {
    result = (unsigned int)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->rank();
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.cofactor

  call-seq:
    cofactor(unsigned int const & row, unsigned int const & column) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_cofactor(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","cofactor", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","cofactor", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","cofactor", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  try {
    result = (double)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->cofactor((unsigned int const &)*arg2,(unsigned int const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.[]

  call-seq:
    [](row, column) -> double

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD___getitem__(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","__getitem__", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","__getitem__", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  result = (double)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg____getitem__((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.copy

  call-seq:
    copy -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_copy(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","copy", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__copy((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.circular

  call-seq:
    circular(unsigned int const & row_offset, unsigned int const & column_offset, unsigned int const & new_rows, 
    unsigned int const & new_columns) -> MatrixD
    circular(unsigned int const & row_offset, unsigned int const & column_offset) -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_circular__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int temp5 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","circular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","circular", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","circular", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","circular", 4, argv[2] ));
  } 
  temp4 = static_cast< unsigned int >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "unsigned int","circular", 5, argv[3] ));
  } 
  temp5 = static_cast< unsigned int >(val5);
  arg5 = &temp5;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  raise_if_lt_zero_after_asval(*arg4);
  raise_if_lt_zero_after_asval(*arg5);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__circular__SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_circular__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","circular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","circular", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","circular", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__circular__SWIG_1((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_circular(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matrix_FrozenD_circular__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Matrix_FrozenD_circular__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "circular", 
    "    Matrix< double,Array2D_Dense< double > > circular(unsigned int const &row_offset, unsigned int const &column_offset, unsigned int const &new_rows, unsigned int const &new_columns)\n"
    "    Matrix< double,Array2D_Dense< double > > circular(unsigned int const &row_offset, unsigned int const &column_offset)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.==

  call-seq:
    ==(matrix) -> bool
    ==(matrix) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD___eq____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","operator ==<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator ==<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator ==<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > * >(argp2);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR operator ==((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD___eq____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","operator ==<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator ==<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator ==<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR operator ==((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD___eq__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD___eq____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD___eq____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__eq__", 
    "    bool __eq__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix)\n"
    "    bool __eq__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.different_size?

  call-seq:
    different_size?(Matrix_FrozenD matrix) -> bool
    different_size?(Matrix_FrozenD_f matrix) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_different_sizeq_____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","isDifferentSize<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > * >(argp2);
  result = (bool)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_different_sizeq_____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","isDifferentSize<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  result = (bool)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_different_sizeq___(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_different_sizeq_____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_different_sizeq_____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "different_size?", 
    "    bool different_size?(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix)\n"
    "    bool different_size?(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.*

  call-seq:
    *(double const & scalar) -> MatrixD
    *(Matrix_FrozenD matrix) -> MatrixD
    *(Matrix_FrozenD_f matrix) -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator *", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sm___SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(double const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD./

  call-seq:
    /(double const & scalar) -> MatrixD
    /(Matrix_FrozenD matrix) -> MatrixD
    /(Matrix_FrozenD_f matrix) -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD___div____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator /", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sd___SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(double const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.-@

  call-seq:
    -@ -> MatrixD

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD___neg__(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Ss_((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.+

  call-seq:
    +(matrix) -> MatrixD
    +(matrix) -> MatrixD
    +(scalar) -> MatrixD

Add operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD___add____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","operator +<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator +<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator +<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD___add____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","operator +<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator +<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator +<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD___add____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator +", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sa___SWIG_3((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(double const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD___add__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD___add____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD___add____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix_FrozenD___add____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__add__", 
    "    Matrix< double,Array2D_Dense< double > > __add__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< double,Array2D_Dense< double > > __add__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n"
    "    Matrix< double,Array2D_Dense< double > > __add__(double const &scalar)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.-

  call-seq:
    -(matrix) -> MatrixD
    -(matrix) -> MatrixD
    -(scalar) -> MatrixD

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","operator -<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator -<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator -<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD___sub____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","operator -<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator -<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator -<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD___sub____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator -", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Ss___SWIG_3((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(double const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD___sub____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix_FrozenD___sub____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__", 
    "    Matrix< double,Array2D_Dense< double > > __sub__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< double,Array2D_Dense< double > > __sub__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n"
    "    Matrix< double,Array2D_Dense< double > > __sub__(double const &scalar)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.entrywise_product

  call-seq:
    entrywise_product(Matrix_FrozenD matrix) -> MatrixD
    entrywise_product(Matrix_FrozenD_f matrix) -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_entrywise_product__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","entrywise_product<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_entrywise_product__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","entrywise_product<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_entrywise_product(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_entrywise_product__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_entrywise_product__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "entrywise_product", 
    "    Matrix< double,Array2D_Dense< double > > entrywise_product(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< double,Array2D_Dense< double > > entrywise_product(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.*

  call-seq:
    *(double const & scalar) -> MatrixD
    *(Matrix_FrozenD matrix) -> MatrixD
    *(Matrix_FrozenD_f matrix) -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","operator *<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator *<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator *<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD___mul____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","operator *<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator *<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator *<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD___mul____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix_FrozenD___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__mul__", 
    "    Matrix< double,Array2D_Dense< double > > __mul__(double const &scalar)\n"
    "    Matrix< double,Array2D_Dense< double > > __mul__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< double,Array2D_Dense< double > > __mul__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.first_minor

  call-seq:
    first_minor(unsigned int const & row, unsigned int const & column) -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_first_minor(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","first_minor", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","first_minor", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","first_minor", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__first_minor((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.adjugate

  call-seq:
    adjugate -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_adjugate(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","adjugate", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__adjugate((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.lup

  call-seq:
    lup

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_lup(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix< double,Array2D_Dense< double > > *arg2 = 0 ;
  Matrix< double,Array2D_Dense< double > > *arg3 = 0 ;
  Matrix< double,Array2D_Dense< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< double,Array2D_Dense< double > > temp2 ;
  Matrix< double,Array2D_Dense< double > > temp3 ;
  Matrix< double,Array2D_Dense< double > > temp4 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  
  arg4 = &temp4;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","lup", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  try {
    Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__lup((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,*arg2,*arg3,*arg4);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(*arg2)), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(*arg3)), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(*arg4)), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.ud

  call-seq:
    ud

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_ud(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix< double,Array2D_Dense< double > > *arg2 = 0 ;
  Matrix< double,Array2D_Dense< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< double,Array2D_Dense< double > > temp2 ;
  Matrix< double,Array2D_Dense< double > > temp3 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","ud", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  try {
    Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__ud((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,*arg2,*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(*arg2)), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(*arg3)), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.qr

  call-seq:
    qr

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_qr(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix< double,Array2D_Dense< double > > *arg2 = 0 ;
  Matrix< double,Array2D_Dense< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< double,Array2D_Dense< double > > temp2 ;
  Matrix< double,Array2D_Dense< double > > temp3 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","qr", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__qr((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,*arg2,*arg3);
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(*arg2)), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(*arg3)), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.inverse

  call-seq:
    inverse -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_inverse(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","inverse", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__inverse((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD./

  call-seq:
    /(double const & scalar) -> MatrixD
    /(Matrix_FrozenD matrix) -> MatrixD
    /(Matrix_FrozenD_f matrix) -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD___div____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","operator /<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator /<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator /<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD___div____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","operator /<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator /<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator /<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD___div__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD___div____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD___div____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix_FrozenD___div____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__div__", 
    "    Matrix< double,Array2D_Dense< double > > __div__(double const &scalar)\n"
    "    Matrix< double,Array2D_Dense< double > > __div__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< double,Array2D_Dense< double > > __div__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.debug

  call-seq:
    debug -> std::string

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_debug(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","debug", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__debug((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.each

  call-seq:
    each(each_which=MatrixUtil::EACH_ALL) -> Matrix_FrozenD
    each -> Matrix_FrozenD

Iterate thru each element in the Matrix_FrozenD.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_each__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void (*arg2)(double const &,double *,unsigned int const &,unsigned int const &) = (void (*)(double const &,double *,unsigned int const &,unsigned int const &)) 0 ;
  MatrixUtil::each_which_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *result = 0 ;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const double *)0);
  }
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  {
    arg3 = MatrixUtil::sym2each_which(argv[0]);
    if(arg3 == MatrixUtil::EACH_UNKNOWN){
      SWIG_exception(SWIG_ValueError,
        std::string("Unknown enumerate direction: ").append(inspect_str(arg3)).c_str());
    }
  }
  try {
    result = (Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *) &Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__each__SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,arg2,arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_each__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void (*arg2)(double const &,double *,unsigned int const &,unsigned int const &) = (void (*)(double const &,double *,unsigned int const &,unsigned int const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *result = 0 ;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const double *)0);
  }
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  try {
    result = (Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *) &Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__each__SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_each(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix_FrozenD_each__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (MatrixUtil::sym2each_which(argv[1]) != MatrixUtil::EACH_UNKNOWN);
      }
      if (_v) {
        return _wrap_Matrix_FrozenD_each__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "each", 
    "    Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const each(void (*each_func)(double const &,double *,unsigned int const &,unsigned int const &), MatrixUtil::each_which_t const each_which)\n"
    "    Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const & each(void (*each_func)(double const &,double *,unsigned int const &,unsigned int const &))\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.map

  call-seq:
    map(MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL) -> MatrixD
    map -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_map__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void (*arg2)(double const &,double *,unsigned int const &,unsigned int const &) = (void (*)(double const &,double *,unsigned int const &,unsigned int const &)) 0 ;
  MatrixUtil::each_which_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const double *)0);
  }
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","map", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  {
    arg3 = MatrixUtil::sym2each_which(argv[0]);
    if(arg3 == MatrixUtil::EACH_UNKNOWN){
      SWIG_exception(SWIG_ValueError,
        std::string("Unknown enumerate direction: ").append(inspect_str(arg3)).c_str());
    }
  }
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__map__SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,arg2,arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_map__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void (*arg2)(double const &,double *,unsigned int const &,unsigned int const &) = (void (*)(double const &,double *,unsigned int const &,unsigned int const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const double *)0);
  }
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","map", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__map__SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_map(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix_FrozenD_map__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (MatrixUtil::sym2each_which(argv[1]) != MatrixUtil::EACH_UNKNOWN);
      }
      if (_v) {
        return _wrap_Matrix_FrozenD_map__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "map", 
    "    Matrix< double,Array2D_Dense< double > > map(void (*each_func)(double const &,double *,unsigned int const &,unsigned int const &), MatrixUtil::each_which_t const each_which)\n"
    "    Matrix< double,Array2D_Dense< double > > map(void (*each_func)(double const &,double *,unsigned int const &,unsigned int const &))\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.index

  call-seq:
    index(MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL) -> VALUE
    index -> VALUE
    index(VALUE value, VALUE idx_selector=Qnil) -> VALUE
    index(VALUE value) -> VALUE

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_index__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  MatrixUtil::each_which_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  {
    arg2 = MatrixUtil::sym2each_which(argv[0]);
    if(arg2 == MatrixUtil::EACH_UNKNOWN){
      SWIG_exception(SWIG_ValueError,
        std::string("Unknown enumerate direction: ").append(inspect_str(arg2)).c_str());
    }
  }
  try {
    result = (VALUE)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__index__SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_index__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  try {
    result = (VALUE)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__index__SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_index__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  VALUE arg3 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  arg2 = argv[0];
  arg3 = argv[1];
  if(MatrixUtil::sym2each_which(arg3) == MatrixUtil::EACH_UNKNOWN){
    SWIG_exception(SWIG_ValueError,
      std::string("Unknown enumerate direction: ").append(inspect_str(arg3)).c_str());
  }
  try {
    result = (VALUE)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__index__SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,arg2,arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_index__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  arg2 = argv[0];
  try {
    result = (VALUE)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__index__SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_index(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix_FrozenD_index__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (MatrixUtil::sym2each_which(argv[1]) != MatrixUtil::EACH_UNKNOWN);
      }
      if (_v) {
        return _wrap_Matrix_FrozenD_index__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_Matrix_FrozenD_index__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_Matrix_FrozenD_index__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "index", 
    "    VALUE index(MatrixUtil::each_which_t const each_which)\n"
    "    VALUE index()\n"
    "    VALUE index(VALUE value, VALUE idx_selector)\n"
    "    VALUE index(VALUE value)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.to_a

  call-seq:
    to_a -> VALUE

Convert Matrix_FrozenD to an Array.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_to_a(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = (VALUE)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__to_a((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.to_s

  call-seq:
    to_s -> std::string

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD___str__(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","__str__", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg____str__((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.conjugate

  call-seq:
    conjugate -> Matrix_FrozenD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_conjugate(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","conjugate", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__conjugate((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >(static_cast< const Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.adjoint

  call-seq:
    adjoint -> Matrix_FrozenD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_adjoint(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","adjoint", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__adjoint((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >(static_cast< const Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.transpose

  call-seq:
    transpose -> Matrix_FrozenD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_transpose(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","transpose", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__transpose((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >(static_cast< const Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.partial

  call-seq:
    partial(unsigned int const & new_rows, unsigned int const & new_columns, unsigned int const & row_offset, 
    unsigned int const & column_offset) -> Matrix_FrozenD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_partial(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int temp5 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  SwigValueWrapper< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","partial", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","partial", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","partial", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","partial", 4, argv[2] ));
  } 
  temp4 = static_cast< unsigned int >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "unsigned int","partial", 5, argv[3] ));
  } 
  temp5 = static_cast< unsigned int >(val5);
  arg5 = &temp5;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  raise_if_lt_zero_after_asval(*arg4);
  raise_if_lt_zero_after_asval(*arg5);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__partial((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >(static_cast< const Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.row_vector

  call-seq:
    row_vector(unsigned int const & row) -> Matrix_FrozenD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_row_vector(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","row_vector", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","row_vector", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  raise_if_lt_zero_after_asval(*arg2);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__row_vector((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(unsigned int const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >(static_cast< const Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.column_vector

  call-seq:
    column_vector(unsigned int const & column) -> Matrix_FrozenD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_column_vector(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","column_vector", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","column_vector", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  raise_if_lt_zero_after_asval(*arg2);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__column_vector((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,(unsigned int const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >(static_cast< const Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD.eigen

  call-seq:
    eigen

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_eigen(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg2 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp2 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp3 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > const *","eigen", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > * >(argp1);
  try {
    Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg__eigen((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const *)arg1,*arg2,*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg2)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg3)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg_(void *self) {
    Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *)self;
    delete arg1;
}

/*
  Document-class: GPS_PVT::SylphideMath::Matrix_FrozenD_f

  Proxy of C++ GPS_PVT::SylphideMath::Matrix_FrozenD_f class


*/
static swig_class SwigClassMatrix_FrozenD_f;

/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.rows

  call-seq:
    rows -> unsigned int const

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_rows(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *","rows", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = (unsigned int)(arg1)->rows();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.columns

  call-seq:
    columns -> unsigned int const

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_columns(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *","columns", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = (unsigned int)(arg1)->columns();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.square?

  call-seq:
    square? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_squareq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","isSquare", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->isSquare();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.diagonal?

  call-seq:
    diagonal? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_diagonalq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","isDiagonal", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->isDiagonal();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.lower_triangular?

  call-seq:
    lower_triangular? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_lower_triangularq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","isLowerTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->isLowerTriangular();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.upper_triangular?

  call-seq:
    upper_triangular? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_upper_triangularq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","isUpperTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->isUpperTriangular();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.symmetric?

  call-seq:
    symmetric? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_symmetricq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","isSymmetric", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->isSymmetric();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.hermitian?

  call-seq:
    hermitian? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_hermitianq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","isHermitian", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->isHermitian();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.skew_symmetric?

  call-seq:
    skew_symmetric? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_skew_symmetricq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","isSkewSymmetric", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->isSkewSymmetric();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.normal?

  call-seq:
    normal? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_normalq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","isNormal", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->isNormal();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.orthogonal?

  call-seq:
    orthogonal? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_orthogonalq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","isOrthogonal", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->isOrthogonal();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.unitary?

  call-seq:
    unitary? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_unitaryq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","isUnitary", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->isUnitary();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.trace

  call-seq:
    trace -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_trace(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","trace", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  try {
    result = (double)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->trace();
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.sum

  call-seq:
    sum -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_sum(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","sum", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = (double)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->sum();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.determinant

  call-seq:
    determinant -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_determinant(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","determinant", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  try {
    result = (double)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->determinant();
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.rank

  call-seq:
    rank -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_rank(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","rank", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  try {
    result = (unsigned int)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->rank();
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.cofactor

  call-seq:
    cofactor(unsigned int const & row, unsigned int const & column) -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_cofactor(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","cofactor", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","cofactor", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","cofactor", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  try {
    result = (double)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->cofactor((unsigned int const &)*arg2,(unsigned int const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.[]

  call-seq:
    [](row, column) -> double

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___getitem__(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","__getitem__", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","__getitem__", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  result = (double)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg____getitem__((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.copy

  call-seq:
    copy -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_copy(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","copy", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__copy((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.circular

  call-seq:
    circular(unsigned int const & row_offset, unsigned int const & column_offset, unsigned int const & new_rows, 
    unsigned int const & new_columns) -> MatrixD
    circular(unsigned int const & row_offset, unsigned int const & column_offset) -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_circular__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int temp5 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","circular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","circular", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","circular", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","circular", 4, argv[2] ));
  } 
  temp4 = static_cast< unsigned int >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "unsigned int","circular", 5, argv[3] ));
  } 
  temp5 = static_cast< unsigned int >(val5);
  arg5 = &temp5;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  raise_if_lt_zero_after_asval(*arg4);
  raise_if_lt_zero_after_asval(*arg5);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__circular__SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_circular__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","circular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","circular", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","circular", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__circular__SWIG_1((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_f_circular(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matrix_FrozenD_f_circular__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Matrix_FrozenD_f_circular__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "circular", 
    "    Matrix< double,Array2D_Dense< double > > circular(unsigned int const &row_offset, unsigned int const &column_offset, unsigned int const &new_rows, unsigned int const &new_columns)\n"
    "    Matrix< double,Array2D_Dense< double > > circular(unsigned int const &row_offset, unsigned int const &column_offset)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.==

  call-seq:
    ==(matrix) -> bool
    ==(matrix) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___eq____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","operator ==<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator ==<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator ==<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > * >(argp2);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR operator ==((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___eq____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","operator ==<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator ==<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator ==<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  result = (bool)((Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR operator ==((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_f___eq__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_f___eq____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_f___eq____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__eq__", 
    "    bool __eq__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix)\n"
    "    bool __eq__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.different_size?

  call-seq:
    different_size?(Matrix_FrozenD matrix) -> bool
    different_size?(Matrix_FrozenD_f matrix) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_different_sizeq_____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","isDifferentSize<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > * >(argp2);
  result = (bool)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_different_sizeq_____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","isDifferentSize<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  result = (bool)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_f_different_sizeq___(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_f_different_sizeq_____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_f_different_sizeq_____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "different_size?", 
    "    bool different_size?(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix)\n"
    "    bool different_size?(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.*

  call-seq:
    *(double const & scalar) -> MatrixD
    *(Matrix_FrozenD matrix) -> MatrixD
    *(Matrix_FrozenD_f matrix) -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator *", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sm___SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(double const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f./

  call-seq:
    /(double const & scalar) -> MatrixD
    /(Matrix_FrozenD matrix) -> MatrixD
    /(Matrix_FrozenD_f matrix) -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___div____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator /", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sd___SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(double const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.-@

  call-seq:
    -@ -> MatrixD

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___neg__(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Ss_((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.+

  call-seq:
    +(matrix) -> MatrixD
    +(matrix) -> MatrixD
    +(scalar) -> MatrixD

Add operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___add____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","operator +<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator +<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator +<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___add____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","operator +<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator +<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator +<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___add____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator +", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sa___SWIG_3((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(double const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_f___add__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_f___add____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_f___add____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix_FrozenD_f___add____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__add__", 
    "    Matrix< double,Array2D_Dense< double > > __add__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< double,Array2D_Dense< double > > __add__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n"
    "    Matrix< double,Array2D_Dense< double > > __add__(double const &scalar)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.-

  call-seq:
    -(matrix) -> MatrixD
    -(matrix) -> MatrixD
    -(scalar) -> MatrixD

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","operator -<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator -<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator -<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___sub____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","operator -<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator -<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator -<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___sub____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator -", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Ss___SWIG_3((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(double const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_f___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_f___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_f___sub____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix_FrozenD_f___sub____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__", 
    "    Matrix< double,Array2D_Dense< double > > __sub__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< double,Array2D_Dense< double > > __sub__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n"
    "    Matrix< double,Array2D_Dense< double > > __sub__(double const &scalar)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.entrywise_product

  call-seq:
    entrywise_product(Matrix_FrozenD matrix) -> MatrixD
    entrywise_product(Matrix_FrozenD_f matrix) -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_entrywise_product__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","entrywise_product<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_entrywise_product__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","entrywise_product<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_f_entrywise_product(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_f_entrywise_product__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_f_entrywise_product__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "entrywise_product", 
    "    Matrix< double,Array2D_Dense< double > > entrywise_product(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< double,Array2D_Dense< double > > entrywise_product(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.*

  call-seq:
    *(double const & scalar) -> MatrixD
    *(Matrix_FrozenD matrix) -> MatrixD
    *(Matrix_FrozenD_f matrix) -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","operator *<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator *<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator *<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___mul____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","operator *<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator *<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator *<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_f___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_f___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_f___mul____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix_FrozenD_f___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__mul__", 
    "    Matrix< double,Array2D_Dense< double > > __mul__(double const &scalar)\n"
    "    Matrix< double,Array2D_Dense< double > > __mul__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< double,Array2D_Dense< double > > __mul__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.first_minor

  call-seq:
    first_minor(unsigned int const & row, unsigned int const & column) -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_first_minor(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","first_minor", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","first_minor", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","first_minor", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__first_minor((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.adjugate

  call-seq:
    adjugate -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_adjugate(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","adjugate", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__adjugate((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.lup

  call-seq:
    lup

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_lup(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix< double,Array2D_Dense< double > > *arg2 = 0 ;
  Matrix< double,Array2D_Dense< double > > *arg3 = 0 ;
  Matrix< double,Array2D_Dense< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< double,Array2D_Dense< double > > temp2 ;
  Matrix< double,Array2D_Dense< double > > temp3 ;
  Matrix< double,Array2D_Dense< double > > temp4 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  
  arg4 = &temp4;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","lup", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  try {
    Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__lup((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,*arg2,*arg3,*arg4);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(*arg2)), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(*arg3)), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(*arg4)), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.ud

  call-seq:
    ud

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_ud(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix< double,Array2D_Dense< double > > *arg2 = 0 ;
  Matrix< double,Array2D_Dense< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< double,Array2D_Dense< double > > temp2 ;
  Matrix< double,Array2D_Dense< double > > temp3 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","ud", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  try {
    Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__ud((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,*arg2,*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(*arg2)), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(*arg3)), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.qr

  call-seq:
    qr

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_qr(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix< double,Array2D_Dense< double > > *arg2 = 0 ;
  Matrix< double,Array2D_Dense< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< double,Array2D_Dense< double > > temp2 ;
  Matrix< double,Array2D_Dense< double > > temp3 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","qr", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__qr((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,*arg2,*arg3);
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(*arg2)), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(*arg3)), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.inverse

  call-seq:
    inverse -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_inverse(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","inverse", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__inverse((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f./

  call-seq:
    /(double const & scalar) -> MatrixD
    /(Matrix_FrozenD matrix) -> MatrixD
    /(Matrix_FrozenD_f matrix) -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___div____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","operator /<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator /<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","operator /<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___div____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","operator /<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator /<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","operator /<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_f___div__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_f___div____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenD_f___div____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix_FrozenD_f___div____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__div__", 
    "    Matrix< double,Array2D_Dense< double > > __div__(double const &scalar)\n"
    "    Matrix< double,Array2D_Dense< double > > __div__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< double,Array2D_Dense< double > > __div__(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.debug

  call-seq:
    debug -> std::string

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_debug(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","debug", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__debug((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.each

  call-seq:
    each(each_which=MatrixUtil::EACH_ALL) -> Matrix_FrozenD_f
    each -> Matrix_FrozenD_f

Iterate thru each element in the Matrix_FrozenD_f.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_each__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void (*arg2)(double const &,double *,unsigned int const &,unsigned int const &) = (void (*)(double const &,double *,unsigned int const &,unsigned int const &)) 0 ;
  MatrixUtil::each_which_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const double *)0);
  }
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  {
    arg3 = MatrixUtil::sym2each_which(argv[0]);
    if(arg3 == MatrixUtil::EACH_UNKNOWN){
      SWIG_exception(SWIG_ValueError,
        std::string("Unknown enumerate direction: ").append(inspect_str(arg3)).c_str());
    }
  }
  try {
    result = (Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *) &Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__each__SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,arg2,arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_each__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void (*arg2)(double const &,double *,unsigned int const &,unsigned int const &) = (void (*)(double const &,double *,unsigned int const &,unsigned int const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const double *)0);
  }
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  try {
    result = (Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *) &Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__each__SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_f_each(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix_FrozenD_f_each__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (MatrixUtil::sym2each_which(argv[1]) != MatrixUtil::EACH_UNKNOWN);
      }
      if (_v) {
        return _wrap_Matrix_FrozenD_f_each__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "each", 
    "    Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const each(void (*each_func)(double const &,double *,unsigned int const &,unsigned int const &), MatrixUtil::each_which_t const each_which)\n"
    "    Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const & each(void (*each_func)(double const &,double *,unsigned int const &,unsigned int const &))\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.map

  call-seq:
    map(MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL) -> MatrixD
    map -> MatrixD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_map__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void (*arg2)(double const &,double *,unsigned int const &,unsigned int const &) = (void (*)(double const &,double *,unsigned int const &,unsigned int const &)) 0 ;
  MatrixUtil::each_which_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const double *)0);
  }
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","map", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  {
    arg3 = MatrixUtil::sym2each_which(argv[0]);
    if(arg3 == MatrixUtil::EACH_UNKNOWN){
      SWIG_exception(SWIG_ValueError,
        std::string("Unknown enumerate direction: ").append(inspect_str(arg3)).c_str());
    }
  }
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__map__SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,arg2,arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_map__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void (*arg2)(double const &,double *,unsigned int const &,unsigned int const &) = (void (*)(double const &,double *,unsigned int const &,unsigned int const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const double *)0);
  }
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","map", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__map__SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_f_map(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix_FrozenD_f_map__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (MatrixUtil::sym2each_which(argv[1]) != MatrixUtil::EACH_UNKNOWN);
      }
      if (_v) {
        return _wrap_Matrix_FrozenD_f_map__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "map", 
    "    Matrix< double,Array2D_Dense< double > > map(void (*each_func)(double const &,double *,unsigned int const &,unsigned int const &), MatrixUtil::each_which_t const each_which)\n"
    "    Matrix< double,Array2D_Dense< double > > map(void (*each_func)(double const &,double *,unsigned int const &,unsigned int const &))\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.index

  call-seq:
    index(MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL) -> VALUE
    index -> VALUE
    index(VALUE value, VALUE idx_selector=Qnil) -> VALUE
    index(VALUE value) -> VALUE

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_index__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  MatrixUtil::each_which_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  {
    arg2 = MatrixUtil::sym2each_which(argv[0]);
    if(arg2 == MatrixUtil::EACH_UNKNOWN){
      SWIG_exception(SWIG_ValueError,
        std::string("Unknown enumerate direction: ").append(inspect_str(arg2)).c_str());
    }
  }
  try {
    result = (VALUE)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__index__SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_index__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  try {
    result = (VALUE)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__index__SWIG_0((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_index__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  VALUE arg3 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  arg2 = argv[0];
  arg3 = argv[1];
  if(MatrixUtil::sym2each_which(arg3) == MatrixUtil::EACH_UNKNOWN){
    SWIG_exception(SWIG_ValueError,
      std::string("Unknown enumerate direction: ").append(inspect_str(arg3)).c_str());
  }
  try {
    result = (VALUE)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__index__SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,arg2,arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_index__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  arg2 = argv[0];
  try {
    result = (VALUE)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__index__SWIG_2((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenD_f_index(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix_FrozenD_f_index__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (MatrixUtil::sym2each_which(argv[1]) != MatrixUtil::EACH_UNKNOWN);
      }
      if (_v) {
        return _wrap_Matrix_FrozenD_f_index__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_Matrix_FrozenD_f_index__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_Matrix_FrozenD_f_index__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "index", 
    "    VALUE index(MatrixUtil::each_which_t const each_which)\n"
    "    VALUE index()\n"
    "    VALUE index(VALUE value, VALUE idx_selector)\n"
    "    VALUE index(VALUE value)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.to_a

  call-seq:
    to_a -> VALUE

Convert Matrix_FrozenD_f to an Array.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_to_a(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = (VALUE)Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__to_a((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.to_s

  call-seq:
    to_s -> std::string

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f___str__(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","__str__", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg____str__((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.conjugate

  call-seq:
    conjugate -> Matrix_FrozenD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_conjugate(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","conjugate", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__conjugate((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >(static_cast< const Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.adjoint

  call-seq:
    adjoint -> Matrix_FrozenD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_adjoint(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","adjoint", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__adjoint((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >(static_cast< const Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.transpose

  call-seq:
    transpose -> Matrix_FrozenD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_transpose(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","transpose", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__transpose((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >(static_cast< const Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.partial

  call-seq:
    partial(unsigned int const & new_rows, unsigned int const & new_columns, unsigned int const & row_offset, 
    unsigned int const & column_offset) -> Matrix_FrozenD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_partial(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int temp5 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  SwigValueWrapper< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","partial", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","partial", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","partial", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","partial", 4, argv[2] ));
  } 
  temp4 = static_cast< unsigned int >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "unsigned int","partial", 5, argv[3] ));
  } 
  temp5 = static_cast< unsigned int >(val5);
  arg5 = &temp5;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  raise_if_lt_zero_after_asval(*arg4);
  raise_if_lt_zero_after_asval(*arg5);
  try {
    result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__partial((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >(static_cast< const Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.row_vector

  call-seq:
    row_vector(unsigned int const & row) -> Matrix_FrozenD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_row_vector(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","row_vector", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","row_vector", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  raise_if_lt_zero_after_asval(*arg2);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__row_vector((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(unsigned int const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >(static_cast< const Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.column_vector

  call-seq:
    column_vector(unsigned int const & column) -> Matrix_FrozenD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_column_vector(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","column_vector", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","column_vector", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  raise_if_lt_zero_after_asval(*arg2);
  result = Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__column_vector((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(unsigned int const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >(static_cast< const Matrix_Frozen< double,Array2D_Dense< double >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenD_f.eigen

  call-seq:
    eigen

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenD_f_eigen(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg2 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp2 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp3 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > const *","eigen", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > * >(argp1);
  try {
    Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg__eigen((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,*arg2,*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg2)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg3)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg_(void *self) {
    Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *arg1 = (Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *)self;
    delete arg1;
}

/*
  Document-class: GPS_PVT::SylphideMath::MatrixD < SylphideMath::Matrix_FrozenD

  Proxy of C++ GPS_PVT::SylphideMath::MatrixD class


*/
static swig_class SwigClassMatrixD;

/*
  Document-method: GPS_PVT::SylphideMath::MatrixD.new

  call-seq:
    MatrixD.new(unsigned int const & rows, unsigned int const & columns, void const * replacer=nil)
    MatrixD.new(unsigned int const & rows, unsigned int const & columns)
    MatrixD.new(unsigned int const & rows, unsigned int const & columns, double const * serialized)
    MatrixD.new(void const * replacer)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_MatrixD__SWIG_0(int argc, VALUE *argv, VALUE self) {
  unsigned int *arg1 = 0 ;
  unsigned int *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  Matrix< double,Array2D_Dense< double > > *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "unsigned int","Matrix<(double,Array2D_Dense<(double)>)>", 1, argv[0] ));
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","Matrix<(double,Array2D_Dense<(double)>)>", 2, argv[1] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  {
    arg3 = &argv[2];
  }
  raise_if_lt_zero_after_asval(*arg1);
  raise_if_lt_zero_after_asval(*arg2);
  try {
    result = (Matrix< double,Array2D_Dense< double > > *)new_Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg___SWIG_0((unsigned int const &)*arg1,(unsigned int const &)*arg2,(void const *)arg3);
    DATA_PTR(self) = result;
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MatrixD__SWIG_1(int argc, VALUE *argv, VALUE self) {
  unsigned int *arg1 = 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  Matrix< double,Array2D_Dense< double > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "unsigned int","Matrix<(double,Array2D_Dense<(double)>)>", 1, argv[0] ));
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","Matrix<(double,Array2D_Dense<(double)>)>", 2, argv[1] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  raise_if_lt_zero_after_asval(*arg1);
  raise_if_lt_zero_after_asval(*arg2);
  try {
    result = (Matrix< double,Array2D_Dense< double > > *)new_Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg___SWIG_0((unsigned int const &)*arg1,(unsigned int const &)*arg2);
    DATA_PTR(self) = result;
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MatrixD__SWIG_2(int argc, VALUE *argv, VALUE self) {
  unsigned int *arg1 = 0 ;
  unsigned int *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Matrix< double,Array2D_Dense< double > > *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "unsigned int","Matrix<(double,Array2D_Dense<(double)>)>", 1, argv[0] ));
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","Matrix<(double,Array2D_Dense<(double)>)>", 2, argv[1] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "double const *","Matrix<(double,Array2D_Dense<(double)>)>", 3, argv[2] )); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  raise_if_lt_zero_after_asval(*arg1);
  raise_if_lt_zero_after_asval(*arg2);
  result = (Matrix< double,Array2D_Dense< double > > *)new_Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg___SWIG_2((unsigned int const &)*arg1,(unsigned int const &)*arg2,(double const *)arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_MatrixD_allocate(VALUE self)
#else
_wrap_MatrixD_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_MatrixD__SWIG_3(int argc, VALUE *argv, VALUE self) {
  void *arg1 = (void *) 0 ;
  Matrix< double,Array2D_Dense< double > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    arg1 = &argv[0];
  }
  try {
    result = (Matrix< double,Array2D_Dense< double > > *)new_Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg___SWIG_3((void const *)arg1);
    DATA_PTR(self) = result;
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_MatrixD(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    {
      _v = rb_block_given_p() ? 0 : 1;
      
      
      
    }
    if (_v) {
      return _wrap_new_MatrixD__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MatrixD__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_MatrixD__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = rb_block_given_p() ? 0 : 1;
          
          
          
        }
        if (_v) {
          return _wrap_new_MatrixD__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixD.new", 
    "    MatrixD.new(unsigned int const &rows, unsigned int const &columns, void const *replacer)\n"
    "    MatrixD.new(unsigned int const &rows, unsigned int const &columns)\n"
    "    MatrixD.new(unsigned int const &rows, unsigned int const &columns, double const *serialized)\n"
    "    MatrixD.new(void const *replacer)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixD.[]=

  call-seq:
    []=(row, column, value) -> double &

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_MatrixD___setitem__(int argc, VALUE *argv, VALUE self) {
  Matrix< double,Array2D_Dense< double > > *arg1 = (Matrix< double,Array2D_Dense< double > > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< double,Array2D_Dense< double > > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< double,Array2D_Dense< double > > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","__setitem__", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","__setitem__", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","__setitem__", 4, argv[2] ));
  } 
  temp4 = static_cast< double >(val4);
  arg4 = &temp4;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  result = (double *) &Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg____setitem__(arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3,(double const &)*arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixD.scalar

  call-seq:
    scalar(unsigned int const & size, double const & scalar) -> MatrixD

A class method.

*/
SWIGINTERN VALUE
_wrap_MatrixD_scalar(int argc, VALUE *argv, VALUE self) {
  unsigned int *arg1 = 0 ;
  double *arg2 = 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "unsigned int","Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__getScalar", 1, argv[0] ));
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__getScalar", 2, argv[1] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  raise_if_lt_zero_after_asval(*arg1);
  result = Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__getScalar((unsigned int const &)*arg1,(double const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixD.I

  call-seq:
    I(unsigned int const & size) -> MatrixD

A class method.

*/
SWIGINTERN VALUE
_wrap_MatrixD_I(int argc, VALUE *argv, VALUE self) {
  unsigned int *arg1 = 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  SwigValueWrapper< Matrix< double,Array2D_Dense< double > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "unsigned int","Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__getI", 1, argv[0] ));
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  raise_if_lt_zero_after_asval(*arg1);
  result = Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__getI((unsigned int const &)*arg1);
  vresult = SWIG_NewPointerObj((new Matrix< double,Array2D_Dense< double > >(static_cast< const Matrix< double,Array2D_Dense< double > >& >(result))), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixD.swap_rows

  call-seq:
    swap_rows(unsigned int const & r1, unsigned int const & r2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MatrixD_swap_rowsN___(int argc, VALUE *argv, VALUE self) {
  Matrix< double,Array2D_Dense< double > > *arg1 = (Matrix< double,Array2D_Dense< double > > *) 0 ;
  Matrix< double,Array2D_Dense< double > >::self_t *arg2 = (Matrix< double,Array2D_Dense< double > >::self_t *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< double,Array2D_Dense< double > > *","swap_rows", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< double,Array2D_Dense< double > > * >(argp1);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[0], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","swap_rows", 3, argv[0] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[1], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","swap_rows", 4, argv[1] ));
  } 
  temp4 = static_cast< unsigned int >(val4);
  arg4 = &temp4;
  raise_if_lt_zero_after_asval(*arg3);
  raise_if_lt_zero_after_asval(*arg4);
  try {
    Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__swap_rows(arg1,arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixD.swap_columns

  call-seq:
    swap_columns(unsigned int const & c1, unsigned int const & c2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MatrixD_swap_columnsN___(int argc, VALUE *argv, VALUE self) {
  Matrix< double,Array2D_Dense< double > > *arg1 = (Matrix< double,Array2D_Dense< double > > *) 0 ;
  Matrix< double,Array2D_Dense< double > >::self_t *arg2 = (Matrix< double,Array2D_Dense< double > >::self_t *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< double,Array2D_Dense< double > > *","swap_columns", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< double,Array2D_Dense< double > > * >(argp1);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[0], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","swap_columns", 3, argv[0] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[1], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","swap_columns", 4, argv[1] ));
  } 
  temp4 = static_cast< unsigned int >(val4);
  arg4 = &temp4;
  raise_if_lt_zero_after_asval(*arg3);
  raise_if_lt_zero_after_asval(*arg4);
  try {
    Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__swap_columns(arg1,arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixD.replace!

  call-seq:
    replace!(matrix)
    replace!(matrix)
    replace!(replacer=nil)
    replace!
    replace!(serialized)

Replace all or a portion of the MatrixD.
*/
SWIGINTERN VALUE
_wrap_MatrixD_replaceN_____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix< double,Array2D_Dense< double > > *arg1 = (Matrix< double,Array2D_Dense< double > > *) 0 ;
  Matrix< double,Array2D_Dense< double > >::self_t *arg2 = (Matrix< double,Array2D_Dense< double > >::self_t *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< double,Array2D_Dense< double > > *","replace<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< double,Array2D_Dense< double > > * >(argp1);
  res3 = SWIG_ConvertPtr(argv[0], &argp3, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","replace<(T,Array2D_Dense<(T)>,MatViewBase)>", 3, argv[0] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &","replace<(T,Array2D_Dense<(T)>,MatViewBase)>", 3, argv[0])); 
  }
  arg3 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > * >(argp3);
  try {
    Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__replace_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(arg1,arg2,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &)*arg3);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixD_replaceN_____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix< double,Array2D_Dense< double > > *arg1 = (Matrix< double,Array2D_Dense< double > > *) 0 ;
  Matrix< double,Array2D_Dense< double > >::self_t *arg2 = (Matrix< double,Array2D_Dense< double > >::self_t *) 0 ;
  Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< double,Array2D_Dense< double > > *","replace<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< double,Array2D_Dense< double > > * >(argp1);
  res3 = SWIG_ConvertPtr(argv[0], &argp3, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","replace<(T,Array2D_Dense<(T)>,MatView_f)>", 3, argv[0] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &","replace<(T,Array2D_Dense<(T)>,MatView_f)>", 3, argv[0])); 
  }
  arg3 = reinterpret_cast< Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > * >(argp3);
  try {
    Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__replace_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(arg1,arg2,(Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg3);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixD_replaceN_____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix< double,Array2D_Dense< double > > *arg1 = (Matrix< double,Array2D_Dense< double > > *) 0 ;
  Matrix< double,Array2D_Dense< double > >::self_t *arg2 = (Matrix< double,Array2D_Dense< double > >::self_t *) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< double,Array2D_Dense< double > > *","replace", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< double,Array2D_Dense< double > > * >(argp1);
  {
    arg3 = &argv[0];
  }
  try {
    Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__replace__SWIG_3(arg1,arg2,(void const *)arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixD_replaceN_____SWIG_4(int argc, VALUE *argv, VALUE self) {
  Matrix< double,Array2D_Dense< double > > *arg1 = (Matrix< double,Array2D_Dense< double > > *) 0 ;
  Matrix< double,Array2D_Dense< double > >::self_t *arg2 = (Matrix< double,Array2D_Dense< double > >::self_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< double,Array2D_Dense< double > > *","replace", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< double,Array2D_Dense< double > > * >(argp1);
  try {
    Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__replace__SWIG_3(arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixD_replaceN_____SWIG_5(int argc, VALUE *argv, VALUE self) {
  Matrix< double,Array2D_Dense< double > > *arg1 = (Matrix< double,Array2D_Dense< double > > *) 0 ;
  Matrix< double,Array2D_Dense< double > >::self_t *arg2 = (Matrix< double,Array2D_Dense< double > >::self_t *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< double,Array2D_Dense< double > > *","replace", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< double,Array2D_Dense< double > > * >(argp1);
  res3 = SWIG_ConvertPtr(argv[0], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "double const *","replace", 3, argv[0] )); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  try {
    Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__replace__SWIG_5(arg1,arg2,(double const *)arg3);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixD_replaceN___(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixD_replaceN_____SWIG_4(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixD_replaceN_____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixD_replaceN_____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixD_replaceN_____SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = rb_block_given_p() ? 0 : 1;
        
        
        
      }
      if (_v) {
        return _wrap_MatrixD_replaceN_____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "replace!", 
    "    void replace!(Matrix< double,Array2D_Dense< double > >::self_t *self_p, Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > const &matrix)\n"
    "    void replace!(Matrix< double,Array2D_Dense< double > >::self_t *self_p, Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n"
    "    void replace!(Matrix< double,Array2D_Dense< double > >::self_t *self_p, void const *replacer)\n"
    "    void replace!(Matrix< double,Array2D_Dense< double > >::self_t *self_p)\n"
    "    void replace!(Matrix< double,Array2D_Dense< double > >::self_t *self_p, double const *serialized)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixD.map!

  call-seq:
    map!(MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL)
    map!

An instance method.

*/
SWIGINTERN VALUE
_wrap_MatrixD_mapN_____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix< double,Array2D_Dense< double > > *arg1 = (Matrix< double,Array2D_Dense< double > > *) 0 ;
  Matrix< double,Array2D_Dense< double > >::self_t *arg2 = (Matrix< double,Array2D_Dense< double > >::self_t *) 0 ;
  void (*arg3)(double const &,double *,unsigned int const &,unsigned int const &) = (void (*)(double const &,double *,unsigned int const &,unsigned int const &)) 0 ;
  MatrixUtil::each_which_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg3 = matrix_each((const double *)0);
  }
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< double,Array2D_Dense< double > > *","map_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< double,Array2D_Dense< double > > * >(argp1);
  {
    arg4 = MatrixUtil::sym2each_which(argv[0]);
    if(arg4 == MatrixUtil::EACH_UNKNOWN){
      SWIG_exception(SWIG_ValueError,
        std::string("Unknown enumerate direction: ").append(inspect_str(arg4)).c_str());
    }
  }
  try {
    Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__map_bang__SWIG_0(arg1,arg2,arg3,arg4);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixD_mapN_____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix< double,Array2D_Dense< double > > *arg1 = (Matrix< double,Array2D_Dense< double > > *) 0 ;
  Matrix< double,Array2D_Dense< double > >::self_t *arg2 = (Matrix< double,Array2D_Dense< double > >::self_t *) 0 ;
  void (*arg3)(double const &,double *,unsigned int const &,unsigned int const &) = (void (*)(double const &,double *,unsigned int const &,unsigned int const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg3 = matrix_each((const double *)0);
  }
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< double,Array2D_Dense< double > > *","map_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< double,Array2D_Dense< double > > * >(argp1);
  try {
    Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__map_bang__SWIG_0(arg1,arg2,arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixD_mapN___(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixD_mapN_____SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (MatrixUtil::sym2each_which(argv[1]) != MatrixUtil::EACH_UNKNOWN);
      }
      if (_v) {
        return _wrap_MatrixD_mapN_____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "map!", 
    "    void map!(Matrix< double,Array2D_Dense< double > >::self_t *self_p, void (*each_func)(double const &,double *,unsigned int const &,unsigned int const &), MatrixUtil::each_which_t const each_which)\n"
    "    void map!(Matrix< double,Array2D_Dense< double > >::self_t *self_p, void (*each_func)(double const &,double *,unsigned int const &,unsigned int const &))\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixD.resize

  call-seq:
    resize(r_p, c_p) -> MatrixD

Resize the size of the MatrixD.
*/
SWIGINTERN VALUE
_wrap_MatrixD_resizeN___(int argc, VALUE *argv, VALUE self) {
  Matrix< double,Array2D_Dense< double > > *arg1 = (Matrix< double,Array2D_Dense< double > > *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int temp3 ;
  Matrix< double,Array2D_Dense< double > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< double,Array2D_Dense< double > > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< double,Array2D_Dense< double > > * >(argp1);
  {
    if(SWIG_IsOK(SWIG_AsVal_unsigned_SS_int (argv[0], &temp2))){
      raise_if_lt_zero_after_asval(temp2);
      
      arg2 = &temp2;
    }
    
    else if(NIL_P(argv[0])){
      arg2 = NULL;
    }
    
    else{
      SWIG_exception(SWIG_TypeError, "unsigned int is expected");
    }
  }
  {
    if(SWIG_IsOK(SWIG_AsVal_unsigned_SS_int (argv[1], &temp3))){
      raise_if_lt_zero_after_asval(temp3);
      
      arg3 = &temp3;
    }
    
    else if(NIL_P(argv[1])){
      arg3 = NULL;
    }
    
    else{
      SWIG_exception(SWIG_TypeError, "unsigned int is expected");
    }
  }
  result = (Matrix< double,Array2D_Dense< double > > *) &Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg__resize(arg1,(unsigned int const *)arg2,(unsigned int const *)arg3);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg_(void *self) {
    Matrix< double,Array2D_Dense< double > > *arg1 = (Matrix< double,Array2D_Dense< double > > *)self;
    delete arg1;
}

/*
  Document-class: GPS_PVT::SylphideMath::Matrix_FrozenComplexD

  Proxy of C++ GPS_PVT::SylphideMath::Matrix_FrozenComplexD class


*/
static swig_class SwigClassMatrix_FrozenComplexD;

/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.rows

  call-seq:
    rows -> unsigned int const

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_rows(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *","rows", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = (unsigned int)(arg1)->rows();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.columns

  call-seq:
    columns -> unsigned int const

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_columns(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *","columns", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = (unsigned int)(arg1)->columns();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.square?

  call-seq:
    square? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_squareq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","isSquare", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->isSquare();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.diagonal?

  call-seq:
    diagonal? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_diagonalq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","isDiagonal", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->isDiagonal();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.lower_triangular?

  call-seq:
    lower_triangular? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_lower_triangularq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","isLowerTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->isLowerTriangular();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.upper_triangular?

  call-seq:
    upper_triangular? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_upper_triangularq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","isUpperTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->isUpperTriangular();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.symmetric?

  call-seq:
    symmetric? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_symmetricq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","isSymmetric", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->isSymmetric();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.hermitian?

  call-seq:
    hermitian? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_hermitianq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","isHermitian", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->isHermitian();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.skew_symmetric?

  call-seq:
    skew_symmetric? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_skew_symmetricq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","isSkewSymmetric", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->isSkewSymmetric();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.normal?

  call-seq:
    normal? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_normalq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","isNormal", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->isNormal();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.orthogonal?

  call-seq:
    orthogonal? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_orthogonalq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","isOrthogonal", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->isOrthogonal();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.unitary?

  call-seq:
    unitary? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_unitaryq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","isUnitary", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->isUnitary();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.trace

  call-seq:
    trace -> ComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_trace(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","trace", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  try {
    result = ((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->trace();
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.sum

  call-seq:
    sum -> ComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_sum(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","sum", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = ((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->sum();
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.determinant

  call-seq:
    determinant -> ComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_determinant(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","determinant", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  try {
    result = ((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->determinant();
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.rank

  call-seq:
    rank -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_rank(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","rank", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  try {
    result = (unsigned int)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->rank();
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.cofactor

  call-seq:
    cofactor(unsigned int const & row, unsigned int const & column) -> ComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_cofactor(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","cofactor", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","cofactor", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","cofactor", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  try {
    result = ((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->cofactor((unsigned int const &)*arg2,(unsigned int const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.[]

  call-seq:
    [](row, column) -> ComplexD

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___getitem__(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","__getitem__", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","__getitem__", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg____getitem__((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.copy

  call-seq:
    copy -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_copy(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","copy", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__copy((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.circular

  call-seq:
    circular(unsigned int const & row_offset, unsigned int const & column_offset, unsigned int const & new_rows, 
    unsigned int const & new_columns) -> MatrixComplexD
    circular(unsigned int const & row_offset, unsigned int const & column_offset) -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_circular__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int temp5 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","circular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","circular", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","circular", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","circular", 4, argv[2] ));
  } 
  temp4 = static_cast< unsigned int >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "unsigned int","circular", 5, argv[3] ));
  } 
  temp5 = static_cast< unsigned int >(val5);
  arg5 = &temp5;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  raise_if_lt_zero_after_asval(*arg4);
  raise_if_lt_zero_after_asval(*arg5);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__circular__SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_circular__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","circular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","circular", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","circular", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__circular__SWIG_1((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_circular(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matrix_FrozenComplexD_circular__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Matrix_FrozenComplexD_circular__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "circular", 
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > circular(unsigned int const &row_offset, unsigned int const &column_offset, unsigned int const &new_rows, unsigned int const &new_columns)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > circular(unsigned int const &row_offset, unsigned int const &column_offset)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.==

  call-seq:
    ==(matrix) -> bool
    ==(matrix) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___eq____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","operator ==<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator ==<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator ==<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > * >(argp2);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR operator ==((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___eq____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","operator ==<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator ==<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator ==<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR operator ==((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD___eq__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD___eq____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD___eq____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__eq__", 
    "    bool __eq__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix)\n"
    "    bool __eq__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.different_size?

  call-seq:
    different_size?(Matrix_FrozenComplexD matrix) -> bool
    different_size?(Matrix_FrozenComplexD_f matrix) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_different_sizeq_____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","isDifferentSize<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > * >(argp2);
  result = (bool)Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_different_sizeq_____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","isDifferentSize<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  result = (bool)Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_different_sizeq___(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_different_sizeq_____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_different_sizeq_____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "different_size?", 
    "    bool different_size?(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix)\n"
    "    bool different_size?(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.*

  call-seq:
    *(ComplexD scalar) -> MatrixComplexD
    *(Matrix_FrozenComplexD matrix) -> MatrixComplexD
    *(Matrix_FrozenComplexD_f matrix) -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > temp2 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  {
    if((!SWIG_IsOK(swig::asptr(argv[0], &arg2)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg2 = &temp2))))){
      SWIG_exception(SWIG_TypeError, "in method 'operator *', expecting type Complex< double >");
    }
  }
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sm___SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Complex< double > const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD./

  call-seq:
    /(ComplexD scalar) -> MatrixComplexD
    /(Matrix_FrozenComplexD matrix) -> MatrixComplexD
    /(Matrix_FrozenComplexD_f matrix) -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___div____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > temp2 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  {
    if((!SWIG_IsOK(swig::asptr(argv[0], &arg2)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg2 = &temp2))))){
      SWIG_exception(SWIG_TypeError, "in method 'operator /', expecting type Complex< double >");
    }
  }
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sd___SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Complex< double > const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.-@

  call-seq:
    -@ -> MatrixComplexD

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___neg__(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Ss_((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.+

  call-seq:
    +(matrix) -> MatrixComplexD
    +(matrix) -> MatrixComplexD
    +(scalar) -> MatrixComplexD

Add operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___add____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","operator +<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator +<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator +<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___add____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","operator +<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator +<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator +<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___add____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > temp2 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  {
    if((!SWIG_IsOK(swig::asptr(argv[0], &arg2)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg2 = &temp2))))){
      SWIG_exception(SWIG_TypeError, "in method 'operator +', expecting type Complex< double >");
    }
  }
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sa___SWIG_3((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Complex< double > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD___add__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD___add____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD___add____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = swig::check<Complex< double > * >(argv[1]) || swig::check<Complex< double > >(argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_FrozenComplexD___add____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__add__", 
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __add__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __add__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __add__(Complex< double > const &scalar)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.-

  call-seq:
    -(matrix) -> MatrixComplexD
    -(matrix) -> MatrixComplexD
    -(scalar) -> MatrixComplexD

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","operator -<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator -<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator -<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___sub____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","operator -<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator -<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator -<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___sub____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > temp2 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  {
    if((!SWIG_IsOK(swig::asptr(argv[0], &arg2)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg2 = &temp2))))){
      SWIG_exception(SWIG_TypeError, "in method 'operator -', expecting type Complex< double >");
    }
  }
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Ss___SWIG_3((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Complex< double > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD___sub____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = swig::check<Complex< double > * >(argv[1]) || swig::check<Complex< double > >(argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_FrozenComplexD___sub____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__", 
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __sub__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __sub__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __sub__(Complex< double > const &scalar)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.entrywise_product

  call-seq:
    entrywise_product(Matrix_FrozenComplexD matrix) -> MatrixComplexD
    entrywise_product(Matrix_FrozenComplexD_f matrix) -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_entrywise_product__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","entrywise_product<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_entrywise_product__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","entrywise_product<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_entrywise_product(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_entrywise_product__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_entrywise_product__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "entrywise_product", 
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > entrywise_product(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > entrywise_product(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.*

  call-seq:
    *(ComplexD scalar) -> MatrixComplexD
    *(Matrix_FrozenComplexD matrix) -> MatrixComplexD
    *(Matrix_FrozenComplexD_f matrix) -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","operator *<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator *<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator *<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___mul____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","operator *<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator *<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator *<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = swig::check<Complex< double > * >(argv[1]) || swig::check<Complex< double > >(argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_FrozenComplexD___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD___mul____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__mul__", 
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __mul__(Complex< double > const &scalar)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __mul__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __mul__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.first_minor

  call-seq:
    first_minor(unsigned int const & row, unsigned int const & column) -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_first_minor(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","first_minor", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","first_minor", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","first_minor", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__first_minor((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.adjugate

  call-seq:
    adjugate -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_adjugate(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","adjugate", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__adjugate((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.lup

  call-seq:
    lup

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_lup(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg2 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg3 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp2 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp3 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp4 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  
  arg4 = &temp4;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","lup", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  try {
    Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__lup((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,*arg2,*arg3,*arg4);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg2)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg3)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg4)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.ud

  call-seq:
    ud

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_ud(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg2 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp2 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp3 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","ud", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  try {
    Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__ud((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,*arg2,*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg2)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg3)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.qr

  call-seq:
    qr

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_qr(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg2 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp2 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp3 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","qr", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__qr((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,*arg2,*arg3);
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg2)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg3)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.inverse

  call-seq:
    inverse -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_inverse(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","inverse", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__inverse((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD./

  call-seq:
    /(ComplexD scalar) -> MatrixComplexD
    /(Matrix_FrozenComplexD matrix) -> MatrixComplexD
    /(Matrix_FrozenComplexD_f matrix) -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___div____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","operator /<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator /<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator /<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___div____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","operator /<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator /<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator /<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD___div__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = swig::check<Complex< double > * >(argv[1]) || swig::check<Complex< double > >(argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_FrozenComplexD___div____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD___div____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD___div____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__div__", 
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __div__(Complex< double > const &scalar)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __div__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __div__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.debug

  call-seq:
    debug -> std::string

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_debug(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","debug", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__debug((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.each

  call-seq:
    each(each_which=MatrixUtil::EACH_ALL) -> Matrix_FrozenComplexD
    each -> Matrix_FrozenComplexD

Iterate thru each element in the Matrix_FrozenComplexD.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_each__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void (*arg2)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &) = (void (*)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &)) 0 ;
  MatrixUtil::each_which_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *result = 0 ;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const Complex< double > *)0);
  }
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  {
    arg3 = MatrixUtil::sym2each_which(argv[0]);
    if(arg3 == MatrixUtil::EACH_UNKNOWN){
      SWIG_exception(SWIG_ValueError,
        std::string("Unknown enumerate direction: ").append(inspect_str(arg3)).c_str());
    }
  }
  try {
    result = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *) &Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__each__SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,arg2,arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_each__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void (*arg2)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &) = (void (*)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *result = 0 ;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const Complex< double > *)0);
  }
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  try {
    result = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *) &Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__each__SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_each(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix_FrozenComplexD_each__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (MatrixUtil::sym2each_which(argv[1]) != MatrixUtil::EACH_UNKNOWN);
      }
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_each__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "each", 
    "    Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const each(void (*each_func)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &), MatrixUtil::each_which_t const each_which)\n"
    "    Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const & each(void (*each_func)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &))\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.map

  call-seq:
    map(MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL) -> MatrixComplexD
    map -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_map__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void (*arg2)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &) = (void (*)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &)) 0 ;
  MatrixUtil::each_which_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const Complex< double > *)0);
  }
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","map", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  {
    arg3 = MatrixUtil::sym2each_which(argv[0]);
    if(arg3 == MatrixUtil::EACH_UNKNOWN){
      SWIG_exception(SWIG_ValueError,
        std::string("Unknown enumerate direction: ").append(inspect_str(arg3)).c_str());
    }
  }
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__map__SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,arg2,arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_map__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void (*arg2)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &) = (void (*)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const Complex< double > *)0);
  }
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","map", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__map__SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_map(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix_FrozenComplexD_map__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (MatrixUtil::sym2each_which(argv[1]) != MatrixUtil::EACH_UNKNOWN);
      }
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_map__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "map", 
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > map(void (*each_func)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &), MatrixUtil::each_which_t const each_which)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > map(void (*each_func)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &))\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.index

  call-seq:
    index(MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL) -> VALUE
    index -> VALUE
    index(VALUE value, VALUE idx_selector=Qnil) -> VALUE
    index(VALUE value) -> VALUE

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_index__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  MatrixUtil::each_which_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  {
    arg2 = MatrixUtil::sym2each_which(argv[0]);
    if(arg2 == MatrixUtil::EACH_UNKNOWN){
      SWIG_exception(SWIG_ValueError,
        std::string("Unknown enumerate direction: ").append(inspect_str(arg2)).c_str());
    }
  }
  try {
    result = (VALUE)Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__index__SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_index__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  try {
    result = (VALUE)Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__index__SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_index__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  VALUE arg3 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  arg2 = argv[0];
  arg3 = argv[1];
  if(MatrixUtil::sym2each_which(arg3) == MatrixUtil::EACH_UNKNOWN){
    SWIG_exception(SWIG_ValueError,
      std::string("Unknown enumerate direction: ").append(inspect_str(arg3)).c_str());
  }
  try {
    result = (VALUE)Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__index__SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,arg2,arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_index__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  arg2 = argv[0];
  try {
    result = (VALUE)Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__index__SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_index(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix_FrozenComplexD_index__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (MatrixUtil::sym2each_which(argv[1]) != MatrixUtil::EACH_UNKNOWN);
      }
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_index__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_index__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_Matrix_FrozenComplexD_index__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "index", 
    "    VALUE index(MatrixUtil::each_which_t const each_which)\n"
    "    VALUE index()\n"
    "    VALUE index(VALUE value, VALUE idx_selector)\n"
    "    VALUE index(VALUE value)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.to_a

  call-seq:
    to_a -> VALUE

Convert Matrix_FrozenComplexD to an Array.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_to_a(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = (VALUE)Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__to_a((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.to_s

  call-seq:
    to_s -> std::string

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD___str__(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","__str__", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg____str__((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.conjugate

  call-seq:
    conjugate -> Matrix_FrozenComplexD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_conjugate(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","conjugate", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__conjugate((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >(static_cast< const Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.adjoint

  call-seq:
    adjoint -> Matrix_FrozenComplexD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_adjoint(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","adjoint", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__adjoint((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >(static_cast< const Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.transpose

  call-seq:
    transpose -> Matrix_FrozenComplexD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_transpose(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","transpose", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__transpose((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >(static_cast< const Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.partial

  call-seq:
    partial(unsigned int const & new_rows, unsigned int const & new_columns, unsigned int const & row_offset, 
    unsigned int const & column_offset) -> Matrix_FrozenComplexD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_partial(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int temp5 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  SwigValueWrapper< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","partial", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","partial", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","partial", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","partial", 4, argv[2] ));
  } 
  temp4 = static_cast< unsigned int >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "unsigned int","partial", 5, argv[3] ));
  } 
  temp5 = static_cast< unsigned int >(val5);
  arg5 = &temp5;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  raise_if_lt_zero_after_asval(*arg4);
  raise_if_lt_zero_after_asval(*arg5);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__partial((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >(static_cast< const Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.row_vector

  call-seq:
    row_vector(unsigned int const & row) -> Matrix_FrozenComplexD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_row_vector(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","row_vector", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","row_vector", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  raise_if_lt_zero_after_asval(*arg2);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__row_vector((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(unsigned int const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >(static_cast< const Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.column_vector

  call-seq:
    column_vector(unsigned int const & column) -> Matrix_FrozenComplexD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_column_vector(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","column_vector", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","column_vector", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  raise_if_lt_zero_after_asval(*arg2);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__column_vector((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,(unsigned int const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >(static_cast< const Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD.eigen

  call-seq:
    eigen

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_eigen(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg2 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp2 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp3 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > const *","eigen", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > * >(argp1);
  try {
    Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg__eigen((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const *)arg1,*arg2,*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg2)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg3)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg_(void *self) {
    Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *)self;
    delete arg1;
}

/*
  Document-class: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f

  Proxy of C++ GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f class


*/
static swig_class SwigClassMatrix_FrozenComplexD_f;

/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.rows

  call-seq:
    rows -> unsigned int const

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_rows(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *","rows", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = (unsigned int)(arg1)->rows();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.columns

  call-seq:
    columns -> unsigned int const

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_columns(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *","columns", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = (unsigned int)(arg1)->columns();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.square?

  call-seq:
    square? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_squareq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","isSquare", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->isSquare();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.diagonal?

  call-seq:
    diagonal? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_diagonalq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","isDiagonal", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->isDiagonal();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.lower_triangular?

  call-seq:
    lower_triangular? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_lower_triangularq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","isLowerTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->isLowerTriangular();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.upper_triangular?

  call-seq:
    upper_triangular? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_upper_triangularq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","isUpperTriangular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->isUpperTriangular();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.symmetric?

  call-seq:
    symmetric? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_symmetricq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","isSymmetric", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->isSymmetric();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.hermitian?

  call-seq:
    hermitian? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_hermitianq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","isHermitian", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->isHermitian();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.skew_symmetric?

  call-seq:
    skew_symmetric? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_skew_symmetricq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","isSkewSymmetric", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->isSkewSymmetric();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.normal?

  call-seq:
    normal? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_normalq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","isNormal", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->isNormal();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.orthogonal?

  call-seq:
    orthogonal? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_orthogonalq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","isOrthogonal", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->isOrthogonal();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.unitary?

  call-seq:
    unitary? -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_unitaryq___(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","isUnitary", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->isUnitary();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.trace

  call-seq:
    trace -> ComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_trace(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","trace", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  try {
    result = ((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->trace();
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.sum

  call-seq:
    sum -> ComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_sum(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","sum", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = ((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->sum();
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.determinant

  call-seq:
    determinant -> ComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_determinant(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","determinant", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  try {
    result = ((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->determinant();
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.rank

  call-seq:
    rank -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_rank(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","rank", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  try {
    result = (unsigned int)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->rank();
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.cofactor

  call-seq:
    cofactor(unsigned int const & row, unsigned int const & column) -> ComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_cofactor(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","cofactor", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","cofactor", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","cofactor", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  try {
    result = ((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->cofactor((unsigned int const &)*arg2,(unsigned int const &)*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.[]

  call-seq:
    [](row, column) -> ComplexD

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___getitem__(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  Complex< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","__getitem__", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","__getitem__", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg____getitem__((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3);
  {
    vresult = swig::from(result);
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.copy

  call-seq:
    copy -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_copy(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","copy", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__copy((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.circular

  call-seq:
    circular(unsigned int const & row_offset, unsigned int const & column_offset, unsigned int const & new_rows, 
    unsigned int const & new_columns) -> MatrixComplexD
    circular(unsigned int const & row_offset, unsigned int const & column_offset) -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_circular__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int temp5 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","circular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","circular", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","circular", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","circular", 4, argv[2] ));
  } 
  temp4 = static_cast< unsigned int >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "unsigned int","circular", 5, argv[3] ));
  } 
  temp5 = static_cast< unsigned int >(val5);
  arg5 = &temp5;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  raise_if_lt_zero_after_asval(*arg4);
  raise_if_lt_zero_after_asval(*arg5);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__circular__SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_circular__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","circular", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","circular", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","circular", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__circular__SWIG_1((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_f_circular(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matrix_FrozenComplexD_f_circular__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Matrix_FrozenComplexD_f_circular__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "circular", 
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > circular(unsigned int const &row_offset, unsigned int const &column_offset, unsigned int const &new_rows, unsigned int const &new_columns)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > circular(unsigned int const &row_offset, unsigned int const &column_offset)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.==

  call-seq:
    ==(matrix) -> bool
    ==(matrix) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___eq____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","operator ==<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator ==<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator ==<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > * >(argp2);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR operator ==((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___eq____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","operator ==<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator ==<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator ==<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  result = (bool)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR operator ==((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_f___eq__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f___eq____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f___eq____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__eq__", 
    "    bool __eq__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix)\n"
    "    bool __eq__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.different_size?

  call-seq:
    different_size?(Matrix_FrozenComplexD matrix) -> bool
    different_size?(Matrix_FrozenComplexD_f matrix) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_different_sizeq_____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","isDifferentSize<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > * >(argp2);
  result = (bool)Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_different_sizeq_____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","isDifferentSize<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","isDifferentSize<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  result = (bool)Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__isDifferentSize_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_f_different_sizeq___(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f_different_sizeq_____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f_different_sizeq_____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "different_size?", 
    "    bool different_size?(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix)\n"
    "    bool different_size?(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.*

  call-seq:
    *(ComplexD scalar) -> MatrixComplexD
    *(Matrix_FrozenComplexD matrix) -> MatrixComplexD
    *(Matrix_FrozenComplexD_f matrix) -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > temp2 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  {
    if((!SWIG_IsOK(swig::asptr(argv[0], &arg2)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg2 = &temp2))))){
      SWIG_exception(SWIG_TypeError, "in method 'operator *', expecting type Complex< double >");
    }
  }
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sm___SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Complex< double > const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f./

  call-seq:
    /(ComplexD scalar) -> MatrixComplexD
    /(Matrix_FrozenComplexD matrix) -> MatrixComplexD
    /(Matrix_FrozenComplexD_f matrix) -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___div____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > temp2 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  {
    if((!SWIG_IsOK(swig::asptr(argv[0], &arg2)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg2 = &temp2))))){
      SWIG_exception(SWIG_TypeError, "in method 'operator /', expecting type Complex< double >");
    }
  }
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sd___SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Complex< double > const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.-@

  call-seq:
    -@ -> MatrixComplexD

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___neg__(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Ss_((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.+

  call-seq:
    +(matrix) -> MatrixComplexD
    +(matrix) -> MatrixComplexD
    +(scalar) -> MatrixComplexD

Add operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___add____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","operator +<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator +<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator +<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___add____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","operator +<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator +<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator +<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sa__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___add____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > temp2 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  {
    if((!SWIG_IsOK(swig::asptr(argv[0], &arg2)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg2 = &temp2))))){
      SWIG_exception(SWIG_TypeError, "in method 'operator +', expecting type Complex< double >");
    }
  }
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sa___SWIG_3((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Complex< double > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_f___add__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f___add____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f___add____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = swig::check<Complex< double > * >(argv[1]) || swig::check<Complex< double > >(argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f___add____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__add__", 
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __add__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __add__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __add__(Complex< double > const &scalar)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.-

  call-seq:
    -(matrix) -> MatrixComplexD
    -(matrix) -> MatrixComplexD
    -(scalar) -> MatrixComplexD

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","operator -<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator -<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator -<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___sub____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","operator -<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator -<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator -<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Ss__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___sub____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Complex< double > temp2 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  {
    if((!SWIG_IsOK(swig::asptr(argv[0], &arg2)))
      && (!SWIG_IsOK(swig::asval(argv[0], (arg2 = &temp2))))){
      SWIG_exception(SWIG_TypeError, "in method 'operator -', expecting type Complex< double >");
    }
  }
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Ss___SWIG_3((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Complex< double > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_f___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f___sub____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = swig::check<Complex< double > * >(argv[1]) || swig::check<Complex< double > >(argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f___sub____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__", 
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __sub__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __sub__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __sub__(Complex< double > const &scalar)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.entrywise_product

  call-seq:
    entrywise_product(Matrix_FrozenComplexD matrix) -> MatrixComplexD
    entrywise_product(Matrix_FrozenComplexD_f matrix) -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_entrywise_product__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","entrywise_product<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_entrywise_product__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","entrywise_product<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","entrywise_product<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__entrywise_product_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_f_entrywise_product(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f_entrywise_product__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f_entrywise_product__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "entrywise_product", 
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > entrywise_product(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > entrywise_product(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.*

  call-seq:
    *(ComplexD scalar) -> MatrixComplexD
    *(Matrix_FrozenComplexD matrix) -> MatrixComplexD
    *(Matrix_FrozenComplexD_f matrix) -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","operator *<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator *<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator *<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___mul____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","operator *<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator *<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator *<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sm__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_f___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = swig::check<Complex< double > * >(argv[1]) || swig::check<Complex< double > >(argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f___mul____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__mul__", 
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __mul__(Complex< double > const &scalar)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __mul__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __mul__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.first_minor

  call-seq:
    first_minor(unsigned int const & row, unsigned int const & column) -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_first_minor(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","first_minor", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","first_minor", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","first_minor", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__first_minor((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.adjugate

  call-seq:
    adjugate -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_adjugate(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","adjugate", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__adjugate((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.lup

  call-seq:
    lup

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_lup(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg2 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg3 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp2 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp3 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp4 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  
  arg4 = &temp4;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","lup", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  try {
    Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__lup((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,*arg2,*arg3,*arg4);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg2)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg3)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg4)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.ud

  call-seq:
    ud

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_ud(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg2 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp2 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp3 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","ud", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  try {
    Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__ud((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,*arg2,*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg2)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg3)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.qr

  call-seq:
    qr

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_qr(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg2 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp2 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp3 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","qr", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__qr((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,*arg2,*arg3);
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg2)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg3)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.inverse

  call-seq:
    inverse -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_inverse(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","inverse", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__inverse((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f./

  call-seq:
    /(ComplexD scalar) -> MatrixComplexD
    /(Matrix_FrozenComplexD matrix) -> MatrixComplexD
    /(Matrix_FrozenComplexD_f matrix) -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___div____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","operator /<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator /<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","operator /<(T,Array2D_Dense<(T)>,MatViewBase)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___div____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","operator /<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator /<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","operator /<(T,Array2D_Dense<(T)>,MatView_f)>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > * >(argp2);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__operator_Sd__Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_3((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg2);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_f___div__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = swig::check<Complex< double > * >(argv[1]) || swig::check<Complex< double > >(argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f___div____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f___div____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f___div____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__div__", 
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __div__(Complex< double > const &scalar)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __div__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > __div__(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.debug

  call-seq:
    debug -> std::string

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_debug(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","debug", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__debug((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.each

  call-seq:
    each(each_which=MatrixUtil::EACH_ALL) -> Matrix_FrozenComplexD_f
    each -> Matrix_FrozenComplexD_f

Iterate thru each element in the Matrix_FrozenComplexD_f.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_each__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void (*arg2)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &) = (void (*)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &)) 0 ;
  MatrixUtil::each_which_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const Complex< double > *)0);
  }
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  {
    arg3 = MatrixUtil::sym2each_which(argv[0]);
    if(arg3 == MatrixUtil::EACH_UNKNOWN){
      SWIG_exception(SWIG_ValueError,
        std::string("Unknown enumerate direction: ").append(inspect_str(arg3)).c_str());
    }
  }
  try {
    result = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *) &Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__each__SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,arg2,arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_each__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void (*arg2)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &) = (void (*)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const Complex< double > *)0);
  }
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  try {
    result = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *) &Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__each__SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_f_each(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix_FrozenComplexD_f_each__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (MatrixUtil::sym2each_which(argv[1]) != MatrixUtil::EACH_UNKNOWN);
      }
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f_each__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "each", 
    "    Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const each(void (*each_func)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &), MatrixUtil::each_which_t const each_which)\n"
    "    Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const & each(void (*each_func)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &))\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.map

  call-seq:
    map(MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL) -> MatrixComplexD
    map -> MatrixComplexD

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_map__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void (*arg2)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &) = (void (*)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &)) 0 ;
  MatrixUtil::each_which_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const Complex< double > *)0);
  }
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","map", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  {
    arg3 = MatrixUtil::sym2each_which(argv[0]);
    if(arg3 == MatrixUtil::EACH_UNKNOWN){
      SWIG_exception(SWIG_ValueError,
        std::string("Unknown enumerate direction: ").append(inspect_str(arg3)).c_str());
    }
  }
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__map__SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,arg2,arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_map__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void (*arg2)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &) = (void (*)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg2 = matrix_each((const Complex< double > *)0);
  }
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","map", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__map__SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_f_map(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix_FrozenComplexD_f_map__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (MatrixUtil::sym2each_which(argv[1]) != MatrixUtil::EACH_UNKNOWN);
      }
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f_map__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "map", 
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > map(void (*each_func)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &), MatrixUtil::each_which_t const each_which)\n"
    "    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > map(void (*each_func)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &))\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.index

  call-seq:
    index(MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL) -> VALUE
    index -> VALUE
    index(VALUE value, VALUE idx_selector=Qnil) -> VALUE
    index(VALUE value) -> VALUE

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_index__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  MatrixUtil::each_which_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  {
    arg2 = MatrixUtil::sym2each_which(argv[0]);
    if(arg2 == MatrixUtil::EACH_UNKNOWN){
      SWIG_exception(SWIG_ValueError,
        std::string("Unknown enumerate direction: ").append(inspect_str(arg2)).c_str());
    }
  }
  try {
    result = (VALUE)Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__index__SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_index__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  try {
    result = (VALUE)Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__index__SWIG_0((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_index__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  VALUE arg3 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  arg2 = argv[0];
  arg3 = argv[1];
  if(MatrixUtil::sym2each_which(arg3) == MatrixUtil::EACH_UNKNOWN){
    SWIG_exception(SWIG_ValueError,
      std::string("Unknown enumerate direction: ").append(inspect_str(arg3)).c_str());
  }
  try {
    result = (VALUE)Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__index__SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,arg2,arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_index__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","index", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  arg2 = argv[0];
  try {
    result = (VALUE)Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__index__SWIG_2((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  }
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix_FrozenComplexD_f_index(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix_FrozenComplexD_f_index__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (MatrixUtil::sym2each_which(argv[1]) != MatrixUtil::EACH_UNKNOWN);
      }
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f_index__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_Matrix_FrozenComplexD_f_index__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_Matrix_FrozenComplexD_f_index__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "index", 
    "    VALUE index(MatrixUtil::each_which_t const each_which)\n"
    "    VALUE index()\n"
    "    VALUE index(VALUE value, VALUE idx_selector)\n"
    "    VALUE index(VALUE value)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.to_a

  call-seq:
    to_a -> VALUE

Convert Matrix_FrozenComplexD_f to an Array.
*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_to_a(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = (VALUE)Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__to_a((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.to_s

  call-seq:
    to_s -> std::string

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f___str__(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","__str__", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg____str__((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.conjugate

  call-seq:
    conjugate -> Matrix_FrozenComplexD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_conjugate(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","conjugate", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__conjugate((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >(static_cast< const Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.adjoint

  call-seq:
    adjoint -> Matrix_FrozenComplexD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_adjoint(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","adjoint", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__adjoint((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >(static_cast< const Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.transpose

  call-seq:
    transpose -> Matrix_FrozenComplexD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_transpose(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","transpose", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__transpose((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >(static_cast< const Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.partial

  call-seq:
    partial(unsigned int const & new_rows, unsigned int const & new_columns, unsigned int const & row_offset, 
    unsigned int const & column_offset) -> Matrix_FrozenComplexD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_partial(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int temp5 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  SwigValueWrapper< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","partial", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","partial", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","partial", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","partial", 4, argv[2] ));
  } 
  temp4 = static_cast< unsigned int >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "unsigned int","partial", 5, argv[3] ));
  } 
  temp5 = static_cast< unsigned int >(val5);
  arg5 = &temp5;
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  raise_if_lt_zero_after_asval(*arg4);
  raise_if_lt_zero_after_asval(*arg5);
  try {
    result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__partial((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >(static_cast< const Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.row_vector

  call-seq:
    row_vector(unsigned int const & row) -> Matrix_FrozenComplexD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_row_vector(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","row_vector", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","row_vector", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  raise_if_lt_zero_after_asval(*arg2);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__row_vector((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(unsigned int const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >(static_cast< const Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.column_vector

  call-seq:
    column_vector(unsigned int const & column) -> Matrix_FrozenComplexD_f

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_column_vector(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","column_vector", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","column_vector", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  raise_if_lt_zero_after_asval(*arg2);
  result = Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__column_vector((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,(unsigned int const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >(static_cast< const Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f >& >(result))), SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::Matrix_FrozenComplexD_f.eigen

  call-seq:
    eigen

An instance method.

*/
SWIGINTERN VALUE
_wrap_Matrix_FrozenComplexD_f_eigen(int argc, VALUE *argv, VALUE self) {
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg2 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp2 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > temp3 ;
  VALUE vresult = Qnil;
  
  
  arg2 = &temp2;
  
  
  arg3 = &temp3;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > const *","eigen", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > * >(argp1);
  try {
    Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg__eigen((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const *)arg1,*arg2,*arg3);
  } catch(std::logic_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = rb_ary_new();
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg2)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  {
    vresult = SWIG_Ruby_AppendOutput(vresult, SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(*arg3)), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN));
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg_(void *self) {
    Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *arg1 = (Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *)self;
    delete arg1;
}

/*
  Document-class: GPS_PVT::SylphideMath::MatrixComplexD < SylphideMath::Matrix_FrozenComplexD

  Proxy of C++ GPS_PVT::SylphideMath::MatrixComplexD class


*/
static swig_class SwigClassMatrixComplexD;

/*
  Document-method: GPS_PVT::SylphideMath::MatrixComplexD.new

  call-seq:
    MatrixComplexD.new(unsigned int const & rows, unsigned int const & columns, void const * replacer=nil)
    MatrixComplexD.new(unsigned int const & rows, unsigned int const & columns)
    MatrixComplexD.new(unsigned int const & rows, unsigned int const & columns, ComplexD serialized)
    MatrixComplexD.new(void const * replacer)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_MatrixComplexD__SWIG_0(int argc, VALUE *argv, VALUE self) {
  unsigned int *arg1 = 0 ;
  unsigned int *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "unsigned int","Matrix<(Complex<(double)>,Array2D_Dense<(Complex<(double)>)>)>", 1, argv[0] ));
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","Matrix<(Complex<(double)>,Array2D_Dense<(Complex<(double)>)>)>", 2, argv[1] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  {
    arg3 = &argv[2];
  }
  raise_if_lt_zero_after_asval(*arg1);
  raise_if_lt_zero_after_asval(*arg2);
  try {
    result = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *)new_Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg___SWIG_0((unsigned int const &)*arg1,(unsigned int const &)*arg2,(void const *)arg3);
    DATA_PTR(self) = result;
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MatrixComplexD__SWIG_1(int argc, VALUE *argv, VALUE self) {
  unsigned int *arg1 = 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "unsigned int","Matrix<(Complex<(double)>,Array2D_Dense<(Complex<(double)>)>)>", 1, argv[0] ));
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","Matrix<(Complex<(double)>,Array2D_Dense<(Complex<(double)>)>)>", 2, argv[1] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  raise_if_lt_zero_after_asval(*arg1);
  raise_if_lt_zero_after_asval(*arg2);
  try {
    result = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *)new_Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg___SWIG_0((unsigned int const &)*arg1,(unsigned int const &)*arg2);
    DATA_PTR(self) = result;
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_MatrixComplexD__SWIG_2(int argc, VALUE *argv, VALUE self) {
  unsigned int *arg1 = 0 ;
  unsigned int *arg2 = 0 ;
  Complex< double > *arg3 = (Complex< double > *) 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "unsigned int","Matrix<(Complex<(double)>,Array2D_Dense<(Complex<(double)>)>)>", 1, argv[0] ));
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","Matrix<(Complex<(double)>,Array2D_Dense<(Complex<(double)>)>)>", 2, argv[1] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Complex< double > const *","Matrix<(Complex<(double)>,Array2D_Dense<(Complex<(double)>)>)>", 3, argv[2] )); 
  }
  arg3 = reinterpret_cast< Complex< double > * >(argp3);
  raise_if_lt_zero_after_asval(*arg1);
  raise_if_lt_zero_after_asval(*arg2);
  result = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *)new_Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg___SWIG_2((unsigned int const &)*arg1,(unsigned int const &)*arg2,(Complex< double > const *)arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_MatrixComplexD_allocate(VALUE self)
#else
_wrap_MatrixComplexD_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_MatrixComplexD__SWIG_3(int argc, VALUE *argv, VALUE self) {
  void *arg1 = (void *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    arg1 = &argv[0];
  }
  try {
    result = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *)new_Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg___SWIG_3((void const *)arg1);
    DATA_PTR(self) = result;
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_MatrixComplexD(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    {
      _v = rb_block_given_p() ? 0 : 1;
      
      
      
    }
    if (_v) {
      return _wrap_new_MatrixComplexD__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MatrixComplexD__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ComplexT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_MatrixComplexD__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = rb_block_given_p() ? 0 : 1;
          
          
          
        }
        if (_v) {
          return _wrap_new_MatrixComplexD__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MatrixComplexD.new", 
    "    MatrixComplexD.new(unsigned int const &rows, unsigned int const &columns, void const *replacer)\n"
    "    MatrixComplexD.new(unsigned int const &rows, unsigned int const &columns)\n"
    "    MatrixComplexD.new(unsigned int const &rows, unsigned int const &columns, Complex< double > const *serialized)\n"
    "    MatrixComplexD.new(void const *replacer)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixComplexD.[]=

  call-seq:
    []=(row, column, value) -> ComplexD

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_MatrixComplexD___setitem__(int argc, VALUE *argv, VALUE self) {
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg1 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  Complex< double > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  Complex< double > temp4 ;
  Complex< double > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","__setitem__", 2, argv[0] ));
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","__setitem__", 3, argv[1] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  {
    if((!SWIG_IsOK(swig::asptr(argv[2], &arg4)))
      && (!SWIG_IsOK(swig::asval(argv[2], (arg4 = &temp4))))){
      SWIG_exception(SWIG_TypeError, "in method '__setitem__', expecting type Complex< double >");
    }
  }
  raise_if_lt_zero_after_asval(*arg2);
  raise_if_lt_zero_after_asval(*arg3);
  result = (Complex< double > *) &Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg____setitem__(arg1,(unsigned int const &)*arg2,(unsigned int const &)*arg3,(Complex< double > const &)*arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixComplexD.scalar

  call-seq:
    scalar(unsigned int const & size, ComplexD scalar) -> MatrixComplexD

A class method.

*/
SWIGINTERN VALUE
_wrap_MatrixComplexD_scalar(int argc, VALUE *argv, VALUE self) {
  unsigned int *arg1 = 0 ;
  Complex< double > *arg2 = 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  Complex< double > temp2 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "unsigned int","Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__getScalar", 1, argv[0] ));
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  {
    if((!SWIG_IsOK(swig::asptr(argv[1], &arg2)))
      && (!SWIG_IsOK(swig::asval(argv[1], (arg2 = &temp2))))){
      SWIG_exception(SWIG_TypeError, "in method 'Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__getScalar', expecting type Complex< double >");
    }
  }
  raise_if_lt_zero_after_asval(*arg1);
  result = Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__getScalar((unsigned int const &)*arg1,(Complex< double > const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixComplexD.I

  call-seq:
    I(unsigned int const & size) -> MatrixComplexD

A class method.

*/
SWIGINTERN VALUE
_wrap_MatrixComplexD_I(int argc, VALUE *argv, VALUE self) {
  unsigned int *arg1 = 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  SwigValueWrapper< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "unsigned int","Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__getI", 1, argv[0] ));
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  raise_if_lt_zero_after_asval(*arg1);
  result = Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__getI((unsigned int const &)*arg1);
  vresult = SWIG_NewPointerObj((new Matrix< Complex< double >,Array2D_Dense< Complex< double > > >(static_cast< const Matrix< Complex< double >,Array2D_Dense< Complex< double > > >& >(result))), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixComplexD.swap_rows

  call-seq:
    swap_rows(unsigned int const & r1, unsigned int const & r2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MatrixComplexD_swap_rowsN___(int argc, VALUE *argv, VALUE self) {
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg1 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *arg2 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *","swap_rows", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > * >(argp1);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[0], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","swap_rows", 3, argv[0] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[1], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","swap_rows", 4, argv[1] ));
  } 
  temp4 = static_cast< unsigned int >(val4);
  arg4 = &temp4;
  raise_if_lt_zero_after_asval(*arg3);
  raise_if_lt_zero_after_asval(*arg4);
  try {
    Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__swap_rows(arg1,arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixComplexD.swap_columns

  call-seq:
    swap_columns(unsigned int const & c1, unsigned int const & c2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_MatrixComplexD_swap_columnsN___(int argc, VALUE *argv, VALUE self) {
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg1 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *arg2 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *","swap_columns", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > * >(argp1);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[0], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","swap_columns", 3, argv[0] ));
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[1], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","swap_columns", 4, argv[1] ));
  } 
  temp4 = static_cast< unsigned int >(val4);
  arg4 = &temp4;
  raise_if_lt_zero_after_asval(*arg3);
  raise_if_lt_zero_after_asval(*arg4);
  try {
    Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__swap_columns(arg1,arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixComplexD.replace!

  call-seq:
    replace!(matrix)
    replace!(matrix)
    replace!(replacer=nil)
    replace!
    replace!(serialized)

Replace all or a portion of the MatrixComplexD.
*/
SWIGINTERN VALUE
_wrap_MatrixComplexD_replaceN_____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg1 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *arg2 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *","replace<(T,Array2D_Dense<(T)>,MatViewBase)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > * >(argp1);
  res3 = SWIG_ConvertPtr(argv[0], &argp3, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","replace<(T,Array2D_Dense<(T)>,MatViewBase)>", 3, argv[0] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &","replace<(T,Array2D_Dense<(T)>,MatViewBase)>", 3, argv[0])); 
  }
  arg3 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > * >(argp3);
  try {
    Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__replace_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatViewBase_Sg___SWIG_1(arg1,arg2,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &)*arg3);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplexD_replaceN_____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg1 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *arg2 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *) 0 ;
  Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *","replace<(T,Array2D_Dense<(T)>,MatView_f)>", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > * >(argp1);
  res3 = SWIG_ConvertPtr(argv[0], &argp3, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","replace<(T,Array2D_Dense<(T)>,MatView_f)>", 3, argv[0] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &","replace<(T,Array2D_Dense<(T)>,MatView_f)>", 3, argv[0])); 
  }
  arg3 = reinterpret_cast< Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > * >(argp3);
  try {
    Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__replace_Sl_T_Sc_Array2D_Dense_Sl_T_Sg__Sc_MatView_f_Sg___SWIG_2(arg1,arg2,(Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &)*arg3);
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplexD_replaceN_____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg1 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *arg2 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *","replace", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > * >(argp1);
  {
    arg3 = &argv[0];
  }
  try {
    Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__replace__SWIG_3(arg1,arg2,(void const *)arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplexD_replaceN_____SWIG_4(int argc, VALUE *argv, VALUE self) {
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg1 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *arg2 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *","replace", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > * >(argp1);
  try {
    Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__replace__SWIG_3(arg1,arg2);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplexD_replaceN_____SWIG_5(int argc, VALUE *argv, VALUE self) {
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg1 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *arg2 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *) 0 ;
  Complex< double > *arg3 = (Complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *","replace", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > * >(argp1);
  res3 = SWIG_ConvertPtr(argv[0], &argp3,SWIGTYPE_p_ComplexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Complex< double > const *","replace", 3, argv[0] )); 
  }
  arg3 = reinterpret_cast< Complex< double > * >(argp3);
  try {
    Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__replace__SWIG_5(arg1,arg2,(Complex< double > const *)arg3);
  } catch(std::runtime_error &_e) {
    SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixComplexD_replaceN___(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixComplexD_replaceN_____SWIG_4(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixComplexD_replaceN_____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixComplexD_replaceN_____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ComplexT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixComplexD_replaceN_____SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = rb_block_given_p() ? 0 : 1;
        
        
        
      }
      if (_v) {
        return _wrap_MatrixComplexD_replaceN_____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "replace!", 
    "    void replace!(Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *self_p, Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > const &matrix)\n"
    "    void replace!(Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *self_p, Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > const &matrix)\n"
    "    void replace!(Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *self_p, void const *replacer)\n"
    "    void replace!(Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *self_p)\n"
    "    void replace!(Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *self_p, Complex< double > const *serialized)\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixComplexD.map!

  call-seq:
    map!(MatrixUtil::each_which_t const each_which=MatrixUtil::EACH_ALL)
    map!

An instance method.

*/
SWIGINTERN VALUE
_wrap_MatrixComplexD_mapN_____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg1 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *arg2 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *) 0 ;
  void (*arg3)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &) = (void (*)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &)) 0 ;
  MatrixUtil::each_which_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg3 = matrix_each((const Complex< double > *)0);
  }
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *","map_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > * >(argp1);
  {
    arg4 = MatrixUtil::sym2each_which(argv[0]);
    if(arg4 == MatrixUtil::EACH_UNKNOWN){
      SWIG_exception(SWIG_ValueError,
        std::string("Unknown enumerate direction: ").append(inspect_str(arg4)).c_str());
    }
  }
  try {
    Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__map_bang__SWIG_0(arg1,arg2,arg3,arg4);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatrixComplexD_mapN_____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg1 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *) 0 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *arg2 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *) 0 ;
  void (*arg3)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &) = (void (*)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  
  {
    if(!rb_block_given_p()){
      return rb_enumeratorize(self, ID2SYM(rb_frame_callee()), argc, argv);
    }
    arg3 = matrix_each((const Complex< double > *)0);
  }
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *","map_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > * >(argp1);
  try {
    Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__map_bang__SWIG_0(arg1,arg2,arg3);
  } catch(native_exception &_e) {
    (&_e)->regenerate();
    SWIG_fail;
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  vresult = self;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MatrixComplexD_mapN___(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixComplexD_mapN_____SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (MatrixUtil::sym2each_which(argv[1]) != MatrixUtil::EACH_UNKNOWN);
      }
      if (_v) {
        return _wrap_MatrixComplexD_mapN_____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "map!", 
    "    void map!(Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *self_p, void (*each_func)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &), MatrixUtil::each_which_t const each_which)\n"
    "    void map!(Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *self_p, void (*each_func)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &))\n");
  
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath::MatrixComplexD.resize

  call-seq:
    resize(r_p, c_p) -> MatrixComplexD

Resize the size of the MatrixComplexD.
*/
SWIGINTERN VALUE
_wrap_MatrixComplexD_resizeN___(int argc, VALUE *argv, VALUE self) {
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg1 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int temp3 ;
  Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< Matrix< Complex< double >,Array2D_Dense< Complex< double > > > * >(argp1);
  {
    if(SWIG_IsOK(SWIG_AsVal_unsigned_SS_int (argv[0], &temp2))){
      raise_if_lt_zero_after_asval(temp2);
      
      arg2 = &temp2;
    }
    
    else if(NIL_P(argv[0])){
      arg2 = NULL;
    }
    
    else{
      SWIG_exception(SWIG_TypeError, "unsigned int is expected");
    }
  }
  {
    if(SWIG_IsOK(SWIG_AsVal_unsigned_SS_int (argv[1], &temp3))){
      raise_if_lt_zero_after_asval(temp3);
      
      arg3 = &temp3;
    }
    
    else if(NIL_P(argv[1])){
      arg3 = NULL;
    }
    
    else{
      SWIG_exception(SWIG_TypeError, "unsigned int is expected");
    }
  }
  result = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *) &Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg__resize(arg1,(unsigned int const *)arg2,(unsigned int const *)arg3);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg_(void *self) {
    Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *arg1 = (Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *)self;
    delete arg1;
}

/*
  Document-method: GPS_PVT::SylphideMath.tolerance=

  call-seq:
    tolerance=(double const & width) -> double

A module function.

*/
SWIGINTERN VALUE
_wrap_tolerancee___(int argc, VALUE *argv, VALUE self) {
  double *arg1 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","set_tolerance", 1, argv[0] ));
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  result = (double)set_tolerance((double const &)*arg1);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: GPS_PVT::SylphideMath.tolerance

  call-seq:
    tolerance -> double

A module function.

*/
SWIGINTERN VALUE
_wrap_tolerance(int argc, VALUE *argv, VALUE self) {
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (double)get_tolerance();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_native_exceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((native_exception *) x));
}
static void *_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_tTo_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *)  ((Matrix< double,Array2D_Dense< double > > *) x));
}
static void *_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_tTo_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *)  ((Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *) x));
}
static swig_type_info _swigt__p_ComplexT_double_t = {"_p_ComplexT_double_t", "Complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t = {"_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t", "Matrix< Complex< double >,Array2D_Dense< Complex< double > > > *|Matrix< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *|Matrix< Complex< double >,Array2D_Dense< Complex< double > > >::self_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t = {"_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t", "Matrix< double,Array2D_Dense< double > > *|Matrix< double,Array2D_Dense< double >,MatrixViewBase< > > *|Matrix< double,Array2D_Dense< double > >::self_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixViewBaseT_t = {"_p_MatrixViewBaseT_t", "MatrixViewBase< > *|MatViewBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixViewFilterT_MatrixViewBaseT_t_t = {"_p_MatrixViewFilterT_MatrixViewBaseT_t_t", "MatrixViewFilter< MatrixViewBase< > > *|MatView_f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t = {"_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewBase< > > *|Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatViewBase > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t = {"_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t", "Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatrixViewFilter< MatrixViewBase< > > > *|Matrix_Frozen< Complex< double >,Array2D_Dense< Complex< double > >,MatView_f > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t = {"_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewBase< > > *|Matrix_Frozen< double,Array2D_Dense< double >,MatViewBase > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t = {"_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t", "Matrix_Frozen< double,Array2D_Dense< double >,MatrixViewFilter< MatrixViewBase< > > > *|Matrix_Frozen< double,Array2D_Dense< double >,MatView_f > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__Complex__double___p_Complex__double___r_q_const__unsigned_int_r_q_const__unsigned_int__void = {"_p_f_r_q_const__Complex__double___p_Complex__double___r_q_const__unsigned_int_r_q_const__unsigned_int__void", "void (*)(Complex< double > const &,Complex< double > *,unsigned int const &,unsigned int const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__double_p_double_r_q_const__unsigned_int_r_q_const__unsigned_int__void = {"_p_f_r_q_const__double_p_double_r_q_const__unsigned_int_r_q_const__unsigned_int__void", "void (*)(double const &,double *,unsigned int const &,unsigned int const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_self_t = {"_p_self_t", "self_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_native_exception = {"_p_native_exception", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_swig__GC_VALUE = {"_p_swig__GC_VALUE", "swig::GC_VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ComplexT_double_t,
  &_swigt__p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,
  &_swigt__p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,
  &_swigt__p_MatrixViewBaseT_t,
  &_swigt__p_MatrixViewFilterT_MatrixViewBaseT_t_t,
  &_swigt__p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,
  &_swigt__p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,
  &_swigt__p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,
  &_swigt__p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_f_r_q_const__Complex__double___p_Complex__double___r_q_const__unsigned_int_r_q_const__unsigned_int__void,
  &_swigt__p_f_r_q_const__double_p_double_r_q_const__unsigned_int_r_q_const__unsigned_int__void,
  &_swigt__p_native_exception,
  &_swigt__p_self_t,
  &_swigt__p_std__exception,
  &_swigt__p_swig__GC_VALUE,
  &_swigt__p_unsigned_int,
};

static swig_cast_info _swigc__p_ComplexT_double_t[] = {  {&_swigt__p_ComplexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t[] = {  {&_swigt__p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t[] = {  {&_swigt__p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixViewBaseT_t[] = {  {&_swigt__p_MatrixViewBaseT_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixViewFilterT_MatrixViewBaseT_t_t[] = {  {&_swigt__p_MatrixViewFilterT_MatrixViewBaseT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t[] = {  {&_swigt__p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, _p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_tTo_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0, 0},  {&_swigt__p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t[] = {  {&_swigt__p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t[] = {  {&_swigt__p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0, 0, 0},  {&_swigt__p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, _p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_tTo_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t[] = {  {&_swigt__p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__Complex__double___p_Complex__double___r_q_const__unsigned_int_r_q_const__unsigned_int__void[] = {  {&_swigt__p_f_r_q_const__Complex__double___p_Complex__double___r_q_const__unsigned_int_r_q_const__unsigned_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__double_p_double_r_q_const__unsigned_int_r_q_const__unsigned_int__void[] = {  {&_swigt__p_f_r_q_const__double_p_double_r_q_const__unsigned_int_r_q_const__unsigned_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_self_t[] = {  {&_swigt__p_self_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_native_exception[] = {{&_swigt__p_native_exception, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_native_exception, _p_native_exceptionTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__GC_VALUE[] = {  {&_swigt__p_swig__GC_VALUE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ComplexT_double_t,
  _swigc__p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,
  _swigc__p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,
  _swigc__p_MatrixViewBaseT_t,
  _swigc__p_MatrixViewFilterT_MatrixViewBaseT_t_t,
  _swigc__p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t,
  _swigc__p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,
  _swigc__p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t,
  _swigc__p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_f_r_q_const__Complex__double___p_Complex__double___r_q_const__unsigned_int_r_q_const__unsigned_int__void,
  _swigc__p_f_r_q_const__double_p_double_r_q_const__unsigned_int_r_q_const__unsigned_int__void,
  _swigc__p_native_exception,
  _swigc__p_self_t,
  _swigc__p_std__exception,
  _swigc__p_swig__GC_VALUE,
  _swigc__p_unsigned_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_SylphideMath(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mSylphideMath = rb_define_module("GPS_PVT");
  mSylphideMath = rb_define_module_under(mSylphideMath, "SylphideMath");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  rb_define_const(mSylphideMath, "ENABLE_IOSTREAM", SWIG_From_int(static_cast< int >(1)));
  
  SwigClassGC_VALUE.klass = rb_define_class_under(mSylphideMath, "GC_VALUE", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__GC_VALUE, (void *) &SwigClassGC_VALUE);
  rb_undef_alloc_func(SwigClassGC_VALUE.klass);
  rb_define_method(SwigClassGC_VALUE.klass, "inspect", VALUEFUNC(_wrap_GC_VALUE_inspect), -1);
  rb_define_method(SwigClassGC_VALUE.klass, "to_s", VALUEFUNC(_wrap_GC_VALUE_to_s), -1);
  SwigClassGC_VALUE.mark = 0;
  SwigClassGC_VALUE.trackObjects = 0;
  
  swig::SwigGCReferences::initialize();
  
  
  SwigClassComplexD.klass = rb_define_class_under(mSylphideMath, "ComplexD", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_ComplexT_double_t, (void *) &SwigClassComplexD);
  rb_define_alloc_func(SwigClassComplexD.klass, _wrap_ComplexD_allocate);
  rb_define_method(SwigClassComplexD.klass, "initialize", VALUEFUNC(_wrap_new_ComplexD), -1);
  rb_define_singleton_method(SwigClassComplexD.klass, "polar", VALUEFUNC(_wrap_ComplexD_polar), -1);
  rb_define_method(SwigClassComplexD.klass, "infinite?", VALUEFUNC(_wrap_ComplexD_infiniteq___), -1);
  rb_define_method(SwigClassComplexD.klass, "finite?", VALUEFUNC(_wrap_ComplexD_finiteq___), -1);
  rb_define_method(SwigClassComplexD.klass, "abs2", VALUEFUNC(_wrap_ComplexD_abs2), -1);
  rb_define_method(SwigClassComplexD.klass, "abs", VALUEFUNC(_wrap_ComplexD_abs), -1);
  rb_define_alias(SwigClassComplexD.klass, "magnitude", "abs");
  rb_define_method(SwigClassComplexD.klass, "arg", VALUEFUNC(_wrap_ComplexD_arg), -1);
  rb_define_alias(SwigClassComplexD.klass, "angle", "arg");
  rb_define_alias(SwigClassComplexD.klass, "phase", "arg");
  rb_define_method(SwigClassComplexD.klass, "power", VALUEFUNC(_wrap_ComplexD_power), -1);
  rb_define_alias(SwigClassComplexD.klass, "**", "power");
  rb_define_method(SwigClassComplexD.klass, "sqrt", VALUEFUNC(_wrap_ComplexD_sqrt), -1);
  rb_define_method(SwigClassComplexD.klass, "conjugate", VALUEFUNC(_wrap_ComplexD_conjugate), -1);
  rb_define_alias(SwigClassComplexD.klass, "conj", "conjugate");
  rb_define_method(SwigClassComplexD.klass, "==", VALUEFUNC(_wrap_ComplexD___eq__), -1);
  rb_define_method(SwigClassComplexD.klass, "-@", VALUEFUNC(_wrap_ComplexD___neg__), -1);
  rb_define_method(SwigClassComplexD.klass, "+", VALUEFUNC(_wrap_ComplexD___add__), -1);
  rb_define_method(SwigClassComplexD.klass, "-", VALUEFUNC(_wrap_ComplexD___sub__), -1);
  rb_define_method(SwigClassComplexD.klass, "*", VALUEFUNC(_wrap_ComplexD___mul__), -1);
  rb_define_method(SwigClassComplexD.klass, "/", VALUEFUNC(_wrap_ComplexD___div__), -1);
  rb_define_alias(SwigClassComplexD.klass, "fdiv", "/");
  rb_define_singleton_method(SwigClassComplexD.klass, "exp", VALUEFUNC(_wrap_ComplexD_exp), -1);
  rb_define_singleton_method(SwigClassComplexD.klass, "rectangular", VALUEFUNC(_wrap_ComplexD_rectangular), -1);
  rb_define_method(SwigClassComplexD.klass, "real=", VALUEFUNC(_wrap_ComplexD_reale___), -1);
  rb_define_method(SwigClassComplexD.klass, "real", VALUEFUNC(_wrap_ComplexD_real), -1);
  rb_define_method(SwigClassComplexD.klass, "imaginary=", VALUEFUNC(_wrap_ComplexD_imaginarye___), -1);
  rb_define_alias(SwigClassComplexD.klass, "imag=", "imaginary=");
  rb_define_method(SwigClassComplexD.klass, "imaginary", VALUEFUNC(_wrap_ComplexD_imaginary), -1);
  rb_define_alias(SwigClassComplexD.klass, "imag", "imaginary");
  rb_define_method(SwigClassComplexD.klass, "to_s", VALUEFUNC(_wrap_ComplexD___str__), -1);
  SwigClassComplexD.mark = 0;
  SwigClassComplexD.destroy = (void (*)(void *)) free_Complex_Sl_double_Sg_;
  SwigClassComplexD.trackObjects = 0;
  
  {
    /* work around of %alias rectangular "rect"; %alias cannot be applied to singleton method */
    VALUE singleton = rb_singleton_class(
      ((swig_class *)SWIGTYPE_p_ComplexT_double_t->clientdata)->klass);
    rb_define_alias(singleton, "rect", "rectangular");
  }
  
  
  SwigClassMatrix_FrozenD.klass = rb_define_class_under(mSylphideMath, "Matrix_FrozenD", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, (void *) &SwigClassMatrix_FrozenD);
  rb_include_module(SwigClassMatrix_FrozenD.klass, rb_eval_string("Enumerable"));
  rb_undef_alloc_func(SwigClassMatrix_FrozenD.klass);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "rows", VALUEFUNC(_wrap_Matrix_FrozenD_rows), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "row_size", "rows");
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "row_count", "rows");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "columns", VALUEFUNC(_wrap_Matrix_FrozenD_columns), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "column_size", "columns");
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "column_count", "columns");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "square?", VALUEFUNC(_wrap_Matrix_FrozenD_squareq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "diagonal?", VALUEFUNC(_wrap_Matrix_FrozenD_diagonalq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "lower_triangular?", VALUEFUNC(_wrap_Matrix_FrozenD_lower_triangularq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "upper_triangular?", VALUEFUNC(_wrap_Matrix_FrozenD_upper_triangularq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "symmetric?", VALUEFUNC(_wrap_Matrix_FrozenD_symmetricq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "hermitian?", VALUEFUNC(_wrap_Matrix_FrozenD_hermitianq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "skew_symmetric?", VALUEFUNC(_wrap_Matrix_FrozenD_skew_symmetricq___), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "antisymmetric?", "skew_symmetric?");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "normal?", VALUEFUNC(_wrap_Matrix_FrozenD_normalq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "orthogonal?", VALUEFUNC(_wrap_Matrix_FrozenD_orthogonalq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "unitary?", VALUEFUNC(_wrap_Matrix_FrozenD_unitaryq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "trace", VALUEFUNC(_wrap_Matrix_FrozenD_trace), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "tr", "trace");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "sum", VALUEFUNC(_wrap_Matrix_FrozenD_sum), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "determinant", VALUEFUNC(_wrap_Matrix_FrozenD_determinant), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "det", "determinant");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "rank", VALUEFUNC(_wrap_Matrix_FrozenD_rank), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "cofactor", VALUEFUNC(_wrap_Matrix_FrozenD_cofactor), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "[]", VALUEFUNC(_wrap_Matrix_FrozenD___getitem__), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "element", "[]");
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "component", "[]");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "copy", VALUEFUNC(_wrap_Matrix_FrozenD_copy), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "circular", VALUEFUNC(_wrap_Matrix_FrozenD_circular), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "==", VALUEFUNC(_wrap_Matrix_FrozenD___eq__), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "different_size?", VALUEFUNC(_wrap_Matrix_FrozenD_different_sizeq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "-@", VALUEFUNC(_wrap_Matrix_FrozenD___neg__), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "+", VALUEFUNC(_wrap_Matrix_FrozenD___add__), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "-", VALUEFUNC(_wrap_Matrix_FrozenD___sub__), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "entrywise_product", VALUEFUNC(_wrap_Matrix_FrozenD_entrywise_product), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "hadamard_product", "entrywise_product");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "*", VALUEFUNC(_wrap_Matrix_FrozenD___mul__), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "first_minor", VALUEFUNC(_wrap_Matrix_FrozenD_first_minor), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "adjugate", VALUEFUNC(_wrap_Matrix_FrozenD_adjugate), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "lup", VALUEFUNC(_wrap_Matrix_FrozenD_lup), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "lup_decomposition", "lup");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "ud", VALUEFUNC(_wrap_Matrix_FrozenD_ud), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "ud_decomposition", "ud");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "qr", VALUEFUNC(_wrap_Matrix_FrozenD_qr), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "qr_decomposition", "qr");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "inverse", VALUEFUNC(_wrap_Matrix_FrozenD_inverse), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "inv", "inverse");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "/", VALUEFUNC(_wrap_Matrix_FrozenD___div__), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "debug", VALUEFUNC(_wrap_Matrix_FrozenD_debug), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "each", VALUEFUNC(_wrap_Matrix_FrozenD_each), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "each_with_index", "each");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "map", VALUEFUNC(_wrap_Matrix_FrozenD_map), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "collect", "map");
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "map_with_index", "map");
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "collect_with_index", "map");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "index", VALUEFUNC(_wrap_Matrix_FrozenD_index), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "find_index", "index");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "to_a", VALUEFUNC(_wrap_Matrix_FrozenD_to_a), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "to_s", VALUEFUNC(_wrap_Matrix_FrozenD___str__), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "conjugate", VALUEFUNC(_wrap_Matrix_FrozenD_conjugate), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "conj", "conjugate");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "adjoint", VALUEFUNC(_wrap_Matrix_FrozenD_adjoint), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "transpose", VALUEFUNC(_wrap_Matrix_FrozenD_transpose), -1);
  rb_define_alias(SwigClassMatrix_FrozenD.klass, "t", "transpose");
  rb_define_method(SwigClassMatrix_FrozenD.klass, "partial", VALUEFUNC(_wrap_Matrix_FrozenD_partial), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "row_vector", VALUEFUNC(_wrap_Matrix_FrozenD_row_vector), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "column_vector", VALUEFUNC(_wrap_Matrix_FrozenD_column_vector), -1);
  rb_define_method(SwigClassMatrix_FrozenD.klass, "eigen", VALUEFUNC(_wrap_Matrix_FrozenD_eigen), -1);
  SwigClassMatrix_FrozenD.mark = 0;
  SwigClassMatrix_FrozenD.destroy = (void (*)(void *)) free_Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatViewBase_Sg_;
  SwigClassMatrix_FrozenD.trackObjects = 0;
  
  SwigClassMatrix_FrozenD_f.klass = rb_define_class_under(mSylphideMath, "Matrix_FrozenD_f", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, (void *) &SwigClassMatrix_FrozenD_f);
  rb_include_module(SwigClassMatrix_FrozenD_f.klass, rb_eval_string("Enumerable"));
  rb_undef_alloc_func(SwigClassMatrix_FrozenD_f.klass);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "rows", VALUEFUNC(_wrap_Matrix_FrozenD_f_rows), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "row_size", "rows");
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "row_count", "rows");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "columns", VALUEFUNC(_wrap_Matrix_FrozenD_f_columns), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "column_size", "columns");
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "column_count", "columns");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "square?", VALUEFUNC(_wrap_Matrix_FrozenD_f_squareq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "diagonal?", VALUEFUNC(_wrap_Matrix_FrozenD_f_diagonalq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "lower_triangular?", VALUEFUNC(_wrap_Matrix_FrozenD_f_lower_triangularq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "upper_triangular?", VALUEFUNC(_wrap_Matrix_FrozenD_f_upper_triangularq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "symmetric?", VALUEFUNC(_wrap_Matrix_FrozenD_f_symmetricq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "hermitian?", VALUEFUNC(_wrap_Matrix_FrozenD_f_hermitianq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "skew_symmetric?", VALUEFUNC(_wrap_Matrix_FrozenD_f_skew_symmetricq___), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "antisymmetric?", "skew_symmetric?");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "normal?", VALUEFUNC(_wrap_Matrix_FrozenD_f_normalq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "orthogonal?", VALUEFUNC(_wrap_Matrix_FrozenD_f_orthogonalq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "unitary?", VALUEFUNC(_wrap_Matrix_FrozenD_f_unitaryq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "trace", VALUEFUNC(_wrap_Matrix_FrozenD_f_trace), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "tr", "trace");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "sum", VALUEFUNC(_wrap_Matrix_FrozenD_f_sum), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "determinant", VALUEFUNC(_wrap_Matrix_FrozenD_f_determinant), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "det", "determinant");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "rank", VALUEFUNC(_wrap_Matrix_FrozenD_f_rank), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "cofactor", VALUEFUNC(_wrap_Matrix_FrozenD_f_cofactor), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "[]", VALUEFUNC(_wrap_Matrix_FrozenD_f___getitem__), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "element", "[]");
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "component", "[]");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "copy", VALUEFUNC(_wrap_Matrix_FrozenD_f_copy), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "circular", VALUEFUNC(_wrap_Matrix_FrozenD_f_circular), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "==", VALUEFUNC(_wrap_Matrix_FrozenD_f___eq__), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "different_size?", VALUEFUNC(_wrap_Matrix_FrozenD_f_different_sizeq___), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "-@", VALUEFUNC(_wrap_Matrix_FrozenD_f___neg__), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "+", VALUEFUNC(_wrap_Matrix_FrozenD_f___add__), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "-", VALUEFUNC(_wrap_Matrix_FrozenD_f___sub__), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "entrywise_product", VALUEFUNC(_wrap_Matrix_FrozenD_f_entrywise_product), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "hadamard_product", "entrywise_product");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "*", VALUEFUNC(_wrap_Matrix_FrozenD_f___mul__), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "first_minor", VALUEFUNC(_wrap_Matrix_FrozenD_f_first_minor), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "adjugate", VALUEFUNC(_wrap_Matrix_FrozenD_f_adjugate), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "lup", VALUEFUNC(_wrap_Matrix_FrozenD_f_lup), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "lup_decomposition", "lup");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "ud", VALUEFUNC(_wrap_Matrix_FrozenD_f_ud), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "ud_decomposition", "ud");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "qr", VALUEFUNC(_wrap_Matrix_FrozenD_f_qr), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "qr_decomposition", "qr");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "inverse", VALUEFUNC(_wrap_Matrix_FrozenD_f_inverse), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "inv", "inverse");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "/", VALUEFUNC(_wrap_Matrix_FrozenD_f___div__), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "debug", VALUEFUNC(_wrap_Matrix_FrozenD_f_debug), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "each", VALUEFUNC(_wrap_Matrix_FrozenD_f_each), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "each_with_index", "each");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "map", VALUEFUNC(_wrap_Matrix_FrozenD_f_map), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "collect", "map");
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "map_with_index", "map");
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "collect_with_index", "map");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "index", VALUEFUNC(_wrap_Matrix_FrozenD_f_index), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "find_index", "index");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "to_a", VALUEFUNC(_wrap_Matrix_FrozenD_f_to_a), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "to_s", VALUEFUNC(_wrap_Matrix_FrozenD_f___str__), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "conjugate", VALUEFUNC(_wrap_Matrix_FrozenD_f_conjugate), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "conj", "conjugate");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "adjoint", VALUEFUNC(_wrap_Matrix_FrozenD_f_adjoint), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "transpose", VALUEFUNC(_wrap_Matrix_FrozenD_f_transpose), -1);
  rb_define_alias(SwigClassMatrix_FrozenD_f.klass, "t", "transpose");
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "partial", VALUEFUNC(_wrap_Matrix_FrozenD_f_partial), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "row_vector", VALUEFUNC(_wrap_Matrix_FrozenD_f_row_vector), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "column_vector", VALUEFUNC(_wrap_Matrix_FrozenD_f_column_vector), -1);
  rb_define_method(SwigClassMatrix_FrozenD_f.klass, "eigen", VALUEFUNC(_wrap_Matrix_FrozenD_f_eigen), -1);
  SwigClassMatrix_FrozenD_f.mark = 0;
  SwigClassMatrix_FrozenD_f.destroy = (void (*)(void *)) free_Matrix_Frozen_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sc_MatView_f_Sg_;
  SwigClassMatrix_FrozenD_f.trackObjects = 0;
  
  SwigClassMatrixD.klass = rb_define_class_under(mSylphideMath, "MatrixD", ((swig_class *) SWIGTYPE_p_Matrix_FrozenT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t, (void *) &SwigClassMatrixD);
  rb_define_alloc_func(SwigClassMatrixD.klass, _wrap_MatrixD_allocate);
  rb_define_method(SwigClassMatrixD.klass, "initialize", VALUEFUNC(_wrap_new_MatrixD), -1);
  rb_define_method(SwigClassMatrixD.klass, "[]=", VALUEFUNC(_wrap_MatrixD___setitem__), -1);
  rb_define_singleton_method(SwigClassMatrixD.klass, "scalar", VALUEFUNC(_wrap_MatrixD_scalar), -1);
  rb_define_singleton_method(SwigClassMatrixD.klass, "I", VALUEFUNC(_wrap_MatrixD_I), -1);
  rb_define_method(SwigClassMatrixD.klass, "swap_rows!", VALUEFUNC(_wrap_MatrixD_swap_rowsN___), -1);
  rb_define_method(SwigClassMatrixD.klass, "swap_columns!", VALUEFUNC(_wrap_MatrixD_swap_columnsN___), -1);
  rb_define_method(SwigClassMatrixD.klass, "replace!", VALUEFUNC(_wrap_MatrixD_replaceN___), -1);
  rb_define_method(SwigClassMatrixD.klass, "map!", VALUEFUNC(_wrap_MatrixD_mapN___), -1);
  rb_define_alias(SwigClassMatrixD.klass, "collect!", "map!");
  rb_define_alias(SwigClassMatrixD.klass, "map_with_index!", "map!");
  rb_define_alias(SwigClassMatrixD.klass, "collect_with_index!", "map!");
  rb_define_method(SwigClassMatrixD.klass, "resize!", VALUEFUNC(_wrap_MatrixD_resizeN___), -1);
  SwigClassMatrixD.mark = 0;
  SwigClassMatrixD.destroy = (void (*)(void *)) free_Matrix_Sl_double_Sc_Array2D_Dense_Sl_double_Sg__Sg_;
  SwigClassMatrixD.trackObjects = 0;
  
  {
    /* work around of %alias I "unit,identity"; %alias cannot be applied to singleton method */
    VALUE singleton = rb_singleton_class(
      ((swig_class *)SWIGTYPE_p_MatrixT_double_Array2D_DenseT_double_t_MatrixViewBaseT_t_t->clientdata)->klass);
    rb_define_alias(singleton, "identity", "I");
    rb_define_alias(singleton, "unit", "I");
  }
  
  
  SwigClassMatrix_FrozenComplexD.klass = rb_define_class_under(mSylphideMath, "Matrix_FrozenComplexD", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, (void *) &SwigClassMatrix_FrozenComplexD);
  rb_include_module(SwigClassMatrix_FrozenComplexD.klass, rb_eval_string("Enumerable"));
  rb_undef_alloc_func(SwigClassMatrix_FrozenComplexD.klass);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "rows", VALUEFUNC(_wrap_Matrix_FrozenComplexD_rows), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "row_size", "rows");
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "row_count", "rows");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "columns", VALUEFUNC(_wrap_Matrix_FrozenComplexD_columns), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "column_size", "columns");
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "column_count", "columns");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "square?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_squareq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "diagonal?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_diagonalq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "lower_triangular?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_lower_triangularq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "upper_triangular?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_upper_triangularq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "symmetric?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_symmetricq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "hermitian?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_hermitianq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "skew_symmetric?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_skew_symmetricq___), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "antisymmetric?", "skew_symmetric?");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "normal?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_normalq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "orthogonal?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_orthogonalq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "unitary?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_unitaryq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "trace", VALUEFUNC(_wrap_Matrix_FrozenComplexD_trace), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "tr", "trace");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "sum", VALUEFUNC(_wrap_Matrix_FrozenComplexD_sum), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "determinant", VALUEFUNC(_wrap_Matrix_FrozenComplexD_determinant), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "det", "determinant");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "rank", VALUEFUNC(_wrap_Matrix_FrozenComplexD_rank), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "cofactor", VALUEFUNC(_wrap_Matrix_FrozenComplexD_cofactor), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "[]", VALUEFUNC(_wrap_Matrix_FrozenComplexD___getitem__), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "element", "[]");
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "component", "[]");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "copy", VALUEFUNC(_wrap_Matrix_FrozenComplexD_copy), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "circular", VALUEFUNC(_wrap_Matrix_FrozenComplexD_circular), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "==", VALUEFUNC(_wrap_Matrix_FrozenComplexD___eq__), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "different_size?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_different_sizeq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "-@", VALUEFUNC(_wrap_Matrix_FrozenComplexD___neg__), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "+", VALUEFUNC(_wrap_Matrix_FrozenComplexD___add__), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "-", VALUEFUNC(_wrap_Matrix_FrozenComplexD___sub__), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "entrywise_product", VALUEFUNC(_wrap_Matrix_FrozenComplexD_entrywise_product), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "hadamard_product", "entrywise_product");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "*", VALUEFUNC(_wrap_Matrix_FrozenComplexD___mul__), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "first_minor", VALUEFUNC(_wrap_Matrix_FrozenComplexD_first_minor), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "adjugate", VALUEFUNC(_wrap_Matrix_FrozenComplexD_adjugate), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "lup", VALUEFUNC(_wrap_Matrix_FrozenComplexD_lup), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "lup_decomposition", "lup");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "ud", VALUEFUNC(_wrap_Matrix_FrozenComplexD_ud), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "ud_decomposition", "ud");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "qr", VALUEFUNC(_wrap_Matrix_FrozenComplexD_qr), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "qr_decomposition", "qr");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "inverse", VALUEFUNC(_wrap_Matrix_FrozenComplexD_inverse), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "inv", "inverse");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "/", VALUEFUNC(_wrap_Matrix_FrozenComplexD___div__), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "debug", VALUEFUNC(_wrap_Matrix_FrozenComplexD_debug), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "each", VALUEFUNC(_wrap_Matrix_FrozenComplexD_each), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "each_with_index", "each");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "map", VALUEFUNC(_wrap_Matrix_FrozenComplexD_map), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "collect", "map");
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "map_with_index", "map");
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "collect_with_index", "map");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "index", VALUEFUNC(_wrap_Matrix_FrozenComplexD_index), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "find_index", "index");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "to_a", VALUEFUNC(_wrap_Matrix_FrozenComplexD_to_a), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "to_s", VALUEFUNC(_wrap_Matrix_FrozenComplexD___str__), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "conjugate", VALUEFUNC(_wrap_Matrix_FrozenComplexD_conjugate), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "conj", "conjugate");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "adjoint", VALUEFUNC(_wrap_Matrix_FrozenComplexD_adjoint), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "transpose", VALUEFUNC(_wrap_Matrix_FrozenComplexD_transpose), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD.klass, "t", "transpose");
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "partial", VALUEFUNC(_wrap_Matrix_FrozenComplexD_partial), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "row_vector", VALUEFUNC(_wrap_Matrix_FrozenComplexD_row_vector), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "column_vector", VALUEFUNC(_wrap_Matrix_FrozenComplexD_column_vector), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD.klass, "eigen", VALUEFUNC(_wrap_Matrix_FrozenComplexD_eigen), -1);
  SwigClassMatrix_FrozenComplexD.mark = 0;
  SwigClassMatrix_FrozenComplexD.destroy = (void (*)(void *)) free_Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatViewBase_Sg_;
  SwigClassMatrix_FrozenComplexD.trackObjects = 0;
  
  SwigClassMatrix_FrozenComplexD_f.klass = rb_define_class_under(mSylphideMath, "Matrix_FrozenComplexD_f", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewFilterT_MatrixViewBaseT_t_t_t, (void *) &SwigClassMatrix_FrozenComplexD_f);
  rb_include_module(SwigClassMatrix_FrozenComplexD_f.klass, rb_eval_string("Enumerable"));
  rb_undef_alloc_func(SwigClassMatrix_FrozenComplexD_f.klass);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "rows", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_rows), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "row_size", "rows");
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "row_count", "rows");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "columns", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_columns), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "column_size", "columns");
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "column_count", "columns");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "square?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_squareq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "diagonal?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_diagonalq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "lower_triangular?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_lower_triangularq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "upper_triangular?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_upper_triangularq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "symmetric?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_symmetricq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "hermitian?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_hermitianq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "skew_symmetric?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_skew_symmetricq___), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "antisymmetric?", "skew_symmetric?");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "normal?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_normalq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "orthogonal?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_orthogonalq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "unitary?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_unitaryq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "trace", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_trace), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "tr", "trace");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "sum", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_sum), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "determinant", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_determinant), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "det", "determinant");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "rank", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_rank), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "cofactor", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_cofactor), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "[]", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f___getitem__), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "element", "[]");
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "component", "[]");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "copy", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_copy), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "circular", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_circular), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "==", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f___eq__), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "different_size?", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_different_sizeq___), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "-@", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f___neg__), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "+", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f___add__), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "-", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f___sub__), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "entrywise_product", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_entrywise_product), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "hadamard_product", "entrywise_product");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "*", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f___mul__), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "first_minor", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_first_minor), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "adjugate", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_adjugate), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "lup", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_lup), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "lup_decomposition", "lup");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "ud", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_ud), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "ud_decomposition", "ud");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "qr", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_qr), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "qr_decomposition", "qr");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "inverse", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_inverse), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "inv", "inverse");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "/", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f___div__), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "debug", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_debug), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "each", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_each), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "each_with_index", "each");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "map", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_map), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "collect", "map");
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "map_with_index", "map");
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "collect_with_index", "map");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "index", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_index), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "find_index", "index");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "to_a", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_to_a), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "to_s", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f___str__), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "conjugate", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_conjugate), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "conj", "conjugate");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "adjoint", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_adjoint), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "transpose", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_transpose), -1);
  rb_define_alias(SwigClassMatrix_FrozenComplexD_f.klass, "t", "transpose");
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "partial", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_partial), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "row_vector", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_row_vector), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "column_vector", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_column_vector), -1);
  rb_define_method(SwigClassMatrix_FrozenComplexD_f.klass, "eigen", VALUEFUNC(_wrap_Matrix_FrozenComplexD_f_eigen), -1);
  SwigClassMatrix_FrozenComplexD_f.mark = 0;
  SwigClassMatrix_FrozenComplexD_f.destroy = (void (*)(void *)) free_Matrix_Frozen_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sc_MatView_f_Sg_;
  SwigClassMatrix_FrozenComplexD_f.trackObjects = 0;
  
  SwigClassMatrixComplexD.klass = rb_define_class_under(mSylphideMath, "MatrixComplexD", ((swig_class *) SWIGTYPE_p_Matrix_FrozenT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t, (void *) &SwigClassMatrixComplexD);
  rb_define_alloc_func(SwigClassMatrixComplexD.klass, _wrap_MatrixComplexD_allocate);
  rb_define_method(SwigClassMatrixComplexD.klass, "initialize", VALUEFUNC(_wrap_new_MatrixComplexD), -1);
  rb_define_method(SwigClassMatrixComplexD.klass, "[]=", VALUEFUNC(_wrap_MatrixComplexD___setitem__), -1);
  rb_define_singleton_method(SwigClassMatrixComplexD.klass, "scalar", VALUEFUNC(_wrap_MatrixComplexD_scalar), -1);
  rb_define_singleton_method(SwigClassMatrixComplexD.klass, "I", VALUEFUNC(_wrap_MatrixComplexD_I), -1);
  rb_define_method(SwigClassMatrixComplexD.klass, "swap_rows!", VALUEFUNC(_wrap_MatrixComplexD_swap_rowsN___), -1);
  rb_define_method(SwigClassMatrixComplexD.klass, "swap_columns!", VALUEFUNC(_wrap_MatrixComplexD_swap_columnsN___), -1);
  rb_define_method(SwigClassMatrixComplexD.klass, "replace!", VALUEFUNC(_wrap_MatrixComplexD_replaceN___), -1);
  rb_define_method(SwigClassMatrixComplexD.klass, "map!", VALUEFUNC(_wrap_MatrixComplexD_mapN___), -1);
  rb_define_alias(SwigClassMatrixComplexD.klass, "collect!", "map!");
  rb_define_alias(SwigClassMatrixComplexD.klass, "map_with_index!", "map!");
  rb_define_alias(SwigClassMatrixComplexD.klass, "collect_with_index!", "map!");
  rb_define_method(SwigClassMatrixComplexD.klass, "resize!", VALUEFUNC(_wrap_MatrixComplexD_resizeN___), -1);
  SwigClassMatrixComplexD.mark = 0;
  SwigClassMatrixComplexD.destroy = (void (*)(void *)) free_Matrix_Sl_Complex_Sl_double_Sg__Sc_Array2D_Dense_Sl_Complex_Sl_double_Sg__Sg__Sg_;
  SwigClassMatrixComplexD.trackObjects = 0;
  
  {
    /* work around of %alias I "unit,identity"; %alias cannot be applied to singleton method */
    VALUE singleton = rb_singleton_class(
      ((swig_class *)SWIGTYPE_p_MatrixT_ComplexT_double_t_Array2D_DenseT_ComplexT_double_t_t_MatrixViewBaseT_t_t->clientdata)->klass);
    rb_define_alias(singleton, "identity", "I");
    rb_define_alias(singleton, "unit", "I");
  }
  
  rb_define_module_function(mSylphideMath, "tolerance=", VALUEFUNC(_wrap_tolerancee___), -1);
  rb_define_module_function(mSylphideMath, "tolerance", VALUEFUNC(_wrap_tolerance), -1);
}

